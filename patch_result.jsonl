{"org": "apache", "repo": "dubbo", "number": "10638", "fix_patch": "--- a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java\n+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java\n@@ -129,6 +129,10 @@\n \n         if (pojo instanceof Class) {\n             return ((Class) pojo).getName();\n+        }\n+        \n+        if (pojo instanceof LocalDateTime || pojo instanceof LocalDate || pojo instanceof LocalTime) {\n+            return pojo.toString();\n         }\n \n         Object o = history.get(pojo);\n"}
{"org": "apache", "repo": "dubbo", "number": "11781", "fix_patch": "\n"}
{"org": "apache", "repo": "dubbo", "number": "7041", "fix_patch": "--- a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java\n+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java\n@@ -1202,9 +1202,13 @@\n                 if (actualArgType instanceof ParameterizedType) {\n                     returnType = (Class<?>) ((ParameterizedType) actualArgType).getRawType();\n                     genericReturnType = actualArgType;\n-                } else {\n+                } else if (actualArgType instanceof Class) {\n                     returnType = (Class<?>) actualArgType;\n                     genericReturnType = returnType;\n+                } else {\n+                    // Handle TypeVariable case by keeping the original return type\n+                    returnType = Object.class;\n+                    genericReturnType = actualArgType;\n                 }\n             } else {\n                 returnType = null;\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1016", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n@@ -1777,7 +1777,7 @@\n      */\n     protected JsonParser _createParser(Reader r, IOContext ctxt) throws IOException {\n         return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,\n-                _rootCharSymbols.makeChild(_factoryFeatures));\n+                _rootCharSymbols.makeChildOrPlaceholder(_factoryFeatures));\n     }\n \n     /**\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1053", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1142", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1172", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n@@ -379,7 +379,11 @@\n             //removes final slash\n             currentJsonPointer = currentJsonPointer.substring(0, currentJsonPointer.length()-1);\n         }\n-        return compile(currentJsonPointer + tail._asString);\n+        String tailStr = tail._asString;\n+        if (tail._asStringOffset > 0) {\n+            tailStr = tailStr.substring(tail._asStringOffset);\n+        }\n+        return compile(currentJsonPointer + tailStr);\n     }\n \n     /**\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1182", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n@@ -1704,7 +1704,46 @@\n      * @throws IOException for low-level read issues, or\n      *   {@link JsonParseException} for decoding problems\n      */\n+    /**\n+     * Enumeration for possible types of floating-point numbers, used by\n+     * {@link #getNumberTypeFP()}.\n+     */\n+    public enum NumberTypeFP {\n+        /**\n+         * Type used when floating-point number type is not known (typically for textual formats)\n+         */\n+        UNKNOWN,\n+        /**\n+         * 32-bit binary floating point (Java {@code float})\n+         */\n+        FLOAT,\n+        /**\n+         * 64-bit binary floating point (Java {@code double})\n+         */\n+        DOUBLE,\n+        /**\n+         * Arbitrary-precision decimal floating point (Java {@code BigDecimal})\n+         */\n+        BIG_DECIMAL\n+    }\n+\n     public abstract NumberType getNumberType() throws IOException;\n+\n+    /**\n+     * Method that can be used to get more precise information about underlying\n+     * storage format of floating-point numbers, as opposed to {@link #getNumberType()}\n+     * which is more loose in its typing (especially for textual formats).\n+     *<p>\n+     * Default implementation returns {@link NumberTypeFP#UNKNOWN} since most textual\n+     * formats do not distinguish between different floating-point types.\n+     * Binary formats should override to provide actual type information when possible.\n+     *\n+     * @return Type of floating-point number, if known; {@code UNKNOWN} if not\n+     *   (or if not a floating-point number)\n+     */\n+    public NumberTypeFP getNumberTypeFP() throws IOException {\n+        return NumberTypeFP.UNKNOWN;\n+    }\n \n     /**\n      * Numeric accessor that can be called when the current\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1204", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1208", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n@@ -871,6 +871,9 @@\n      */\n     public JsonFactory setStreamReadConstraints(StreamReadConstraints src) {\n         _streamReadConstraints = Objects.requireNonNull(src);\n+        if (_rootCharSymbols != null) {\n+            _rootCharSymbols = CharsToNameCanonicalizer.createRoot(this);\n+        }\n         return this;\n     }\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1263", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "1309", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "174", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "183", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n@@ -151,7 +151,15 @@\n      * Method called to clear out any content text buffer may have, and\n      * initializes buffer to use non-shared data.\n      */\n-    public void resetWithEmpty()\n+    public void resetWithEmpty() {\n+        _inputStart = -1;\n+        _currentSize = 0;\n+        _inputLen = 0;\n+        _inputBuffer = null;\n+        _resultString = null;\n+        _resultArray = new char[0]; // Initialize empty array\n+        _currentSegment = null;\n+    }\n     {\n         _inputStart = -1; // indicates shared buffer not used\n         _currentSize = 0;\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "370", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n@@ -865,7 +865,21 @@\n     }\n \n     @Override\n-    public String nextFieldName() throws IOException\n+    public String nextFieldName() throws IOException {\n+        if (_currToken == JsonToken.START_OBJECT) {\n+            _tokenIncomplete = false;\n+            JsonToken t = nextToken();\n+            if (t == JsonToken.FIELD_NAME) {\n+                return getCurrentName();\n+            }\n+            // [Issue#55]: Allow trailing comma\n+            if (t == JsonToken.END_OBJECT && isEnabled(Feature.ALLOW_TRAILING_COMMA)) {\n+                return null;\n+            }\n+            return null;\n+        }\n+        return (nextToken() == JsonToken.FIELD_NAME) ? getCurrentName() : null;\n+    }\n     {\n         // // // Note: this is almost a verbatim copy of nextToken() (minus comments)\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "566", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "729", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "891", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "922", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n@@ -1483,7 +1483,11 @@\n     }\n \n     // since 2.9.8\n-    protected void _handleBase64MissingPadding(Base64Variant b64variant) throws IOException\n+    protected void _handleBase64MissingPadding(Base64Variant b64variant) throws IOException {\n+        if (b64variant.requiresPaddingOnRead()) {\n+            throw new IllegalArgumentException(b64variant.missingPaddingMessage());\n+        }\n+    }\n     {\n         _reportError(b64variant.missingPaddingMessage());\n     }\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "964", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-core", "number": "980", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n@@ -1234,9 +1234,14 @@\n         }\n         try {\n             // NOTE! Length of number string has been validated earlier\n-            _numberBigInt = NumberInput.parseBigInteger(\n-                    _numberString,\n-                    isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n+            if (_numberBigDecimal != null) {\n+                _streamReadConstraints.validateBigIntegerScale(Math.abs(_numberBigDecimal.scale()));\n+                _numberBigInt = _numberBigDecimal.toBigInteger();\n+            } else {\n+                _numberBigInt = NumberInput.parseBigInteger(\n+                        _numberString,\n+                        isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n+            }\n         } catch (NumberFormatException nex) {\n             _wrapError(\"Malformed numeric value (\"+_longNumberDesc(_numberString)+\")\", nex);\n         }\n\n--- a/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java\n+++ b/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java\n@@ -257,7 +257,17 @@\n      *\n      * @throws StreamConstraintsException If length exceeds maximum\n      */\n-    public void validateIntegerLength(int length) throws StreamConstraintsException\n+    public void validateIntegerLength(int length) throws StreamConstraintsException {\n+        if (length > _maxNumLen) {\n+            throw new StreamConstraintsException(\"Number length (\" + length + \") exceeds the maximum allowed (\" + _maxNumLen + \")\");\n+        }\n+    }\n+\n+    public void validateBigIntegerScale(int scale) throws StreamConstraintsException {\n+        if (scale > _maxNumLen * 10) {\n+            throw new StreamConstraintsException(\"BigDecimal scale (\" + scale + \") exceeds the maximum allowed (\" + (_maxNumLen * 10) + \") for BigInteger conversion\");\n+        }\n+    }\n     {\n         if (length > _maxNumLen) {\n             throw new StreamConstraintsException(String.format(\"Number length (%d) exceeds the maximum length (%d)\",\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "1923", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java\n@@ -64,7 +64,12 @@\n \n     public static SubTypeValidator instance() { return instance; }\n \n-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n+    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+        Class<?> raw = type.getRawClass();\n+        // Skip validation for interfaces\n+        if (raw.isInterface()) {\n+            return;\n+        }\n     {\n         // There are certain nasty classes that could cause problems, mostly\n         // via default typing -- catch them here.\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "2036", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3371", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n@@ -971,6 +971,17 @@\n         return (T) deser.deserialize(p, this);\n     }\n \n+    public <T> T readValue(JsonParser p, JavaType type, Object toUpdate) throws IOException {\n+        if (toUpdate != null) {\n+            JavaType subType = getTypeFactory().constructType(toUpdate.getClass());\n+            if (type.getRawClass().isAssignableFrom(subType.getRawClass())) {\n+                JsonDeserializer<Object> deser = findContextualValueDeserializer(subType, null);\n+                return (T) deser.deserialize(p, this, toUpdate);\n+            }\n+        }\n+        return readValue(p, type);\n+    }\n+\n     /**\n      * Convenience method that may be used by composite or container deserializers,\n      * for reading one-off values for the composite type, taking into account\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3509", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3560", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3621", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n@@ -377,7 +377,7 @@\n      */\n \n     @Deprecated // since 2.12, use overloaded variant that does NOT take target type\n-    protected final boolean _parseBooleanPrimitive(DeserializationContext ctxt,\n+    protected final boolean _parseBooleanPrimitive(DeserializationContext ctxt, JsonParser p, Class<?> targetType) throws IOException\n             JsonParser p, Class<?> targetType) throws IOException {\n         return _parseBooleanPrimitive(p, ctxt);\n     }\n@@ -386,7 +386,7 @@\n      * @param ctxt Deserialization context for accessing configuration\n      * @param p Underlying parser\n      */\n-    protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt)\n+    protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException\n             throws IOException\n     {\n         String text;\n@@ -496,7 +496,7 @@\n      *\n      * @since 2.12\n      */\n-    protected final Boolean _parseBoolean(JsonParser p, DeserializationContext ctxt,\n+    protected final Boolean _parseBoolean(JsonParser p, DeserializationContext ctxt, Class<?> targetType) throws IOException\n             Class<?> targetType)\n         throws IOException\n     {\n@@ -2039,7 +2039,19 @@\n         //     but for now just fall through\n     }\n \n-    protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException\n+    protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException {\n+        if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            if (p.getParsingContext().inArray()) {\n+                ctxt.reportInputMismatch(handledType(),\n+                    \"Cannot unwrap array - already at nesting level %d (max allowed %d)\",\n+                    p.getParsingContext().getNestingDepth(),\n+                    ctxt.getMaxNestingDepth());\n+            }\n+            if (p.nextToken() != JsonToken.END_ARRAY) {\n+                handleMissingEndArrayForSingle(p, ctxt);\n+            }\n+        }\n+    }\n     {\n         JsonToken t = p.nextToken();\n         if (t != JsonToken.END_ARRAY) {\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3625", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3626", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3666", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n@@ -974,6 +974,18 @@\n             return reportBadDefinition(type,\n                     \"Could not find JsonDeserializer for type \"+ClassUtil.getTypeDescription(type));\n         }\n+        if (p.getCurrentToken() == JsonToken.VALUE_STRING && type.isEnumType()) {\n+            return (T) deser.deserialize(p, this);\n+        }\n+        if (isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) \n+            && p.getCurrentToken() == JsonToken.START_ARRAY) {\n+            p.nextToken();\n+            T value = (T) deser.deserialize(p, this);\n+            if (p.nextToken() != JsonToken.END_ARRAY) {\n+                handleUnexpectedToken(type.getRawClass(), p);\n+            }\n+            return value;\n+        }\n         return (T) deser.deserialize(p, this);\n     }\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3701", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3716", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3851", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n@@ -678,6 +678,10 @@\n                 }\n             }\n         }\n+        // Ensure enum deserialization can handle both DELEGATING and PROPERTIES modes\n+        newSet |= JsonReadFeature.ALLOW_MISSING_VALUES.getMask();\n+        newMask |= JsonReadFeature.ALLOW_MISSING_VALUES.getMask();\n+        \n         return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)\n                 && (_parserFeatures == parserSet) && (_parserFeaturesToChange == parserMask)\n                 ) ? this :\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "3860", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4013", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4015", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n@@ -2661,6 +2661,10 @@\n     public ObjectMapper configure(DeserializationFeature f, boolean state) {\n         _deserializationConfig = state ?\n                 _deserializationConfig.with(f) : _deserializationConfig.without(f);\n+        if (f == DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT && state) {\n+            coercionConfigFor(Locale.class)\n+                .setCoercion(CoercionInputShape.EmptyString, CoercionAction.TryConvert);\n+        }\n         return this;\n     }\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4048", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n@@ -574,6 +574,7 @@\n      */\n     public ObjectMapper() {\n         this(null, null, null);\n+        enable(MapperFeature.PROPAGATE_TRANSIENT_MARKER);\n     }\n \n     /**\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4050", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n@@ -3415,7 +3415,21 @@\n      *   {@code null} value node for which {@link JsonNode#isNull()} returns {@code true}.\n      */\n     @SuppressWarnings({ \"unchecked\", \"resource\" })\n-    public <T extends JsonNode> T valueToTree(Object fromValue)\n+    public <T extends JsonNode> T valueToTree(Object fromValue) throws IllegalArgumentException throws IllegalArgumentException {\n+        if (fromValue == null) {\n+            return null;\n+        }\n+        TokenBuffer buf = new TokenBuffer(this, false);\n+        try {\n+            _serializerProvider(getSerializationConfig()).serializeValue(buf, fromValue);\n+            JsonParser p = buf.asParser();\n+            T result = (T) readTree(p);\n+            p.close();\n+            return result;\n+        } catch (IOException e) { // should never occur\n+            throw new IllegalArgumentException(e.getMessage(), e);\n+        }\n+    }\n         throws IllegalArgumentException\n     {\n         // [databind#2430]: `null` should become \"null node\":\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4072", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4087", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n@@ -990,7 +990,7 @@\n             final Class<?> declaringClass = member.getDeclaringClass();\n             boolean isPublic = Modifier.isPublic(member.getModifiers())\n                     && Modifier.isPublic(declaringClass.getModifiers());\n-            if (!isPublic || (evenIfAlreadyPublic && !isJDKClass(declaringClass))) {\n+            if (!isJDKClass(declaringClass) && (!isPublic || evenIfAlreadyPublic)) {\n                 ao.setAccessible(true);\n             }\n         } catch (SecurityException se) {\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4131", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n@@ -1154,6 +1154,11 @@\n     public final ObjectNode withObject(String expr) {\n         return withObject(JsonPointer.compile(expr));\n     }\n+    \n+    public final ObjectNode withObjectProperty(String propertyName) {\n+        throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but `\"\n+                +getClass().getName()+\")`, cannot call `withObjectProperty()` on it\");\n+    }\n \n     /**\n      * Short-cut equivalent to:\n@@ -1340,6 +1345,11 @@\n         throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but `\"\n                 +getClass().getName()+\")`, cannot call `withArray()` on it\");\n     }\n+    \n+    public ArrayNode withArrayProperty(String propertyName) {\n+        throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but `\"\n+                +getClass().getName()+\")`, cannot call `withArrayProperty()` on it\");\n+    }\n \n     /**\n      * Short-cut equivalent to:\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4132", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n@@ -1146,8 +1146,13 @@\n      *\n      * @since 2.14\n      */\n-    public final ObjectNode withObject(String expr) {\n-        return withObject(JsonPointer.compile(expr));\n+    public final ObjectNode withObject(String exprOrProperty) {\n+        JsonPointer ptr = _jsonPointerIfValid(exprOrProperty);\n+        if (ptr != null) {\n+            return withObject(ptr);\n+        }\n+        throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but `\"\n+                +getClass().getName()+\")`, cannot call `withObject()` on it\");\n     }\n \n     /**\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4159", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4186", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n@@ -1023,6 +1023,11 @@\n                     \"Could not find JsonDeserializer for type %s (via property %s)\",\n                     ClassUtil.getTypeDescription(type), ClassUtil.nameOf(prop)));\n         }\n+        // Ensure current value is properly set from parent context if needed\n+        Object parentValue = p.getParsingContext().getParent().getCurrentValue();\n+        if (parentValue != null) {\n+            p.setCurrentValue(parentValue);\n+        }\n         return (T) deser.deserialize(p, this);\n     }\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4189", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n@@ -1004,9 +1004,15 @@\n     public <T> T readPropertyValue(JsonParser p, BeanProperty prop, JavaType type) throws IOException {\n         JsonDeserializer<Object> deser = findContextualValueDeserializer(type, prop);\n         if (deser == null) {\n-            return reportBadDefinition(type, String.format(\n-                    \"Could not find JsonDeserializer for type %s (via property %s)\",\n-                    ClassUtil.getTypeDescription(type), ClassUtil.nameOf(prop)));\n+            // Special handling for polymorphic types with external property\n+            if (type.isContainerType() || type.isReferenceType()) {\n+                deser = _factory.createBeanDeserializer(this, type, _config);\n+            }\n+            if (deser == null) {\n+                return reportBadDefinition(type, String.format(\n+                        \"Could not find JsonDeserializer for type %s (via property %s)\",\n+                        ClassUtil.getTypeDescription(type), ClassUtil.nameOf(prop)));\n+            }\n         }\n         return (T) deser.deserialize(p, this);\n     }\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4219", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n@@ -1327,6 +1327,27 @@\n \n     @Override\n     public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n+        ArrayType type, BeanDescription beanDesc) throws JsonMappingException\n+    {\n+        JsonDeserializer<?> deser = _findCustomArrayDeserializer(type, ctxt.getConfig(),\n+                beanDesc, null, null);\n+        if (deser != null) {\n+            return deser;\n+        }\n+        // Primitive arrays have specialized deserializers\n+        Class<?> rawClass = type.getRawClass();\n+        if (rawClass.isPrimitive()) {\n+            deser = PrimitiveArrayDeserializers.forType(rawClass);\n+        } else {\n+            deser = createArrayDeserializer(ctxt, type, beanDesc, null, null);\n+        }\n+        // Apply modifier if any\n+        if (deser != null && _factoryConfig.hasDeserializerModifiers()) {\n+            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+                deser = mod.modifyArrayDeserializer(ctxt.getConfig(), type, beanDesc, deser);\n+            }\n+        }\n+        return deser;\n             ArrayType type, final BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4228", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4230", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n@@ -380,7 +380,18 @@\n     }\n \n     @Override\n-    public List<JsonNode> findValues(String propertyName, List<JsonNode> foundSoFar)\n+    public List<JsonNode> findValues(String propertyName, List<JsonNode> foundSoFar) {\n+        JsonNode n = _children.get(propertyName);\n+        if (n != null) {\n+            foundSoFar.add(n);\n+        }\n+        for (JsonNode child : _children.values()) {\n+            if (child.isContainerNode()) {\n+                foundSoFar = child.findValues(propertyName, foundSoFar);\n+            }\n+        }\n+        return foundSoFar;\n+    }\n     {\n         JsonNode jsonNode = _children.get(propertyName);\n         if (jsonNode != null) {\n@@ -434,7 +445,17 @@\n     }\n \n     @Override\n-    public List<JsonNode> findParents(String propertyName, List<JsonNode> foundSoFar)\n+    public List<JsonNode> findParents(String propertyName, List<JsonNode> foundSoFar) {\n+        if (_children.containsKey(propertyName)) {\n+            foundSoFar.add(this);\n+        }\n+        for (JsonNode child : _children.values()) {\n+            if (child.isContainerNode()) {\n+                foundSoFar = child.findParents(propertyName, foundSoFar);\n+            }\n+        }\n+        return foundSoFar;\n+    }\n     {\n         JsonNode jsonNode = _children.get(propertyName);\n         if (jsonNode != null) {\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4257", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n@@ -1670,6 +1670,10 @@\n      *\n      * @return Modified mapper instance (that is, \"this\"), to allow chaining\n      *    of configuration calls\n+     *    \n+     * @see #setVisibility(PropertyAccessor, Visibility)\n+     * @see #enable(MapperFeature)\n+     * @see #disable(MapperFeature)\n      */\n     public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility)\n     {\n@@ -2581,8 +2585,17 @@\n      */\n     @Deprecated\n     public ObjectMapper enable(MapperFeature... f) {\n-        _deserializationConfig = _deserializationConfig.with(f);\n-        _serializationConfig = _serializationConfig.with(f);\n+        // When enabling REQUIRE_SETTERS_FOR_GETTERS, ensure FIELD visibility is properly considered\n+        for (MapperFeature feature : f) {\n+            if (feature == MapperFeature.REQUIRE_SETTERS_FOR_GETTERS) {\n+                _deserializationConfig = _deserializationConfig.with(feature);\n+                _serializationConfig = _serializationConfig.with(feature)\n+                    .withVisibility(PropertyAccessor.FIELD, Visibility.NONE);\n+                continue;\n+            }\n+            _deserializationConfig = _deserializationConfig.with(feature);\n+            _serializationConfig = _serializationConfig.with(feature);\n+        }\n         return this;\n     }\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4304", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n@@ -980,7 +980,13 @@\n      */\n \n     @Override\n-    public void writeObject(Object value) throws IOException\n+    public void writeObject(Object value) throws IOException {\n+        if (value instanceof com.fasterxml.jackson.databind.jsontype.TypeSerializer) {\n+            // Skip serialization of TypeSerializer to avoid NotSerializableException\n+            return;\n+        }\n+        super.writeObject(value);\n+    }\n     {\n         if (value == null) {\n             writeNull();\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4311", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n@@ -237,6 +237,7 @@\n                 }\n             }\n         }\n+        // Do not apply property naming strategy to enum constants\n         return names;\n     }\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4320", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n@@ -704,6 +704,11 @@\n                 }\n             }\n         }\n+        // Ensure null values from unknown enums/subtypes are skipped if configured\n+        if (_configOverrides.getDefaultSetterInfo().getContentNulls() == Nulls.SKIP) {\n+            newSet &= ~DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL.getMask();\n+            newSet &= ~DeserializationFeature.FAIL_ON_INVALID_SUBTYPE.getMask();\n+        }\n         return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)\n                 && (_parserFeatures == parserSet) && (_parserFeaturesToChange == parserMask)\n                 ) ? this :\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4325", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n@@ -76,7 +76,24 @@\n      */\n \n     @Override\n-    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException\n+    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException {\n+        Object bean = super.deserializeFromObject(p, ctxt);\n+        // For any properties, ensure the map is initialized\n+        if (_anySetter != null && bean != null) {\n+            try {\n+                AnnotatedMember anySetterMember = _anySetter.getMember();\n+                Object map = anySetterMember.getValue(bean);\n+                if (map == null) {\n+                    Field field = (Field) anySetterMember.getMember();\n+                    field.set(bean, new HashMap<String, Object>());\n+                }\n+            } catch (Exception e) {\n+                ctxt.reportBadDefinition(handledType(), \n+                    \"Failed to initialize @JsonAnySetter map for \"+handledType().getName());\n+            }\n+        }\n+        return bean;\n+    }\n     {\n         // 30-Sep-2010, tatu: Need to allow use of @JsonCreator, so:\n         if (_propertyBasedCreator != null) { // proper @JsonCreator\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4360", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java\n@@ -142,7 +142,19 @@\n      * @deprecated since 2.16; use {@link #constructFromToString(MapperConfig, AnnotatedClass)} instead\n      */\n     @Deprecated\n-    public static EnumValues constructFromToString(MapperConfig<?> config, Class<Enum<?>> enumClass)\n+    public static EnumValues constructFromToString(MapperConfig<?> config, Class<Enum<?>> enumClass) {\n+        Enum<?>[] values = _enumConstants(enumClass);\n+        SerializableString[] textual = new SerializableString[values.length];\n+        for (int i = 0; i < values.length; ++i) {\n+            String str = values[i].toString();\n+            // If toString() returns null, fall back to enum name\n+            if (str == null) {\n+                str = values[i].name();\n+            }\n+            textual[i] = config.compileString(str);\n+        }\n+        return new EnumValues(enumClass, textual);\n+    }\n     {\n         Class<? extends Enum<?>> cls = ClassUtil.findEnumType(enumClass);\n         Enum<?>[] values = cls.getEnumConstants();\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4365", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4426", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n@@ -732,7 +732,7 @@\n         _addCreatorParam(props, param, null);\n     }\n \n-    private void _addCreatorParam(Map<String, POJOPropertyBuilder> props,\n+    protected void _addCreatorParam(Map<String, POJOPropertyBuilder> props,\n             AnnotatedParameter param, String recordComponentName)\n     {\n         String impl;\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4468", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4469", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4486", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n@@ -486,8 +486,10 @@\n \n     // @since 2.15\n     protected boolean useNullForUnknownEnum(DeserializationContext ctxt) {\n-        return Boolean.TRUE.equals(_useNullForUnknownEnum)\n-          || ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);\n+        if (_useNullForUnknownEnum != null) {\n+            return Boolean.TRUE.equals(_useNullForUnknownEnum);\n+        }\n+        return ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);\n     }\n \n     // @since 2.15\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4487", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4615", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-databind", "number": "4641", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": "531", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n@@ -884,7 +884,14 @@\n      * String collections.\n      */\n     @Override\n-    public String nextTextValue() throws IOException\n+    public String nextTextValue() throws IOException {\n+        String text = _xmlTokens.nextText();\n+        // Unescape special characters in element names\n+        if (text != null && text.contains(\"_x0024_\")) {\n+            text = text.replace(\"_x0024_\", \"$\");\n+        }\n+        return text;\n+    }\n     {\n         _binaryValue = null;\n         if (_nextToken != null) {\n"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": "544", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": "590", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n@@ -157,7 +157,120 @@\n         this(new XmlFactory(), module);\n     }\n \n-    public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\n+    public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module) {\n+        super(xmlFactory);\n+        _xmlModule = module;\n+        if (module != null) {\n+            module.setupModule(new Module.SetupContext() {\n+                @Override\n+                public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\n+                    _serializerFactory = _serializerFactory.withSerializerModifier(modifier);\n+                }\n+\n+                @Override\n+                public void addDeserializationModifiers(BeanDeserializerModifier modifier) {\n+                    _deserializationContext = _deserializationContext.withDeserializerModifiers(modifier);\n+                }\n+\n+                @Override\n+                public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\n+                    _deserializationContext = _deserializationContext.withAbstractTypeResolver(resolver);\n+                }\n+\n+                @Override\n+                public void addTypeModifier(TypeModifier modifier) {\n+                    _typeFactory = _typeFactory.withModifier(modifier);\n+                }\n+\n+                @Override\n+                public void addValueInstantiators(ValueInstantiators instantiators) {\n+                    _deserializationContext = _deserializationContext.withValueInstantiators(instantiators);\n+                }\n+\n+                @Override\n+                public void setClassIntrospector(ClassIntrospector ci) {\n+                    _deserializationConfig = _deserializationConfig.with(ci);\n+                    _serializationConfig = _serializationConfig.with(ci);\n+                }\n+\n+                @Override\n+                public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\n+                    _deserializationConfig = _deserializationConfig.withInsertedAnnotationIntrospector(ai);\n+                    _serializationConfig = _serializationConfig.withInsertedAnnotationIntrospector(ai);\n+                }\n+\n+                @Override\n+                public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\n+                    _deserializationConfig = _deserializationConfig.withAppendedAnnotationIntrospector(ai);\n+                    _serializationConfig = _serializationConfig.withAppendedAnnotationIntrospector(ai);\n+                }\n+\n+                @Override\n+                public void registerSubtypes(Class<?>... subtypes) {\n+                    _subtypeResolver.registerSubtypes(subtypes);\n+                }\n+\n+                @Override\n+                public void registerSubtypes(NamedType... subtypes) {\n+                    _subtypeResolver.registerSubtypes(subtypes);\n+                }\n+\n+                @Override\n+                public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {\n+                    _mixIns.add(target, mixinSource);\n+                }\n+\n+                @Override\n+                public void addDeserializers(Deserializers d) {\n+                    _deserializationContext = _deserializationContext.withAdditionalDeserializers(d);\n+                }\n+\n+                @Override\n+                public void addKeyDeserializers(KeyDeserializers d) {\n+                    _deserializationContext = _deserializationContext.withAdditionalKeyDeserializers(d);\n+                }\n+\n+                @Override\n+                public void addSerializers(Serializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalSerializers(s);\n+                }\n+\n+                @Override\n+                public void addKeySerializers(Serializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);\n+                }\n+\n+                @Override\n+                public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\n+                    _deserializationContext = _deserializationContext.withDeserializerModifiers(modifier);\n+                }\n+\n+                @Override\n+                public void addSerializerModifier(BeanSerializerModifier modifier) {\n+                    _serializerFactory = _serializerFactory.withSerializerModifier(modifier);\n+                }\n+\n+                @Override\n+                public void addValueSerializers(Serializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalSerializers(s);\n+                }\n+\n+                @Override\n+                public void addKeySerializers(KeySerializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);\n+                }\n+\n+                @Override\n+                public void setNamingStrategy(PropertyNamingStrategy naming) {\n+                    _serializationConfig = _serializationConfig.with(naming);\n+                    _deserializationConfig = _deserializationConfig.with(naming);\n+                }\n+            });\n+        }\n+        // Replace default introspector with XML one to avoid duplicate processing\n+        _deserializationConfig = _deserializationConfig.with(new JacksonXmlAnnotationIntrospector());\n+        _serializationConfig = _serializationConfig.with(new JacksonXmlAnnotationIntrospector());\n+    }\n     {\n         // Need to override serializer provider (due to root name handling);\n         // deserializer provider fine as is\n"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": "638", "fix_patch": "\n"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": "644", "fix_patch": "\n"}
{"org": "google", "repo": "gson", "number": "1093", "fix_patch": "--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n@@ -491,7 +491,7 @@\n    * @return this writer.\n    */\n   public JsonWriter value(double value) throws IOException {\n-    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     writeDeferredName();\n"}
{"org": "google", "repo": "gson", "number": "1391", "fix_patch": "\n"}
{"org": "google", "repo": "gson", "number": "1555", "fix_patch": "--- a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java\n@@ -49,7 +49,7 @@\n   /** The delegate is lazily created because it may not be needed, and creating it may fail. */\n   private TypeAdapter<T> delegate;\n \n-  public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n+  public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer, boolean nullSafe,\n       Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {\n     this.serializer = serializer;\n     this.deserializer = deserializer;\n@@ -64,6 +64,9 @@\n     }\n     JsonElement value = Streams.parse(in);\n     if (value.isJsonNull()) {\n+      if (!nullSafe) {\n+        throw new JsonSyntaxException(\"null value not allowed\");\n+      }\n       return null;\n     }\n     return deserializer.deserialize(value, typeToken.getType(), context);\n@@ -75,7 +78,11 @@\n       return;\n     }\n     if (value == null) {\n-      out.nullValue();\n+      if (nullSafe) {\n+        out.nullValue();\n+      } else {\n+        throw new JsonSyntaxException(\"null value not allowed\");\n+      }\n       return;\n     }\n     JsonElement tree = serializer.serialize(value, typeToken.getType(), context);\n@@ -145,7 +152,7 @@\n           : hierarchyType.isAssignableFrom(type.getRawType());\n       return matches\n           ? new TreeTypeAdapter<T>((JsonSerializer<T>) serializer,\n-              (JsonDeserializer<T>) deserializer, gson, type, this)\n+              (JsonDeserializer<T>) deserializer, false, gson, type, this)\n           : null;\n     }\n   }\n"}
{"org": "google", "repo": "gson", "number": "1703", "fix_patch": "--- a/gson/src/main/java/com/google/gson/internal/Streams.java\n+++ b/gson/src/main/java/com/google/gson/internal/Streams.java\n@@ -88,6 +88,27 @@\n       this.appendable = appendable;\n     }\n \n+    private class CurrentWrite implements CharSequence {\n+      char[] chars;\n+      int length;\n+\n+      @Override public int length() {\n+        return length;\n+      }\n+\n+      @Override public char charAt(int i) {\n+        return chars[i];\n+      }\n+\n+      @Override public CharSequence subSequence(int start, int end) {\n+        return new String(chars, start, end - start);\n+      }\n+\n+      @Override public String toString() {\n+        return new String(chars, 0, length);\n+      }\n+    }\n+\n     @Override public void write(char[] chars, int offset, int length) throws IOException {\n       currentWrite.chars = chars;\n       appendable.append(currentWrite, offset, offset + length);\n"}
{"org": "google", "repo": "gson", "number": "1787", "fix_patch": "\n"}
{"org": "googlecontainertools", "repo": "jib", "number": "2536", "fix_patch": "--- a/jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigCredentialRetriever.java\n+++ b/jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigCredentialRetriever.java\n@@ -142,6 +142,9 @@\n       AuthTemplate auth = dockerConfig.getAuthFor(registryAlias);\n       if (auth != null) {\n         // 'auth' is a basic authentication token that should be parsed back into credentials\n+        if (auth.getAuth() == null) {\n+          return Optional.empty();\n+        }\n         String usernameColonPassword =\n             new String(Base64.decodeBase64(auth.getAuth()), StandardCharsets.UTF_8);\n         String username = usernameColonPassword.substring(0, usernameColonPassword.indexOf(\":\"));\n"}
{"org": "googlecontainertools", "repo": "jib", "number": "2688", "fix_patch": "\n"}
{"org": "googlecontainertools", "repo": "jib", "number": "4035", "fix_patch": "--- a/jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticator.java\n+++ b/jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticator.java\n@@ -74,7 +74,7 @@\n       throws RegistryAuthenticationFailedException {\n     // If the authentication method starts with 'basic ' (case insensitive), no registry\n     // authentication is needed.\n-    if (authenticationMethod.matches(\"^(?i)(basic) .*\")) {\n+    if (authenticationMethod.matches(\"^(?i)(basic)( .*)?\")) {\n       return Optional.empty();\n     }\n"}
{"org": "googlecontainertools", "repo": "jib", "number": "4144", "fix_patch": "\n"}
