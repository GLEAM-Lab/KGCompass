{"org": "fasterxml", "repo": "jackson-core", "number": "1182", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n@@ -1704,7 +1704,46 @@\n      * @throws IOException for low-level read issues, or\n      *   {@link JsonParseException} for decoding problems\n      */\n+    /**\n+     * Enumeration for possible types of floating-point numbers, used by\n+     * {@link #getNumberTypeFP()}.\n+     */\n+    public enum NumberTypeFP {\n+        /**\n+         * Type used when floating-point number type is not known (typically for textual formats)\n+         */\n+        UNKNOWN,\n+        /**\n+         * 32-bit binary floating point (Java {@code float})\n+         */\n+        FLOAT,\n+        /**\n+         * 64-bit binary floating point (Java {@code double})\n+         */\n+        DOUBLE,\n+        /**\n+         * Arbitrary-precision decimal floating point (Java {@code BigDecimal})\n+         */\n+        BIG_DECIMAL\n+    }\n+\n     public abstract NumberType getNumberType() throws IOException;\n+\n+    /**\n+     * Method that can be used to get more precise information about underlying\n+     * storage format of floating-point numbers, as opposed to {@link #getNumberType()}\n+     * which is more loose in its typing (especially for textual formats).\n+     *<p>\n+     * Default implementation returns {@link NumberTypeFP#UNKNOWN} since most textual\n+     * formats do not distinguish between different floating-point types.\n+     * Binary formats should override to provide actual type information when possible.\n+     *\n+     * @return Type of floating-point number, if known; {@code UNKNOWN} if not\n+     *   (or if not a floating-point number)\n+     */\n+    public NumberTypeFP getNumberTypeFP() throws IOException {\n+        return NumberTypeFP.UNKNOWN;\n+    }\n \n     /**\n      * Numeric accessor that can be called when the current\n"}
