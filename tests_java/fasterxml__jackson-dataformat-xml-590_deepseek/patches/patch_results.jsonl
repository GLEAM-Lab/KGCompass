{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": "590", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n@@ -157,7 +157,120 @@\n         this(new XmlFactory(), module);\n     }\n \n-    public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\n+    public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module) {\n+        super(xmlFactory);\n+        _xmlModule = module;\n+        if (module != null) {\n+            module.setupModule(new Module.SetupContext() {\n+                @Override\n+                public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\n+                    _serializerFactory = _serializerFactory.withSerializerModifier(modifier);\n+                }\n+\n+                @Override\n+                public void addDeserializationModifiers(BeanDeserializerModifier modifier) {\n+                    _deserializationContext = _deserializationContext.withDeserializerModifiers(modifier);\n+                }\n+\n+                @Override\n+                public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\n+                    _deserializationContext = _deserializationContext.withAbstractTypeResolver(resolver);\n+                }\n+\n+                @Override\n+                public void addTypeModifier(TypeModifier modifier) {\n+                    _typeFactory = _typeFactory.withModifier(modifier);\n+                }\n+\n+                @Override\n+                public void addValueInstantiators(ValueInstantiators instantiators) {\n+                    _deserializationContext = _deserializationContext.withValueInstantiators(instantiators);\n+                }\n+\n+                @Override\n+                public void setClassIntrospector(ClassIntrospector ci) {\n+                    _deserializationConfig = _deserializationConfig.with(ci);\n+                    _serializationConfig = _serializationConfig.with(ci);\n+                }\n+\n+                @Override\n+                public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\n+                    _deserializationConfig = _deserializationConfig.withInsertedAnnotationIntrospector(ai);\n+                    _serializationConfig = _serializationConfig.withInsertedAnnotationIntrospector(ai);\n+                }\n+\n+                @Override\n+                public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\n+                    _deserializationConfig = _deserializationConfig.withAppendedAnnotationIntrospector(ai);\n+                    _serializationConfig = _serializationConfig.withAppendedAnnotationIntrospector(ai);\n+                }\n+\n+                @Override\n+                public void registerSubtypes(Class<?>... subtypes) {\n+                    _subtypeResolver.registerSubtypes(subtypes);\n+                }\n+\n+                @Override\n+                public void registerSubtypes(NamedType... subtypes) {\n+                    _subtypeResolver.registerSubtypes(subtypes);\n+                }\n+\n+                @Override\n+                public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {\n+                    _mixIns.add(target, mixinSource);\n+                }\n+\n+                @Override\n+                public void addDeserializers(Deserializers d) {\n+                    _deserializationContext = _deserializationContext.withAdditionalDeserializers(d);\n+                }\n+\n+                @Override\n+                public void addKeyDeserializers(KeyDeserializers d) {\n+                    _deserializationContext = _deserializationContext.withAdditionalKeyDeserializers(d);\n+                }\n+\n+                @Override\n+                public void addSerializers(Serializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalSerializers(s);\n+                }\n+\n+                @Override\n+                public void addKeySerializers(Serializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);\n+                }\n+\n+                @Override\n+                public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\n+                    _deserializationContext = _deserializationContext.withDeserializerModifiers(modifier);\n+                }\n+\n+                @Override\n+                public void addSerializerModifier(BeanSerializerModifier modifier) {\n+                    _serializerFactory = _serializerFactory.withSerializerModifier(modifier);\n+                }\n+\n+                @Override\n+                public void addValueSerializers(Serializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalSerializers(s);\n+                }\n+\n+                @Override\n+                public void addKeySerializers(KeySerializers s) {\n+                    _serializerFactory = _serializerFactory.withAdditionalKeySerializers(s);\n+                }\n+\n+                @Override\n+                public void setNamingStrategy(PropertyNamingStrategy naming) {\n+                    _serializationConfig = _serializationConfig.with(naming);\n+                    _deserializationConfig = _deserializationConfig.with(naming);\n+                }\n+            });\n+        }\n+        // Replace default introspector with XML one to avoid duplicate processing\n+        _deserializationConfig = _deserializationConfig.with(new JacksonXmlAnnotationIntrospector());\n+        _serializationConfig = _serializationConfig.with(new JacksonXmlAnnotationIntrospector());\n+    }\n     {\n         // Need to override serializer provider (due to root name handling);\n         // deserializer provider fine as is\n"}
