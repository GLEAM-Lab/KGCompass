{
  "related_entities": {
    "methods": [
      {
        "start_line": 406,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected JsonFactory(TSFBuilder<?,?> b, boolean bogus) {\n        _objectCodec = null;\n\n        _factoryFeatures = b._factoryFeatures;\n        _parserFeatures = b._streamReadFeatures;\n        _generatorFeatures = b._streamWriteFeatures;\n        _inputDecorator = b._inputDecorator;\n        _outputDecorator = b._outputDecorator;\n        _streamReadConstraints = b._streamReadConstraints == null ?\n                StreamReadConstraints.defaults() : b._streamReadConstraints;\n\n        // JSON-specific: need to assign even if not really used\n        _characterEscapes = null;\n        _rootValueSeparator = null;\n        _maximumNonEscapedChar = 0;\n        _quoteChar = DEFAULT_QUOTE_CHAR;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "JsonFactory",
        "documentation": "/**\n     * Constructor for subtypes; needed to work around the fact that before 3.0,\n     * this factory has cumbersome dual role as generic type as well as actual\n     * implementation for json.\n     *\n     * @param b Builder that contains settings to use\n     * @param bogus Argument only needed to separate constructor signature; ignored\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          }
        ],
        "similarity": 0.15911096744797748,
        "end_line": 422,
        "signature": "com.fasterxml.jackson.core.JsonFactory(TSFBuilder b, boolean bogus)"
      },
      {
        "start_line": 379,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonFactory(JsonFactoryBuilder b) {\n        _objectCodec = null;\n\n        // General\n        _factoryFeatures = b._factoryFeatures;\n        _parserFeatures = b._streamReadFeatures;\n        _generatorFeatures = b._streamWriteFeatures;\n        _inputDecorator = b._inputDecorator;\n        _outputDecorator = b._outputDecorator;\n        _streamReadConstraints = b._streamReadConstraints == null ?\n                StreamReadConstraints.defaults() : b._streamReadConstraints;\n\n        // JSON-specific\n        _characterEscapes = b._characterEscapes;\n        _rootValueSeparator = b._rootValueSeparator;\n        _maximumNonEscapedChar = b._maximumNonEscapedChar;\n        _quoteChar = b._quoteChar;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "JsonFactory",
        "documentation": "/**\n     * Constructor used by {@link JsonFactoryBuilder} for instantiation.\n     *\n     * @param b Builder that contains settings to use\n     *\n     * @since 2.10\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          }
        ],
        "similarity": 0.1433905317845636,
        "end_line": 396,
        "signature": "com.fasterxml.jackson.core.JsonFactory(JsonFactoryBuilder b)"
      },
      {
        "start_line": 381,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ByteQuadsCanonicalizer makeChildOrPlaceholder(int flags) {\n        if (JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags)) {\n            // inlined \"makeChild()\"\n            return new ByteQuadsCanonicalizer(this, _seed,\n                    _tableInfo.get(),\n                    JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags));\n        }\n        return new ByteQuadsCanonicalizer(_tableInfo.get());\n    }",
        "distance": 1.0,
        "title": null,
        "name": "makeChildOrPlaceholder",
        "documentation": "/**\n     * Method similar to {@link #makeChild} but one that only creates real\n     * instance of {@link com.fasterxml.jackson.core.JsonFactory.Feature#CANONICALIZE_FIELD_NAMES} is\n     * enabled: otherwise a \"bogus\" instance is created.\n     *\n     * @param flags Bit flags of active {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled.\n     *\n     * @return Actual canonicalizer instance that can be used by a parser if (and only if)\n     *    canonicalization is enabled; otherwise a non-null \"placeholder\" instance.\n     *\n     * @since 2.13\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "makeChildOrPlaceholder"
          }
        ],
        "similarity": 0.14338358101078974,
        "end_line": 390,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChildOrPlaceholder(int flags): ByteQuadsCanonicalizer"
      },
      {
        "start_line": 1742,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected JsonParser _createParser(InputStream in, IOContext ctxt) throws IOException {\n        try {\n            return new ByteSourceJsonBootstrapper(ctxt, in).constructParser(_parserFeatures,\n                    _objectCodec, _byteSymbolCanonicalizer, _rootCharSymbols, _factoryFeatures);\n        } catch (IOException | RuntimeException e) {\n            // 10-Jun-2022, tatu: For [core#763] may need to close InputStream here\n            if (ctxt.isResourceManaged()) {\n                try {\n                    in.close();\n                } catch (Exception e2) {\n                    e.addSuppressed(e2);\n                }\n            }\n            throw e;\n        }\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_createParser",
        "documentation": "/**\n     * Overridable factory method that actually instantiates desired parser\n     * given {@link InputStream} and context object.\n     *<p>\n     * This method is specifically designed to remain\n     * compatible between minor versions so that sub-classes can count\n     * on it being called as expected. That is, it is part of official\n     * interface from sub-class perspective, although not a public\n     * method available to users of factory implementations.\n     *\n     * @param in InputStream to use for reading content to parse\n     * @param ctxt I/O context to use for parsing\n     *\n     * @throws IOException if parser initialization fails due to I/O (read) problem\n     *\n     * @return Parser constructed\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_createParser"
          }
        ],
        "similarity": 0.13418403757642847,
        "end_line": 1757,
        "signature": "com.fasterxml.jackson.core.JsonFactory._createParser(InputStream in, IOContext ctxt): JsonParser"
      },
      {
        "start_line": 1216,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createParser(String content) throws IOException, JsonParseException {\n        final int strLen = content.length();\n        // Actually, let's use this for medium-sized content, up to 64kB chunk (32kb char)\n        if ((_inputDecorator != null) || (strLen > 0x8000) || !canUseCharArrays()) {\n            // easier to just wrap in a Reader than extend InputDecorator; or, if content\n            // is too long for us to copy it over\n            return createParser(new StringReader(content));\n        }\n        IOContext ctxt = _createContext(_createContentReference(content), true);\n        char[] buf = ctxt.allocTokenBuffer(strLen);\n        content.getChars(0, strLen, buf, 0);\n        return _createParser(buf, 0, strLen, ctxt, true);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createParser",
        "documentation": "/**\n     * Method for constructing parser for parsing\n     * contents of given String.\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createParser"
          }
        ],
        "similarity": 0.12845532931995973,
        "end_line": 1228,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createParser(String content): JsonParser"
      },
      {
        "start_line": 1915,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected JsonGenerator _createUTF8Generator(OutputStream out, IOContext ctxt) throws IOException {\n        UTF8JsonGenerator gen = new UTF8JsonGenerator(ctxt,\n                _generatorFeatures, _objectCodec, out, _quoteChar);\n        if (_maximumNonEscapedChar > 0) {\n            gen.setHighestNonEscapedChar(_maximumNonEscapedChar);\n        }\n        if (_characterEscapes != null) {\n            gen.setCharacterEscapes(_characterEscapes);\n        }\n        SerializableString rootSep = _rootValueSeparator;\n        if (rootSep != DEFAULT_ROOT_VALUE_SEPARATOR) {\n            gen.setRootValueSeparator(rootSep);\n        }\n        return gen;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_createUTF8Generator",
        "documentation": "/**\n     * Overridable factory method that actually instantiates generator for\n     * given {@link OutputStream} and context object, using UTF-8 encoding.\n     *<p>\n     * This method is specifically designed to remain\n     * compatible between minor versions so that sub-classes can count\n     * on it being called as expected. That is, it is part of official\n     * interface from sub-class perspective, although not a public\n     * method available to users of factory implementations.\n     *\n     * @param out OutputStream underlying writer to write generated content to\n     * @param ctxt I/O context to use\n     *\n     * @return This factory instance (to allow call chaining)\n     *\n     * @throws IOException if parser initialization fails due to I/O (write) problem\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_createUTF8Generator"
          }
        ],
        "similarity": 0.11853506005311537,
        "end_line": 1929,
        "signature": "com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(OutputStream out, IOContext ctxt): JsonGenerator"
      },
      {
        "start_line": 186,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,",
        "distance": 1.0,
        "title": null,
        "name": "UTF8StreamJsonParser",
        "documentation": "/**\n     * Constructor called when caller wants to provide input buffer directly\n     * (or needs to, in case of bootstrapping having read some of contents)\n     * and it may or may not be recyclable use standard recycle context.\n     *\n     * @param ctxt I/O context to use\n     * @param features Standard stream read features enabled\n     * @param in InputStream used for reading actual content, if any; {@code null} if none\n     * @param codec {@code ObjectCodec} to delegate object deserialization to\n     * @param sym Name canonicalizer to use\n     * @param inputBuffer Input buffer to read initial content from (before Reader)\n     * @param start Pointer in {@code inputBuffer} that has the first content character to decode\n     * @param end Pointer past the last content character in {@code inputBuffer}\n     * @param bytesPreProcessed Number of bytes that have been consumed already (by bootstrapping)\n     * @param bufferRecyclable Whether {@code inputBuffer} passed is managed by Jackson core\n     *    (and thereby needs recycling)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "UTF8StreamJsonParser"
          }
        ],
        "similarity": 0.11371512252111765,
        "end_line": 186,
        "signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, int bytesPreProcessed, boolean bufferRecyclable)"
      },
      {
        "start_line": 160,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,",
        "distance": 1.0,
        "title": null,
        "name": "UTF8StreamJsonParser",
        "documentation": "/**\n     * Constructor called when caller wants to provide input buffer directly\n     * (or needs to, in case of bootstrapping having read some of contents)\n     * and it may or may not be recyclable use standard recycle context.\n     *\n     * @param ctxt I/O context to use\n     * @param features Standard stream read features enabled\n     * @param in InputStream used for reading actual content, if any; {@code null} if none\n     * @param codec {@code ObjectCodec} to delegate object deserialization to\n     * @param sym Name canonicalizer to use\n     * @param inputBuffer Input buffer to read initial content from (before Reader)\n     * @param start Pointer in {@code inputBuffer} that has the first content character to decode\n     * @param end Pointer past the last content character in {@code inputBuffer}\n     * @param bufferRecyclable Whether {@code inputBuffer} passed is managed by Jackson core\n     *    (and thereby needs recycling)\n     *\n     * @deprecated Since 2.10\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "UTF8StreamJsonParser"
          }
        ],
        "similarity": 0.11332596301969536,
        "end_line": 160,
        "signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, boolean bufferRecyclable)"
      },
      {
        "start_line": 2143,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final boolean _isJSONFactory() {\n        // NOTE: since we only really care about whether this is standard JSON-backed factory,\n        // or its sub-class / delegated to one, no need to check for equality, identity is enough\n        return getFormatName() == FORMAT_NAME_JSON;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_isJSONFactory",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_isJSONFactory"
          }
        ],
        "similarity": 0.1121175324007272,
        "end_line": 2147,
        "signature": "com.fasterxml.jackson.core.JsonFactory._isJSONFactory(): boolean"
      },
      {
        "start_line": 1247,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createParser(char[] content, int offset, int len) throws IOException {\n        _checkRangeBoundsForCharArray(content, offset, len);\n        if (_inputDecorator != null) { // easier to just wrap in a Reader than extend InputDecorator\n            return createParser(new CharArrayReader(content, offset, len));\n        }\n        return _createParser(content, offset, len,\n                _createContext(_createContentReference(content, offset, len), true),\n                // important: buffer is NOT recyclable, as it's from caller\n                false);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createParser",
        "documentation": "/**\n     * Method for constructing parser for parsing contents of given char array.\n     *\n     * @since 2.4\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createParser"
          }
        ],
        "similarity": 0.11113173995068484,
        "end_line": 1256,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createParser(char[] content, int offset, int len): JsonParser"
      },
      {
        "start_line": 893,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public String addName(String name, int q1, int q2) throws StreamConstraintsException {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n\n        // 20-Mar-2021, tatu: For some reason, pre-2.13 there was logic\n        //    to support \"only one quad\" case. Not sure why, does not make sense;\n        //    removed from 2.13.0.\n//        int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);\n        final int hash = calcHash(q1, q2);\n        final int offset = _findOffsetForAdd(hash);\n        _hashArea[offset] = q1;\n        _hashArea[offset+1] = q2;\n        _hashArea[offset+3] = 2;\n        _names[offset >> 2] = name;\n        ++_count;\n        return name;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "addName",
        "documentation": "/**\n     * @param name\n     * @param q1\n     * @param q2\n     * @return name (possibly interned)\n     * @throws StreamConstraintsException if the constraint exceptions\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "addName"
          }
        ],
        "similarity": 0.110946352889408,
        "end_line": 911,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String name, int q1, int q2): String"
      },
      {
        "start_line": 1196,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createParser(byte[] data, int offset, int len) throws IOException, JsonParseException {\n        _checkRangeBoundsForByteArray(data, offset, len);\n        IOContext ctxt = _createContext(_createContentReference(data, offset, len), true);\n        // [JACKSON-512]: allow wrapping with InputDecorator\n        if (_inputDecorator != null) {\n            InputStream in = _inputDecorator.decorate(ctxt, data, offset, len);\n            if (in != null) {\n                return _createParser(in, ctxt);\n            }\n        }\n        return _createParser(data, offset, len, ctxt);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createParser",
        "documentation": "/**\n     * Method for constructing parser for parsing\n     * the contents of given byte array.\n     *\n     * @param data Buffer that contains data to parse\n     * @param offset Offset of the first data byte within buffer\n     * @param len Length of contents to parse within buffer\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createParser"
          }
        ],
        "similarity": 0.11052422740914905,
        "end_line": 1207,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createParser(byte[] data, int offset, int len): JsonParser"
      },
      {
        "start_line": 1174,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createParser(byte[] data) throws IOException, JsonParseException {\n        IOContext ctxt = _createContext(_createContentReference(data), true);\n        if (_inputDecorator != null) {\n            InputStream in = _inputDecorator.decorate(ctxt, data, 0, data.length);\n            if (in != null) {\n                return _createParser(in, ctxt);\n            }\n        }\n        return _createParser(data, 0, data.length, ctxt);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createParser",
        "documentation": "/**\n     * Method for constructing parser for parsing\n     * the contents of given byte array.\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createParser"
          }
        ],
        "similarity": 0.10855463985111552,
        "end_line": 1183,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createParser(byte[] data): JsonParser"
      },
      {
        "start_line": 336,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonFactory() { this((ObjectCodec) null); }",
        "distance": 1.0,
        "title": null,
        "name": "JsonFactory",
        "documentation": "/**\n     * Default constructor used to create factory instances.\n     * Creation of a factory instance is a light-weight operation,\n     * but it is still a good idea to reuse limited number of\n     * factory instances (and quite often just a single instance):\n     * factories are used as context for storing some reused\n     * processing objects (such as symbol tables parsers use)\n     * and this reuse only works within context of a single\n     * factory instance.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          }
        ],
        "similarity": 0.10653966142849686,
        "end_line": 336,
        "signature": "com.fasterxml.jackson.core.JsonFactory()"
      },
      {
        "start_line": 140,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,",
        "distance": 1.0,
        "title": null,
        "name": "ReaderBasedJsonParser",
        "documentation": "/**\n     * Constructor called when caller wants to provide input buffer directly\n     * (or needs to, in case of bootstrapping having read some of contents)\n     * and it may or may not be recyclable use standard recycle context.\n     *\n     * @param ctxt I/O context to use\n     * @param features Standard stream read features enabled\n     * @param r Reader used for reading actual content, if any; {@code null} if none\n     * @param codec {@code ObjectCodec} to delegate object deserialization to\n     * @param st Name canonicalizer to use\n     * @param inputBuffer Input buffer to read initial content from (before Reader)\n     * @param start Pointer in {@code inputBuffer} that has the first content character to decode\n     * @param end Pointer past the last content character in {@code inputBuffer}\n     * @param bufferRecyclable Whether {@code inputBuffer} passed is managed by Jackson core\n     *    (and thereby needs recycling)\n     *\n     * @since 2.4\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          }
        ],
        "similarity": 0.10020342781966006,
        "end_line": 140,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st, char[] inputBuffer, int start, int end, boolean bufferRecyclable)"
      },
      {
        "start_line": 499,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected Object readResolve() {\n        return new JsonFactory(this, _objectCodec);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "readResolve",
        "documentation": "/**\n     * Method that we need to override to actually make restoration go\n     * through constructors etc: needed to allow JDK serializability of\n     * factory instances.\n     *<p>\n     * Note: must be overridden by sub-classes as well.\n     *\n     * @return Newly constructed instance\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "readResolve"
          }
        ],
        "similarity": 0.10018150648014298,
        "end_line": 501,
        "signature": "com.fasterxml.jackson.core.JsonFactory.readResolve(): Object"
      },
      {
        "start_line": 225,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected void _closeInput() throws IOException {\n        /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n         *   on the underlying Reader, unless we \"own\" it, or auto-closing\n         *   feature is enabled.\n         *   One downside is that when using our optimized\n         *   Reader (granted, we only do that for UTF-32...) this\n         *   means that buffer recycling won't work correctly.\n         */\n        if (_reader != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE)) {\n                _reader.close();\n            }\n            _reader = null;\n        }\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_closeInput",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          },
          {
            "start_node": "ReaderBasedJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_closeInput"
          }
        ],
        "similarity": 0.10016652204003762,
        "end_line": 239,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._closeInput(): void"
      },
      {
        "start_line": 2137,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final void _requireJSONFactory(String msg) {\n        if (!_isJSONFactory()) {\n            throw new UnsupportedOperationException(String.format(msg, getFormatName()));\n        }\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_requireJSONFactory",
        "documentation": "/**\n     * Helper method called to work around the problem of this class both defining\n     * general API for constructing parsers+generators AND implementing the API\n     * for JSON handling. Problem here is that when adding new functionality\n     * via factory methods, it is not possible to leave these methods abstract\n     * (because we are implementing them for JSON); but there is risk that\n     * sub-classes do not override them all (plus older version can not implement).\n     * So a work-around is to add a check to ensure that factory is still one\n     * used for JSON; and if not, make base implementation of a factory method fail.\n     *\n     * @param msg Message template to use for reporting problem (if necessary)\n     *\n     * @since 2.9\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_requireJSONFactory"
          }
        ],
        "similarity": 0.09984875654566008,
        "end_line": 2141,
        "signature": "com.fasterxml.jackson.core.JsonFactory._requireJSONFactory(String msg): void"
      },
      {
        "start_line": 338,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonFactory(ObjectCodec oc) {\n        _objectCodec = oc;\n        _quoteChar = DEFAULT_QUOTE_CHAR;\n        _streamReadConstraints = StreamReadConstraints.defaults();\n    }",
        "distance": 1.0,
        "title": null,
        "name": "JsonFactory",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          }
        ],
        "similarity": 0.09893976842157243,
        "end_line": 342,
        "signature": "com.fasterxml.jackson.core.JsonFactory(ObjectCodec oc)"
      },
      {
        "start_line": 352,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected JsonFactory(JsonFactory src, ObjectCodec codec)",
        "distance": 1.0,
        "title": null,
        "name": "JsonFactory",
        "documentation": "/**\n     * Constructor used when copy()ing a factory instance.\n     *\n     * @param src Original factory to copy settings from\n     * @param codec Databinding-level codec to use, if any\n     *\n     * @since 2.2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          }
        ],
        "similarity": 0.09633619790145677,
        "end_line": 352,
        "signature": "com.fasterxml.jackson.core.JsonFactory(JsonFactory src, ObjectCodec codec)"
      },
      {
        "start_line": 362,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ByteQuadsCanonicalizer makeChild(int flags) {\n        return new ByteQuadsCanonicalizer(this, _seed,\n                _tableInfo.get(),\n                JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags));\n    }",
        "distance": 1.5,
        "title": null,
        "name": "makeChild",
        "documentation": "/**\n     * Factory method used to create actual symbol table instance to\n     * use for parsing.\n     *\n     * @param flags Bit flags of active {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled.\n     *\n     * @return Actual canonicalizer instance that can be used by a parser\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "isCanonicalizing"
          },
          {
            "start_node": "isCanonicalizing",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "makeChild"
          }
        ],
        "similarity": 0.09436974826166303,
        "end_line": 367,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChild(int flags): ByteQuadsCanonicalizer"
      },
      {
        "start_line": 1086,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createParser(File f) throws IOException, JsonParseException {\n        // true, since we create InputStream from File\n        IOContext ctxt = _createContext(_createContentReference(f), true);\n        InputStream in = _fileInputStream(f);\n        return _createParser(_decorate(in, ctxt), ctxt);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createParser",
        "documentation": "/**\n     * Method for constructing JSON parser instance to parse\n     * contents of specified file.\n     *\n     *<p>\n     * Encoding is auto-detected from contents according to JSON\n     * specification recommended mechanism. Json specification\n     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,\n     * so auto-detection implemented only for this charsets.\n     * For other charsets use {@link #createParser(java.io.Reader)}.\n     *\n     *<p>\n     * Underlying input stream (needed for reading contents)\n     * will be <b>owned</b> (and managed, i.e. closed as need be) by\n     * the parser, since caller has no access to it.\n     *\n     * @param f File that contains JSON content to parse\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createParser"
          }
        ],
        "similarity": 0.0939929869962438,
        "end_line": 1091,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createParser(File f): JsonParser"
      },
      {
        "start_line": 921,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public String addName(String name, int q1, int q2, int q3) throws StreamConstraintsException {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int offset = _findOffsetForAdd(calcHash(q1, q2, q3));\n        _hashArea[offset] = q1;\n        _hashArea[offset+1] = q2;\n        _hashArea[offset+2] = q3;\n        _hashArea[offset+3] = 3;\n        _names[offset >> 2] = name;\n        ++_count;\n        return name;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "addName",
        "documentation": "/**\n     * @param name\n     * @param q1\n     * @param q2\n     * @param q3\n     * @return name (possibly interned)\n     * @throws StreamConstraintsException if the constraint exceptions\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "addName"
          }
        ],
        "similarity": 0.09372429860384743,
        "end_line": 934,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String name, int q1, int q2, int q3): String"
      },
      {
        "start_line": 2766,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final void _matchNull() throws IOException {\n        int ptr = _inputPtr;\n        if ((ptr + 3) < _inputEnd) {\n            final char[] b = _inputBuffer;\n            if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l') {\n                char c = b[++ptr];\n                if (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n                    _inputPtr = ptr;\n                    return;\n                }\n            }\n        }",
        "distance": 1.25,
        "title": null,
        "name": "_matchNull",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          },
          {
            "start_node": "ReaderBasedJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_matchNull"
          }
        ],
        "similarity": 0.09189673995011298,
        "end_line": 2777,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchNull(): void"
      },
      {
        "start_line": 1932,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected String _handleOddName(int i) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "_handleOddName",
        "documentation": "/**\n     * Method called when we see non-white space character other\n     * than double quote, when expecting a field name.\n     * In standard mode will just throw an expection; but\n     * in non-standard modes may be able to parse name.\n     *\n     * @param i First undecoded character of possible \"odd name\" to decode\n     *\n     * @return Name decoded, if allowed and successful\n     *\n     * @throws IOException for low-level read issues, or\n     *   {@link JsonParseException} for decoding problems (invalid name)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "UTF8StreamJsonParser"
          },
          {
            "start_node": "UTF8StreamJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_handleOddName"
          }
        ],
        "similarity": 0.09172708281172809,
        "end_line": 1932,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName(int i): String"
      },
      {
        "start_line": 1112,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createParser(URL url) throws IOException, JsonParseException {\n        // true, since we create InputStream from URL\n        IOContext ctxt = _createContext(_createContentReference(url), true);\n        InputStream in = _optimizedStreamFromURL(url);\n        return _createParser(_decorate(in, ctxt), ctxt);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createParser",
        "documentation": "/**\n     * Method for constructing JSON parser instance to parse\n     * contents of resource reference by given URL.\n     *<p>\n     * Encoding is auto-detected from contents according to JSON\n     * specification recommended mechanism. Json specification\n     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,\n     * so auto-detection implemented only for this charsets.\n     * For other charsets use {@link #createParser(java.io.Reader)}.\n     *<p>\n     * Underlying input stream (needed for reading contents)\n     * will be <b>owned</b> (and managed, i.e. closed as need be) by\n     * the parser, since caller has no access to it.\n     *\n     * @param url URL pointing to resource that contains JSON content to parse\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createParser"
          }
        ],
        "similarity": 0.09145846074034446,
        "end_line": 1117,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createParser(URL url): JsonParser"
      },
      {
        "start_line": 2135,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected String _handleOddName(int ch) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "_handleOddName",
        "documentation": "/**\n     * Method called when we see non-white space character other\n     * than double quote, when expecting a field name.\n     * In standard mode will just throw an exception; but\n     * in non-standard modes may be able to parse name.\n     *\n     * @param ch First undecoded character of possible \"odd name\" to decode\n     *\n     * @return Name decoded, if allowed and successful\n     *\n     * @throws IOException for low-level read issues, or\n     *   {@link JsonParseException} for decoding problems (invalid name)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "UTF8StreamJsonParser"
          },
          {
            "start_node": "UTF8StreamJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_handleOddName"
          }
        ],
        "similarity": 0.09136774818842103,
        "end_line": 2135,
        "signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName(int ch): String"
      },
      {
        "start_line": 432,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public TSFBuilder<?,?> rebuild() {\n        // 13-Jun-2018, tatu: Verify sub-classing to prevent strange bugs in format impls\n        _requireJSONFactory(\"Factory implementation for format (%s) MUST override `rebuild()` method\");\n        return new JsonFactoryBuilder(this);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "rebuild",
        "documentation": "/**\n     * Method that allows construction of differently configured factory, starting\n     * with settings of this factory.\n     *\n     * @return Builder instance to use\n     *\n     * @since 2.10\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "rebuild"
          }
        ],
        "similarity": 0.0908724169954899,
        "end_line": 436,
        "signature": "com.fasterxml.jackson.core.JsonFactory.rebuild(): TSFBuilder"
      },
      {
        "start_line": 1553,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createJsonParser(InputStream in) throws IOException, JsonParseException {\n        return createParser(in);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createJsonParser",
        "documentation": "/**\n     * Method for constructing JSON parser instance to parse\n     * the contents accessed via specified input stream.\n     *<p>\n     * The input stream will <b>not be owned</b> by\n     * the parser, it will still be managed (i.e. closed if\n     * end-of-stream is reacher, or parser close method called)\n     * if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}\n     * is enabled.\n     *<p>\n     *\n     * Note: no encoding argument is taken since it can always be\n     * auto-detected as suggested by JSON RFC. Json specification\n     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,\n     * so auto-detection implemented only for this charsets.\n     * For other charsets use {@link #createParser(java.io.Reader)}.\n     *\n     * @param in InputStream to use for reading JSON content to parse\n     *\n     * @return Parser constructed\n     *\n     * @throws IOException if parser initialization fails due to I/O (read) problem\n     * @throws JsonParseException if parser initialization fails due to content decoding problem\n     *\n     * @deprecated Since 2.2, use {@link #createParser(InputStream)} instead.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createJsonParser"
          }
        ],
        "similarity": 0.09063374294338453,
        "end_line": 1555,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createJsonParser(InputStream in): JsonParser"
      },
      {
        "start_line": 528,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected boolean ensureLoaded(int minimum) throws IOException {\n        /* Let's assume here buffer has enough room -- this will always\n         * be true for the limited used this method gets\n         */\n        int gotten = (_inputEnd - _inputPtr);\n        while (gotten < minimum) {\n            int count;\n\n            if (_in == null) { // block source\n                count = -1;\n            } else {\n                count = _in.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);\n            }\n            if (count < 1) {\n                return false;\n            }\n            _inputEnd += count;\n            gotten += count;\n        }\n        return true;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "ensureLoaded",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ByteSourceJsonBootstrapper"
          },
          {
            "start_node": "ByteSourceJsonBootstrapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "ensureLoaded"
          }
        ],
        "similarity": 0.09062051530773645,
        "end_line": 548,
        "signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.ensureLoaded(int minimum): boolean"
      },
      {
        "start_line": 873,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public String addName(String name, int q1) throws StreamConstraintsException {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int offset = _findOffsetForAdd(calcHash(q1));\n        _hashArea[offset] = q1;\n        _hashArea[offset+3] = 1;\n        _names[offset >> 2] = name;\n        ++_count;\n        return name;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "addName",
        "documentation": "/**\n     * @param name\n     * @param q1\n     * @return name (possibly interned)\n     * @throws StreamConstraintsException if the constraint exceptions\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "addName"
          }
        ],
        "similarity": 0.09032866619090639,
        "end_line": 884,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String name, int q1): String"
      },
      {
        "start_line": 1141,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser createParser(InputStream in) throws IOException, JsonParseException {\n        IOContext ctxt = _createContext(_createContentReference(in), false);\n        return _createParser(_decorate(in, ctxt), ctxt);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "createParser",
        "documentation": "/**\n     * Method for constructing JSON parser instance to parse\n     * the contents accessed via specified input stream.\n     *<p>\n     * The input stream will <b>not be owned</b> by\n     * the parser, it will still be managed (i.e. closed if\n     * end-of-stream is reacher, or parser close method called)\n     * if (and only if) {@link com.fasterxml.jackson.core.StreamReadFeature#AUTO_CLOSE_SOURCE}\n     * is enabled.\n     *<p>\n     *\n     * Note: no encoding argument is taken since it can always be\n     * auto-detected as suggested by JSON RFC. Json specification\n     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,\n     * so auto-detection implemented only for this charsets.\n     * For other charsets use {@link #createParser(java.io.Reader)}.\n     *\n     * @param in InputStream to use for reading JSON content to parse\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createParser"
          }
        ],
        "similarity": 0.09028801314605515,
        "end_line": 1144,
        "signature": "com.fasterxml.jackson.core.JsonFactory.createParser(InputStream in): JsonParser"
      },
      {
        "start_line": 169,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,",
        "distance": 1.0,
        "title": null,
        "name": "ReaderBasedJsonParser",
        "documentation": "/**\n     * Constructor called when input comes as a {@link java.io.Reader}, and buffer allocation\n     * can be done using default mechanism.\n     *\n     * @param ctxt I/O context to use\n     * @param features Standard stream read features enabled\n     * @param r Reader used for reading actual content, if any; {@code null} if none\n     * @param codec {@code ObjectCodec} to delegate object deserialization to\n     * @param st Name canonicalizer to use\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          }
        ],
        "similarity": 0.08970605726882035,
        "end_line": 169,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st)"
      },
      {
        "start_line": 2734,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final void _matchTrue() throws IOException {\n        int ptr = _inputPtr;\n        if ((ptr + 3) < _inputEnd) {\n            final char[] b = _inputBuffer;\n            if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\n                char c = b[++ptr];\n                if (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n                    _inputPtr = ptr;\n                    return;\n                }\n            }\n        }",
        "distance": 1.25,
        "title": null,
        "name": "_matchTrue",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          },
          {
            "start_node": "ReaderBasedJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_matchTrue"
          }
        ],
        "similarity": 0.08925839459510794,
        "end_line": 2745,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchTrue(): void"
      },
      {
        "start_line": 577,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public boolean canParseAsync() {\n        // 31-May-2017, tatu: Jackson 2.9 does support async parsing for JSON,\n        //   but not all other formats, so need to do this:\n        return _isJSONFactory();\n    }",
        "distance": 1.25,
        "title": null,
        "name": "canParseAsync",
        "documentation": "/**\n     * Introspection method that can be used to check whether this\n     * factory can create non-blocking parsers: parsers that do not\n     * use blocking I/O abstractions but instead use a\n     * {@link com.fasterxml.jackson.core.async.NonBlockingInputFeeder}.\n     *\n     * @return Whether this factory supports non-blocking (\"async\") parsing or\n     *    not (and consequently whether {@code createNonBlockingXxx()} method(s) work)\n     *\n     * @since 2.9\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "canParseAsync"
          }
        ],
        "similarity": 0.08894200674193199,
        "end_line": 581,
        "signature": "com.fasterxml.jackson.core.JsonFactory.canParseAsync(): boolean"
      },
      {
        "start_line": 339,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public static ByteQuadsCanonicalizer createRoot() {\n        // Need to use a variable seed, to thwart hash-collision based attacks.\n        // 14-Feb-2017, tatu: Does this actually help?\n        long now = System.currentTimeMillis();\n        // ensure it's not 0; and might as well require to be odd so:\n        int seed = (((int) now) + ((int) (now >>> 32))) | 1;\n        return createRoot(seed);\n    }",
        "distance": 1.5,
        "title": null,
        "name": "createRoot",
        "documentation": "/**\n     * Factory method to call to create a symbol table instance with a\n     * randomized seed value.\n     *\n     * @return Root instance to use for constructing new child instances\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "isCanonicalizing"
          },
          {
            "start_node": "isCanonicalizing",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createRoot"
          }
        ],
        "similarity": 0.08870907400603663,
        "end_line": 346,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(): ByteQuadsCanonicalizer"
      },
      {
        "start_line": 665,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public boolean requiresCustomCodec() {\n        return false;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "requiresCustomCodec",
        "documentation": "/**\n     * Method that can be called to determine if a custom\n     * {@link ObjectCodec} is needed for binding data parsed\n     * using {@link JsonParser} constructed by this factory\n     * (which typically also implies the same for serialization\n     * with {@link JsonGenerator}).\n     *\n     * @return True if custom codec is needed with parsers and\n     *   generators created by this factory; false if a general\n     *   {@link ObjectCodec} is enough\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "requiresCustomCodec"
          }
        ],
        "similarity": 0.08704059459995145,
        "end_line": 667,
        "signature": "com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec(): boolean"
      },
      {
        "start_line": 96,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ByteSourceJsonBootstrapper(IOContext ctxt, byte[] inputBuffer, int inputStart, int inputLen) {\n        _context = ctxt;\n        _in = null;\n        _inputBuffer = inputBuffer;\n        _inputPtr = inputStart;\n        _inputEnd = (inputStart + inputLen);\n        // Need to offset this for correct location info\n//        _inputProcessed = -inputStart;\n        _bufferRecyclable = false;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "ByteSourceJsonBootstrapper",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ByteSourceJsonBootstrapper"
          }
        ],
        "similarity": 0.08698902024989696,
        "end_line": 105,
        "signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(IOContext ctxt, byte[] inputBuffer, int inputStart, int inputLen)"
      },
      {
        "start_line": 1826,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "_createParser",
        "documentation": "/**\n     * Overridable factory method that actually instantiates parser\n     * using given {@link Reader} object for reading content\n     * passed as raw byte array.\n     *<p>\n     * This method is specifically designed to remain\n     * compatible between minor versions so that sub-classes can count\n     * on it being called as expected. That is, it is part of official\n     * interface from sub-class perspective, although not a public\n     * method available to users of factory implementations.\n     *\n     * @param data Buffer that contains content to parse\n     * @param offset Offset to the first character of data to parse\n     * @param len Number of characters within buffer to parse\n     * @param ctxt I/O context to use for parsing\n     *\n     * @return Actual parser to use\n     *\n     * @throws IOException if parser initialization fails due to I/O (read) problem\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_createParser"
          }
        ],
        "similarity": 0.08669633863030626,
        "end_line": 1826,
        "signature": "com.fasterxml.jackson.core.JsonFactory._createParser(byte[] data, int offset, int len, IOContext ctxt): JsonParser"
      },
      {
        "start_line": 1844,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected JsonParser _createParser(DataInput input, IOContext ctxt) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "_createParser",
        "documentation": "/**\n     * Optional factory method, expected to be overridden\n     *\n     * @param input DataInput to use for reading content to parse\n     * @param ctxt I/O context to use for parsing\n     *\n     * @return Actual parser to use\n     *\n     * @throws IOException if parser initialization fails due to I/O (read) problem\n     *\n     * @since 2.8\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_createParser"
          }
        ],
        "similarity": 0.08654104693163482,
        "end_line": 1844,
        "signature": "com.fasterxml.jackson.core.JsonFactory._createParser(DataInput input, IOContext ctxt): JsonParser"
      },
      {
        "start_line": 2750,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final void _matchFalse() throws IOException {\n        int ptr = _inputPtr;\n        if ((ptr + 4) < _inputEnd) {\n            final char[] b = _inputBuffer;\n            if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e') {\n                char c = b[++ptr];\n                if (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n                    _inputPtr = ptr;\n                    return;\n                }\n            }\n        }",
        "distance": 1.25,
        "title": null,
        "name": "_matchFalse",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          },
          {
            "start_node": "ReaderBasedJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_matchFalse"
          }
        ],
        "similarity": 0.0855827429847604,
        "end_line": 2761,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchFalse(): void"
      },
      {
        "start_line": 1778,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected JsonParser _createParser(Reader r, IOContext ctxt) throws IOException {\n        return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,\n                _rootCharSymbols.makeChild(_factoryFeatures));\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_createParser",
        "documentation": "/**\n     * Overridable factory method that actually instantiates parser\n     * using given {@link Reader} object for reading content.\n     *<p>\n     * This method is specifically designed to remain\n     * compatible between minor versions so that sub-classes can count\n     * on it being called as expected. That is, it is part of official\n     * interface from sub-class perspective, although not a public\n     * method available to users of factory implementations.\n     *\n     * @param r Reader to use for reading content to parse\n     * @param ctxt I/O context to use for parsing\n     *\n     * @return Actual parser to use\n     *\n     * @throws IOException if parser initialization fails due to I/O (read) problem\n     *\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_createParser"
          }
        ],
        "similarity": 0.08499429692555055,
        "end_line": 1781,
        "signature": "com.fasterxml.jackson.core.JsonFactory._createParser(Reader r, IOContext ctxt): JsonParser"
      },
      {
        "start_line": 255,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParserBase.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public NonBlockingJsonParserBase(IOContext ctxt, int parserFeatures,",
        "distance": 1.0,
        "title": null,
        "name": "NonBlockingJsonParserBase",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "NonBlockingJsonParserBase"
          }
        ],
        "similarity": 0.08485407556557113,
        "end_line": 255,
        "signature": "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym)"
      },
      {
        "start_line": 2067,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected IOContext _createNonBlockingContext(Object srcRef) {\n        // [jackson-core#479]: allow recycling for non-blocking parser again\n        // now that access is thread-safe\n        return new IOContext(_streamReadConstraints, _getBufferRecycler(),\n                _createContentReference(srcRef),\n                false);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_createNonBlockingContext",
        "documentation": "/**\n     * Overridable factory method that actually instantiates desired\n     * context object for async (non-blocking) parsing\n     *\n     * @param srcRef Source reference to use for diagnostics, exception messages\n     *\n     * @return I/O context created\n     *\n     * @since 2.9.7\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_createNonBlockingContext"
          }
        ],
        "similarity": 0.08378852415378893,
        "end_line": 2073,
        "signature": "com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext(Object srcRef): IOContext"
      },
      {
        "start_line": 122,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonEncoding detectEncoding() throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "detectEncoding",
        "documentation": "/**\n     * Method that should be called after constructing an instace.\n     * It will figure out encoding that content uses, to allow\n     * for instantiating a proper scanner object.\n     *\n     * @return {@link JsonEncoding} detected, if any; {@code JsonEncoding.UTF8} otherwise\n     *\n     * @throws IOException If read from underlying input source fails\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ByteSourceJsonBootstrapper"
          },
          {
            "start_node": "ByteSourceJsonBootstrapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "detectEncoding"
          }
        ],
        "similarity": 0.08332888120757308,
        "end_line": 122,
        "signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.detectEncoding(): JsonEncoding"
      },
      {
        "start_line": 1325,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private void nukeSymbols(boolean fill) {\n        _count = 0;\n        // reset spill-over to empty (starting at 7/8 of hash area)\n        _spilloverEnd = _spilloverStart();\n        // and long name area to empty, starting immediately after hash area\n        _longNameOffset = _hashSize << 3;\n        if (fill) {\n            Arrays.fill(_hashArea, 0);\n            Arrays.fill(_names, null);\n        }\n    }",
        "distance": 1.5,
        "title": null,
        "name": "nukeSymbols",
        "documentation": "/**\n     * Helper method called to empty all shared symbols, but to leave\n     * arrays allocated\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "isCanonicalizing"
          },
          {
            "start_node": "isCanonicalizing",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "nukeSymbols"
          }
        ],
        "similarity": 0.08327925799043209,
        "end_line": 1335,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.nukeSymbols(boolean fill): void"
      },
      {
        "start_line": 669,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException {\n        return ByteSourceJsonBootstrapper.hasJSONFormat(acc);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "hasJSONFormat",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "JsonFactory"
          },
          {
            "start_node": "JsonFactory",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "hasJSONFormat"
          }
        ],
        "similarity": 0.08210148914328086,
        "end_line": 671,
        "signature": "com.fasterxml.jackson.core.JsonFactory.hasJSONFormat(InputAccessor acc): MatchStrength"
      },
      {
        "start_line": 378,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public final String getValueAsString(String defValue) throws IOException {\n        if (_currToken == JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString(); // only strings can be incomplete\n            }\n            return _textBuffer.contentsAsString();\n        }\n        if (_currToken == JsonToken.FIELD_NAME) {\n            return getCurrentName();\n        }\n        return super.getValueAsString(defValue);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "getValueAsString",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          },
          {
            "start_node": "ReaderBasedJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "getValueAsString"
          }
        ],
        "similarity": 0.08168104336012721,
        "end_line": 390,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString(String defValue): String"
      },
      {
        "start_line": 911,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final JsonToken _nextAfterName() throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "_nextAfterName",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          },
          {
            "start_node": "ReaderBasedJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_nextAfterName"
          }
        ],
        "similarity": 0.0816191366694627,
        "end_line": 911,
        "signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextAfterName(): JsonToken"
      },
      {
        "start_line": 820,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final JsonToken _nextAfterName() throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "_nextAfterName",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ReaderBasedJsonParser"
          },
          {
            "start_node": "ReaderBasedJsonParser",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_nextAfterName"
          }
        ],
        "similarity": 0.0816191366694627,
        "end_line": 820,
        "signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nextAfterName(): JsonToken"
      }
    ],
    "classes": [],
    "issues": [
      {
        "content": "This is a follow-up based on the conversation in #995.\r\n\r\nSeveral places create byte quad canonicalizer instances using `makeChild` rather than `makeChildOrPlaceholder`\r\n which avoids canonicalization.\r\nIdeally, implementations would have a fast-path to avoid unnecessary work to search for canonicalized names, however such overhead is minimal compared to using canonicalization in cases that expect unbounded names. So, I plan to create a PR shortly which updates existing code that doesn't check the canonicalization setting to use a canonicalizer which will not canonicalize unexpectedly, by only checking `_symbols.isCanonicalizing()` prior to `_symbols.addName`, without adding branching to avoid lookups  (`_symbols._findName`) in other cases. `_findName` is inexpensive on an empty table, and if we see real-world cases that this is problematic, it's possible to improve later on.\r\n\r\nI will plan to make a similar change for the smile-parser in the dataformat-binary project as well. When I make that change, would you prefer if I reference this issue, or create another issue in that project?\r\n\r\nPlease let me know if you'd prefer an approach more similar to https://github.com/FasterXML/jackson-core/pull/995/commits/\nCommit: 3d565bd39eded1bad35d93eb1f77a96b01f9b14b\nAuthor: Carter Kozak\nDate: 2023-04-21 19:14:06+00:00\n\nMessage:\nfix #994 Allow UTF8StreamJsonParser to be used without canonicalization\n\nPreviously, the ReaderBasedJsonParser was used instead, which\nis less performant when reading from an InputStream (and handling\ncharset decoding in addition to json parsing).\n\nThis commit updates the JsonFactory factory methods to respect\nthe canonicalization configuration, where previously a canonicalizing\nimplementaiton was always used.\n\nI have added guards around both `_symbols.addName` and\n`_symbols.findName` based on the existing implementation from\n`SmileParser`. For correctness, only the guards around `addName`\nare required, but we avoid unnecessary hashing by guarding\nboth.\n\nModified files:\n- Modified: src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n   Added: 3 lines\n   Removed: 3 lines\n- Modified: src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java\n   Added: 3 lines\n   Removed: 8 lines\n- Modified: src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java\n   Added: 37 lines\n   Removed: 15 lines\n- Modified: src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n   Added: 37 lines\n   Removed: 15 lines\n- Modified: src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParserBase.java\n   Added: 33 lines\n   Removed: 11 lines\n- Modified: src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingUtf8JsonParserBase.java\n   Added: 3 lines\n   Removed: 3 lines\n in which `_findName` is conditionally avoided as well.\r\n\r\nThanks!\n",
        "distance": 0,
        "title": "`JsonFactory` implementations should respect `CANONICALIZE_FIELD_NAMES`",
        "name": "root",
        "path": [],
        "issue_id": "root",
        "similarity": 2.0,
        "type": "issue"
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "1015",
        "type": "issue",
        "content": "This is a follow-up based on the conversation in #995.\r\n\r\nSeveral places create byte quad canonicalizer instances using `makeChild` rather than `makeChildOrPlaceholder`\r\n which avoids canonicalization.\r\nIdeally, implementations would have a fast-path to avoid unnecessary work to search for canonicalized names, however such overhead is minimal compared to using canonicalization in cases that expect unbounded names. So, I plan to create a PR shortly which updates existing code that doesn't check the canonicalization setting to use a canonicalizer which will not canonicalize unexpectedly, by only checking `_symbols.isCanonicalizing()` prior to `_symbols.addName`, without adding branching to avoid lookups  (`_symbols._findName`) in other cases. `_findName` is inexpensive on an empty table, and if we see real-world cases that this is problematic, it's possible to improve later on.\r\n\r\nI will plan to make a similar change for the smile-parser in the dataformat-binary project as well. When I make that change, would you prefer if I reference this issue, or create another issue in that project?\r\n\r\nPlease let me know if you'd prefer an approach more similar to https://github.com/FasterXML/jackson-core/pull/995/commits/3d565bd39eded1bad35d93eb1f77a96b01f9b14b in which `_findName` is conditionally avoided as well.\r\n\r\nThanks!\n\n",
        "source_code": null,
        "distance": 0.25,
        "title": "`JsonFactory` implementations should respect `CANONICALIZE_FIELD_NAMES`",
        "name": "issue#1015",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#1015"
          }
        ],
        "similarity": 0.8076208998906528,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "995",
        "type": "issue",
        "content": "_Note: I've created this PR against the default branch because I don't know where it is the best fit, I don't wish to cause contention around what should or shouldn't be shipped in 2.15_\r\n\r\nPreviously, the ReaderBasedJsonParser was used instead, which is less performant when reading from an InputStream (and handling charset decoding in addition to json parsing).\r\n\r\nThis commit updates the JsonFactory factory methods to respect the canonicalization configuration, where previously a canonicalizing implementaiton was always used.\r\n\r\nI have added guards around both `_symbols.addName` and `_symbols.findName` based on the existing implementation from `SmileParser`. For correctness, only the guards around `addName` are required, but we avoid unnecessary hashing by guarding both.\r\n\r\nNote that several methods on the JsonFactory failed to take the canonicalization configuration into account, so I have updated them. I can extract that to a separate PR if you prefer.\r\n\r\n### Testing\r\n\r\nTesting is tricky here because we don't expect any behavior changes, only for a different implementation to be used to get there. I could test that specific implementations are returned, but I suspect that would cause more problems than it would prevent in future refactors.\r\n\r\n### Benchmarking\r\n_Standard caveats apply, resulting numbers are specific to my system, which may have been running background tasks at the time, and isn't representative of all environments._\r\n\r\nTesting using the standard benchmark suite from jackson-benchmarks on my workstation with a new `JsonNoCanonicalizeReadVanilla` benchmark that's identical to `JsonStdReadVanilla` except it turns off canonicalization. I haven't created a PR to add this class to the jackson-benchmarks project because I suspect it isn't necessary in addition to the arbitrary key benchmark, but I'd be happy to push it up if you like.\r\n\r\nBoth run with 4 iterations of 4 seconds a piece for both warmup and measurement, with 14 threads:\r\n```sh\r\njava -Xmx256m -jar target/perf.jar \".*JsonNoCanonicalizeReadVanilla.*\" -wi 4 -w 4 -i 4 -r 4 -f 1 -t 14\r\n```\r\nBefore:\r\n```\r\nBenchmark                                               Mode  Cnt        Score        Error  Units\r\nJsonNoCanonicalizeReadVanilla.readCurrencyPojoDefault  thrpt    4   445300.635 \u00b1  91483.999  ops/s\r\nJsonNoCanonicalizeReadVanilla.readCurrencyPojoFast     thrpt    4   487798.218 \u00b1  87985.973  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeCitmCatalog      thrpt    4      187.024 \u00b1     61.912  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeMediaItem        thrpt    4  2388952.753 \u00b1 175689.170  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeMenu             thrpt    4  2656010.453 \u00b1 199132.061  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeWebxml           thrpt    4  1076557.786 \u00b1  42247.400  ops/s\r\nJsonNoCanonicalizeReadVanilla.readPojoMediaItem        thrpt    4  2559137.945 \u00b1  79045.653  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedCitmCatalog   thrpt    4      203.982 \u00b1    125.292  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedMediaItem     thrpt    4  2445168.708 \u00b1  90202.054  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedMenu          thrpt    4  2684316.144 \u00b1  31097.705  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedWebxml        thrpt    4  1065936.180 \u00b1  48567.641  ops/s\r\n```\r\nAfter:\r\n```\r\nBenchmark                                               Mode  Cnt        Score        Error  Units\r\nJsonNoCanonicalizeReadVanilla.readCurrencyPojoDefault  thrpt    4   410349.740 \u00b1  75994.844  ops/s\r\nJsonNoCanonicalizeReadVanilla.readCurrencyPojoFast     thrpt    4   456740.791 \u00b1  31345.935  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeCitmCatalog      thrpt    4      174.713 \u00b1     96.849  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeMediaItem        thrpt    4  3828160.077 \u00b1 131464.635  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeMenu             thrpt    4  6616025.264 \u00b1 360854.700  ops/s\r\nJsonNoCanonicalizeReadVanilla.readNodeWebxml           thrpt    4   535143.154 \u00b1  12656.456  ops/s\r\nJsonNoCanonicalizeReadVanilla.readPojoMediaItem        thrpt    4  3385776.236 \u00b1 157925.098  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedCitmCatalog   thrpt    4      199.011 \u00b1     50.430  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedMediaItem     thrpt    4  3850479.540 \u00b1 245234.565  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedMenu          thrpt    4  7235989.633 \u00b1 305962.992  ops/s\r\nJsonNoCanonicalizeReadVanilla.readUntypedWebxml        thrpt    4   880906.262 \u00b1  21751.634  ops/s\r\n```\r\nValues changed quite a bit, unclear if this is due to generally high variance, or the change itself.\r\n\r\n`JsonArbitraryFieldNameBenchmark` shows improvements in the `INPUT_STREAM` cases without canonicalization, which were previously identical to the `READER` results:\r\n\r\n```sh\r\njava -Xmx256m -jar target/perf.jar \".*JsonArbitraryFieldNameBenchmark.*\" -wi 4 -w 4 -i 4 -r 4 -f 1 -t 14\r\n```\r\n\r\n```\r\nBenchmark                                       (mode)                   (shape)        (type)  Mode  Cnt    Score    Error  Units\r\nJsonArbitraryFieldNameBenchmark.parse          DEFAULT            RANDOM_KEY_MAP  INPUT_STREAM  avgt    4  112.945 \u00b1 12.050  us/op\r\nJsonArbitraryFieldNameBenchmark.parse          DEFAULT            RANDOM_KEY_MAP        READER  avgt    4   10.490 \u00b1  0.362  us/op\r\nJsonArbitraryFieldNameBenchmark.parse          DEFAULT  BEAN_WITH_RANDOM_KEY_MAP  INPUT_STREAM  avgt    4  113.070 \u00b1 20.401  us/op\r\nJsonArbitraryFieldNameBenchmark.parse          DEFAULT  BEAN_WITH_RANDOM_KEY_MAP        READER  avgt    4   11.150 \u00b1  0.397  us/op\r\nJsonArbitraryFieldNameBenchmark.parse        NO_INTERN            RANDOM_KEY_MAP  INPUT_STREAM  avgt    4  105.848 \u00b1  9.308  us/op\r\nJsonArbitraryFieldNameBenchmark.parse        NO_INTERN            RANDOM_KEY_MAP        READER  avgt    4    4.536 \u00b1  0.099  us/op\r\nJsonArbitraryFieldNameBenchmark.parse        NO_INTERN  BEAN_WITH_RANDOM_KEY_MAP  INPUT_STREAM  avgt    4  106.422 \u00b1 18.303  us/op\r\nJsonArbitraryFieldNameBenchmark.parse        NO_INTERN  BEAN_WITH_RANDOM_KEY_MAP        READER  avgt    4    5.123 \u00b1  0.175  us/op\r\nJsonArbitraryFieldNameBenchmark.parse  NO_CANONICALIZE            RANDOM_KEY_MAP  INPUT_STREAM  avgt    4    0.499 \u00b1  0.012  us/op\r\nJsonArbitraryFieldNameBenchmark.parse  NO_CANONICALIZE            RANDOM_KEY_MAP        READER  avgt    4    4.131 \u00b1  0.086  us/op\r\nJsonArbitraryFieldNameBenchmark.parse  NO_CANONICALIZE  BEAN_WITH_RANDOM_KEY_MAP  INPUT_STREAM  avgt    4    1.057 \u00b1  0.169  us/op\r\nJsonArbitraryFieldNameBenchmark.parse  NO_CANONICALIZE  BEAN_WITH_RANDOM_KEY_MAP        READER  avgt    4    4.455 \u00b1  0.042  us/op\r\n```\n\n\nComment by cowtowncoder:\nOk thanks! This definitely needs to wait until 2.16; at which point also need to consider usage from other format modules (mostly Smile, I think).\n\nComment by carterkozak:\nGreat, thank you!\r\nI'll rebase and retarget this PR for 2.16 once the branch is up, and prepare an update for the smile module.\n\nComment by carterkozak:\nI've rebased this and updated the `@since` placeholders to 2.16. On the Smile side, I don't think any changes are required as a result, but this factory doesn't respect the canonicalization setting: https://github.com/FasterXML/jackson-dataformats-binary/blob/19317f418ec475a0e752a7c29f58998f96f904b3/smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileFactory.java#L415-L418\r\nI've implemented boolean checks similar to this PR, but I think the smile parsers may make it easier to avoid quads in favor of direct byte-array decoding (this is what the blocking smile parser already does, but it's a bit more complex to implement). I'd like to spend a bit more time thinking about the smile change before I create a PR into dataformats-binary if that's alright.\n\nComment by cowtowncoder:\n@carterkozak That sounds good.\r\n\r\nWrt Smile there's still some benefit from trying to find canonicalized instance by quad, although direct decoding is indeed faster (as there's no escaping). I vaguely remember part about canonicalization setting not being honored; would be nice to fix, so +1 for doing that if you figure out a way.\r\n\n\nComment by cowtowncoder:\nOn JMH benchmarks: variations are way high so I think you'd want `-f 5` or such instead of `-f 1`. Would be nice to see more stable outputs.\n\nComment by carterkozak:\nI haven't had a chance to dig into the smile async parser changes yet, but I've re-run the `JsonNoCanonicalizeReadVanilla` benchmarks on an aws instance to avoid background noise on my system (though noisy neighbor is still possible) using a [c6i.2xlarge](https://aws.amazon.com/ec2/instance-types/c6i/) and the following jmh args for a ~30 minute run in each configuration:\r\n```bash\r\njava -Xmx256m -jar perf.jar \".*JsonNoCanonicalizeReadVanilla.*\" -wi 5 -w 3 -i 5 -r 3 -f 5 -t max -rf json\r\n```\r\n\r\nI've uploaded the structured json results here: https://gist.github.com/carterkozak/5f736d2348edbbc873b9629b18de6929\r\nWhere they can be visualized here: https://jmh.morethan.io/?gist=5f736d2348edbbc873b9629b18de6929\r\n\r\nIt's getting a bit late, I haven't had a chance to sit down and analyze the results yet, but I thought I'd share what I've collected nonetheless :-)\r\n\r\nScreenshot of the visualization summary for posterity:\r\n![2023-04-25_1426x1283_screen](https://user-images.githubusercontent.com/3854321/234462860-c6d0f8ef-c466-4f73-9165-696497d1889d.png)\r\n\r\nedit: I've shared the benchmark I used here: https://github.com/FasterXML/jackson-benchmarks/pull/8\n\nComment by carterkozak:\nSo far it looks like the original comment was correct, I suspect the performance difference for small inputs is based in part on the 8kb buffer created within InputStreamReader. If I add `new BufferedInputStream(original, 8192)` to the stream provided to `UTF8StreamJsonParser`, the reader-based approach slightly outperforms it. We could probably implement an InputStreamReader which uses buffers from the BufferRecycler to close the gap, reducing per-operation allocation by 8k across the board (would such an optimization be worth the implementation complexity? I defer entirely to your judgement. It would be fair to suggest users with that level of performance sensitivity should handle constructing an efficient Reader themselves).\r\nThe [`InputStreamReader`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/InputStreamReader.html) uses a [`CharsetDecoder`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/charset/CharsetDecoder.html) under the hood, which is able to take advantage of SIMD optimizations that we don't have access to (yet) in pure java. Claes Redestad has a great blog post on some of those optimizations here: https://cl4es.github.io/2021/02/23/Faster-Charset-Decoding.html\n\nComment by pjfanning:\n@carterkozak thanks for the interesting analysis. Would you be able to try different Java LTS versions? 8, 11, 17 and 20 (as proxy for the forthcoming 21 LTS release). There might be different results - in particular, for the SIMD related support. jackson-core v2.15 is a multi-release jar and in theory, we can support different implementations of classes to suit different Java release.\n\nComment by carterkozak:\nHappy to re-run benchmarks across jdk releases, I only tested with the latest build of jdk17 in the results above. It may be a few days before I have a chance to re-run benchmarks though.\r\n\r\nregarding multi-release jars, I don't think that will help us quite yet because [jep 448](https://openjdk.org/jeps/448) is re-incubating the vector API as a preview feature for jdk 21, so it won't be available as a stable feature until a later release.\n\nComment by cowtowncoder:\nOn Multi-release jars: I don't have much appetite for JDK-specific variants at this point. Just fwtw.\r\n\r\nI concur with the suggestion that buffer allocation of `InputStreamReader` explains much of benefits of `UTF8StreamJsonParser` for small documents.\r\n\r\nSo at this point I am not sure it makes sense to merge this PR, if it's not quite clear there are consistent performance improvements. And although we could try creating custom `InputStreamReader` I don't see that as a good approach (wrt not having optimized SIMD decoder f.ex).\r\n\r\nConversely making `UTF8StreamJsonParser` faster for non-canonicalizing case would be possible but only as a separate implementation, which would in some ways be more like `ReaderBasedJsonParser`, not using quads but converting from UTF-8 bytes to `char` as part of decoding. Not sure I have lots of interest for yet another backend either but if someone really wanted to try it I would of course help.\r\n\r\nSo I suspect this PR is sort of pending for now.\r\n\n\nComment by carterkozak:\nI agree with your assessment that the original intent of this PR is unnecessary. It may still be helpful to ensure all factory methods respect the canonicalization setting (perhaps under a new issue+PR, if you agree).\r\n\r\nI can update this PR+title to solely add information from this investigation to the comment here if you'd like: https://github.com/FasterXML/jackson-core/blob/f98e22a3d387d457facf6ff75907e9aff8741398/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java#L260-L262\r\n\r\n> Conversely making UTF8StreamJsonParser faster for non-canonicalizing case would be possible but only as a separate implementation, which would in some ways be more like ReaderBasedJsonParser, not using quads but converting from UTF-8 bytes to char as part of decoding. Not sure I have lots of interest for yet another backend either but if someone really wanted to try it I would of course help.\r\n\r\nI agree that another implementation likely isn't worthwhile. As an aside with regard to conversion from bytes to quads and chars: I suspect on jdk9+ after the string compactness changes from [jep-254](https://openjdk.org/jeps/254) it may be more efficient to create strings directly from byte-arrays rather than converting to an intermediate char-array because strings are no longer backed by chars, rather an underlying byte-array with metadata describing whether the encoding is `LATIN1` or `UTF-16`. The conversion between char[] and byte[] within string is incredibly performant, so the potential upside of making changes here is likely small, but I figured I'd share in case anyone finds it useful or interesting.\n\nComment by cowtowncoder:\n> I agree with your assessment that the original intent of this PR is unnecessary. It may still be helpful to ensure all factory methods respect the canonicalization setting (perhaps under a new issue+PR, if you agree).\r\n\r\nYes, +1 for respecting canonicalization + intern settings.\r\n\r\n> \r\n> I can update this PR+title to solely add information from this investigation to the comment here if you'd like:\r\n> \r\n> https://github.com/FasterXML/jackson-core/blob/f98e22a3d387d457facf6ff75907e9aff8741398/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java#L260-L262\r\n\r\nSounds good.\r\n \r\n> > Conversely making UTF8StreamJsonParser faster for non-canonicalizing case would be possible but only as a separate implementation, which would in some ways be more like ReaderBasedJsonParser, not using quads but converting from UTF-8 bytes to char as part of decoding. Not sure I have lots of interest for yet another backend either but if someone really wanted to try it I would of course help.\r\n> \r\n> I agree that another implementation likely isn't worthwhile. As an aside with regard to conversion from bytes to quads and chars: I suspect on jdk9+ after the string compactness changes from [jep-254](https://openjdk.org/jeps/254) it may be more efficient to create strings directly from byte-arrays rather than converting to an intermediate char-array because strings are no longer backed by chars, rather an underlying byte-array with metadata describing whether the encoding is `LATIN1` or `UTF-16`. The conversion between char[] and byte[] within string is incredibly performant, so the potential upside of making changes here is likely small, but I figured I'd share in case anyone finds it useful or interesting.\r\n\r\nYeah, although this is kind of... ugly and nasty, because the real challenge is UTF-8 encoding/decoding.\r\nMeaning that it's not a question of dropping something -- UTF-8 codec is still needed, and JSON has some non-standard aspects wrt Surrogate handling too -- but changing internal buffers, it sounds like.\r\nSo change needed sounds like sizable thing, actually complicating things.\r\n\r\nI don't know how other decoding libraries deal with this tho. Seems like a challenge for anything that couples tokenizing with Charset decoding (which is beneficial for performance but has the challenges of tight coupling).\r\n\n\nComment by carterkozak:\nI haven't forgotten about this, it has been a busy week. Planning to put together the updates as described tomorrow! Thanks for bearing with me :-)",
        "source_code": null,
        "distance": 0.25,
        "title": "Investigate allowing UTF8StreamJsonParser to be used without canonicalization (see #994)",
        "name": "pr#995",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "pr#995"
          }
        ],
        "similarity": 0.7115785926427528,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "994",
        "type": "issue",
        "content": "This is a more specific follow-up from one of the components of https://github.com/FasterXML/jackson-benchmarks/pull/6\r\n\r\nI'd like to determine whether this comment still holds true, initial benchmarking showed a fairly substantial improvement for small inputs, and the `UTF8StreamJsonParser` has optimizations outside of keys that I'd expect to tip the scales in its favor.\r\nhttps://github.com/FasterXML/jackson-core/blob/36cd882098c448c944f44edb10659d5f25d59ece/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java#L259-L270\n\n\nComment by cowtowncoder:\n+1 for this; hopefully for 2.16 timeframe (I saw PR).",
        "source_code": null,
        "distance": 0.25,
        "title": "Investigate feasibility of UTF8StreamJsonParser without canonicalization",
        "name": "issue#994",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#994"
          }
        ],
        "similarity": 0.605212013196583,
        "end_line": null,
        "signature": null
      }
    ]
  },
  "artifact_stats": {
    "skipped_due_to_time": 8,
    "valid_related_items": 28
  }
}