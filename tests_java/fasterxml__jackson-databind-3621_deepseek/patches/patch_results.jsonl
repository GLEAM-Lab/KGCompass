{"org": "fasterxml", "repo": "jackson-databind", "number": "3621", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n@@ -377,7 +377,7 @@\n      */\n \n     @Deprecated // since 2.12, use overloaded variant that does NOT take target type\n-    protected final boolean _parseBooleanPrimitive(DeserializationContext ctxt,\n+    protected final boolean _parseBooleanPrimitive(DeserializationContext ctxt, JsonParser p, Class<?> targetType) throws IOException\n             JsonParser p, Class<?> targetType) throws IOException {\n         return _parseBooleanPrimitive(p, ctxt);\n     }\n@@ -386,7 +386,7 @@\n      * @param ctxt Deserialization context for accessing configuration\n      * @param p Underlying parser\n      */\n-    protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt)\n+    protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException\n             throws IOException\n     {\n         String text;\n@@ -496,7 +496,7 @@\n      *\n      * @since 2.12\n      */\n-    protected final Boolean _parseBoolean(JsonParser p, DeserializationContext ctxt,\n+    protected final Boolean _parseBoolean(JsonParser p, DeserializationContext ctxt, Class<?> targetType) throws IOException\n             Class<?> targetType)\n         throws IOException\n     {\n@@ -2039,7 +2039,19 @@\n         //     but for now just fall through\n     }\n \n-    protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException\n+    protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException {\n+        if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            if (p.getParsingContext().inArray()) {\n+                ctxt.reportInputMismatch(handledType(),\n+                    \"Cannot unwrap array - already at nesting level %d (max allowed %d)\",\n+                    p.getParsingContext().getNestingDepth(),\n+                    ctxt.getMaxNestingDepth());\n+            }\n+            if (p.nextToken() != JsonToken.END_ARRAY) {\n+                handleMissingEndArrayForSingle(p, ctxt);\n+            }\n+        }\n+    }\n     {\n         JsonToken t = p.nextToken();\n         if (t != JsonToken.END_ARRAY) {\n"}
