{
  "related_entities": {
    "methods": [
      {
        "start_line": 141,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected StreamReadConstraints(final int maxNestingDepth, final int maxNumLen, final int maxStringLen) {\n        _maxNestingDepth = maxNestingDepth;\n        _maxNumLen = maxNumLen;\n        _maxStringLen = maxStringLen;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "StreamReadConstraints",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          }
        ],
        "similarity": 0.12634077446817274,
        "end_line": 145,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints(int maxNestingDepth, int maxNumLen, int maxStringLen)"
      },
      {
        "start_line": 331,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void release() {\n        // If nothing has been added, nothing to do\n        if (!maybeDirty()) { return; }\n\n        // we will try to merge if child table has new entries\n        if (_parent != null && _canonicalize) { // canonicalize set to false if max size was reached\n            _parent.mergeChild(new TableInfo(this));\n            // Let's also mark this instance as dirty, so that just in\n            // case release was too early, there's no corruption of possibly shared data.\n            _hashShared = true;\n        }\n    }",
        "distance": 1.0,
        "title": null,
        "name": "release",
        "documentation": "/**\n     * Method called by the using code to indicate it is done with this instance.\n     * This lets instance merge accumulated changes into parent (if need be),\n     * safely and efficiently, and without calling code having to know about parent\n     * information.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          }
        ],
        "similarity": 0.1171377417828053,
        "end_line": 342,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.release(): void"
      },
      {
        "start_line": 730,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected void verifyInternalConsistency() {\n        int count = 0;\n        final int size = _symbols.length;\n\n        for (int i = 0; i < size; ++i) {\n            String symbol = _symbols[i];\n            if (symbol != null) {\n                ++count;\n            }\n        }\n\n        final int bucketSize = (size >> 1);\n        for (int i = 0; i < bucketSize; ++i) {\n            for (Bucket b = _buckets[i]; b != null; b = b.next) {\n                ++count;\n            }\n        }\n        if (count != _size) {\n            throw new IllegalStateException(\n                    String.format(\"Internal error: expected internal size %d vs calculated count %d\",\n                            _size, count));\n        }\n    }",
        "distance": 1.5,
        "title": null,
        "name": "verifyInternalConsistency",
        "documentation": "/**\n     * Diagnostics method that will verify that internal data structures are consistent;\n     * not meant as user-facing method but only for test suites and possible troubleshooting.\n     *\n     * @since 2.10\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "verifyInternalConsistency"
          }
        ],
        "similarity": 0.10017808612296833,
        "end_line": 752,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.verifyInternalConsistency(): void"
      },
      {
        "start_line": 718,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected void _reportTooManyCollisions(int maxLen) throws StreamConstraintsException {\n        throw new StreamConstraintsException(\"Longest collision chain in symbol table (of size \"+_size\n                +\") now exceeds maximum, \"+maxLen+\" -- suspect a DoS attack based on hash collisions\");\n    }",
        "distance": 1.5,
        "title": null,
        "name": "_reportTooManyCollisions",
        "documentation": "/**\n     * @param maxLen Maximum allowed length of collision chain\n     * @throws StreamConstraintsException if there are too many collisions (was an IllegalStateException before v2.15)\n     * @since 2.1\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_reportTooManyCollisions"
          }
        ],
        "similarity": 0.09886939565520293,
        "end_line": 721,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._reportTooManyCollisions(int maxLen): void"
      },
      {
        "start_line": 339,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public static ByteQuadsCanonicalizer createRoot() {\n        // Need to use a variable seed, to thwart hash-collision based attacks.\n        // 14-Feb-2017, tatu: Does this actually help?\n        long now = System.currentTimeMillis();\n        // ensure it's not 0; and might as well require to be odd so:\n        int seed = (((int) now) + ((int) (now >>> 32))) | 1;\n        return createRoot(seed);\n    }",
        "distance": 1.5,
        "title": null,
        "name": "createRoot",
        "documentation": "/**\n     * Factory method to call to create a symbol table instance with a\n     * randomized seed value.\n     *\n     * @return Root instance to use for constructing new child instances\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createRoot"
          }
        ],
        "similarity": 0.08743407650107551,
        "end_line": 346,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(): ByteQuadsCanonicalizer"
      },
      {
        "start_line": 1097,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private boolean _checkNeedForRehash() {\n        // Yes if above 80%, or above 50% AND have ~1% spill-overs\n        if (_count > (_hashSize >> 1)) { // over 50%\n            int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;\n            if ((spillCount > (1 + _count >> 7))\n                    || (_count > (_hashSize * 0.80))) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "_checkNeedForRehash",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_checkNeedForRehash"
          }
        ],
        "similarity": 0.08667784188906313,
        "end_line": 1107,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._checkNeedForRehash(): boolean"
      },
      {
        "start_line": 381,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ByteQuadsCanonicalizer makeChildOrPlaceholder(int flags) {\n        if (JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags)) {\n            // inlined \"makeChild()\"\n            return new ByteQuadsCanonicalizer(this, _seed,\n                    _tableInfo.get(),\n                    JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags));\n        }\n        return new ByteQuadsCanonicalizer(_tableInfo.get());\n    }",
        "distance": 1.5,
        "title": null,
        "name": "makeChildOrPlaceholder",
        "documentation": "/**\n     * Method similar to {@link #makeChild} but one that only creates real\n     * instance of {@link com.fasterxml.jackson.core.JsonFactory.Feature#CANONICALIZE_FIELD_NAMES} is\n     * enabled: otherwise a \"bogus\" instance is created.\n     *\n     * @param flags Bit flags of active {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled.\n     *\n     * @return Actual canonicalizer instance that can be used by a parser if (and only if)\n     *    canonicalization is enabled; otherwise a non-null \"placeholder\" instance.\n     *\n     * @since 2.13\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "makeChildOrPlaceholder"
          }
        ],
        "similarity": 0.08413394974052082,
        "end_line": 390,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChildOrPlaceholder(int flags): ByteQuadsCanonicalizer"
      },
      {
        "start_line": 292,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public static CharsToNameCanonicalizer createRoot() {\n        // Need to use a variable seed, to thwart hash-collision based attacks.\n        // 14-Feb-2017, tatu: not sure it actually helps, at all, since it won't\n        //   change mixing or any of the steps. Should likely just remove in future.\n        long now = System.currentTimeMillis();\n        // ensure it's not 0; and might as well require to be odd so:\n        int seed = (((int) now) + ((int) (now >>> 32))) | 1;\n        return createRoot(seed);\n    }",
        "distance": 1.5,
        "title": null,
        "name": "createRoot",
        "documentation": "/**\n     * Method called to create root canonicalizer for a {@link com.fasterxml.jackson.core.JsonFactory}\n     * instance. Root instance is never used directly; its main use is for\n     * storing and sharing underlying symbol arrays as needed.\n     *\n     * @return Root instance to use for constructing new child instances\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createRoot"
          }
        ],
        "similarity": 0.0828744488871696,
        "end_line": 300,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(): CharsToNameCanonicalizer"
      },
      {
        "start_line": 362,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ByteQuadsCanonicalizer makeChild(int flags) {\n        return new ByteQuadsCanonicalizer(this, _seed,\n                _tableInfo.get(),\n                JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags));\n    }",
        "distance": 1.5,
        "title": null,
        "name": "makeChild",
        "documentation": "/**\n     * Factory method used to create actual symbol table instance to\n     * use for parsing.\n     *\n     * @param flags Bit flags of active {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled.\n     *\n     * @return Actual canonicalizer instance that can be used by a parser\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "makeChild"
          }
        ],
        "similarity": 0.08157908242974975,
        "end_line": 367,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChild(int flags): ByteQuadsCanonicalizer"
      },
      {
        "start_line": 893,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public String addName(String name, int q1, int q2) throws StreamConstraintsException {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n\n        // 20-Mar-2021, tatu: For some reason, pre-2.13 there was logic\n        //    to support \"only one quad\" case. Not sure why, does not make sense;\n        //    removed from 2.13.0.\n//        int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);\n        final int hash = calcHash(q1, q2);\n        final int offset = _findOffsetForAdd(hash);\n        _hashArea[offset] = q1;\n        _hashArea[offset+1] = q2;\n        _hashArea[offset+3] = 2;\n        _names[offset >> 2] = name;\n        ++_count;\n        return name;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "addName",
        "documentation": "/**\n     * @param name\n     * @param q1\n     * @param q2\n     * @return name (possibly interned)\n     * @throws StreamConstraintsException if the constraint exceptions\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "addName"
          }
        ],
        "similarity": 0.07735521866940537,
        "end_line": 911,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String name, int q1, int q2): String"
      },
      {
        "start_line": 635,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private void rehash() throws IOException {\n        final int size = _symbols.length;\n        int newSize = size + size;\n\n        /* 12-Mar-2010, tatu: Let's actually limit maximum size we are\n         *    prepared to use, to guard against OOME in case of unbounded\n         *    name sets (unique [non-repeating] names)\n         */\n        if (newSize > MAX_T_SIZE) {\n            // If this happens, there's no point in either growing or shrinking hash areas.\n            // Rather, let's just cut our losses and stop canonicalizing.\n            _size = 0;\n            _canonicalize = false;\n            // in theory, could just leave these as null, but...\n            _symbols = new String[DEFAULT_T_SIZE];\n            _buckets = new Bucket[DEFAULT_T_SIZE>>1];\n            _indexMask = DEFAULT_T_SIZE-1;\n            _hashShared = false;\n            return;\n        }\n\n        final String[] oldSyms = _symbols;\n        final Bucket[] oldBuckets = _buckets;\n        _symbols = new String[newSize];\n        _buckets = new Bucket[newSize >> 1];\n        // Let's update index mask, threshold, now (needed for rehashing)\n        _indexMask = newSize - 1;\n        _sizeThreshold = _thresholdSize(newSize);\n\n        int count = 0; // let's do sanity check\n\n        // Need to do two loops, unfortunately, since spill-over area is\n        // only half the size:\n        int maxColl = 0;\n        for (int i = 0; i < size; ++i) {\n            String symbol = oldSyms[i];\n            if (symbol != null) {\n                ++count;\n                int index = _hashToIndex(calcHash(symbol));\n                if (_symbols[index] == null) {\n                    _symbols[index] = symbol;\n                } else {\n                    int bix = (index >> 1);\n                    Bucket newB = new Bucket(symbol, _buckets[bix]);\n                    _buckets[bix] = newB;\n                    maxColl = Math.max(maxColl, newB.length);\n                }\n            }\n        }\n\n        final int bucketSize = (size >> 1);\n        for (int i = 0; i < bucketSize; ++i) {\n            Bucket b = oldBuckets[i];\n            while (b != null) {\n                ++count;\n                String symbol = b.symbol;\n                int index = _hashToIndex(calcHash(symbol));\n                if (_symbols[index] == null) {\n                    _symbols[index] = symbol;\n                } else {\n                    int bix = (index >> 1);\n                    Bucket newB = new Bucket(symbol, _buckets[bix]);\n                    _buckets[bix] = newB;\n                    maxColl = Math.max(maxColl, newB.length);\n                }\n                b = b.next;\n            }\n        }\n        _longestCollisionList = maxColl;\n        _overflows = null;\n\n        if (count != _size) {\n            throw new IllegalStateException(String.format(\n                    \"Internal error on SymbolTable.rehash(): had %d entries; now have %d\",\n                    _size, count));\n        }\n    }",
        "distance": 1.5,
        "title": null,
        "name": "rehash",
        "documentation": "/**\n     * Method called when size (number of entries) of symbol table grows\n     * so big that load factor is exceeded. Since size has to remain\n     * power of two, arrays will then always be doubled. Main work\n     * is really redistributing old entries into new String/Bucket\n     * entries.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "rehash"
          }
        ],
        "similarity": 0.07730171337862271,
        "end_line": 711,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.rehash(): void"
      },
      {
        "start_line": 590,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int calcHash(char[] buffer, int start, int len) {\n        int hash = _seed;\n        for (int i = start, end = start+len; i < end; ++i) {\n            hash = (hash * HASH_MULT) + (int) buffer[i];\n        }\n        // NOTE: shuffling, if any, is done in 'findSymbol()', not here:\n        return (hash == 0) ? 1 : hash;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "calcHash",
        "documentation": "/**\n     * Implementation of a hashing method for variable length\n     * Strings. Most of the time intention is that this calculation\n     * is done by caller during parsing, not here; however, sometimes\n     * it needs to be done for parsed \"String\" too.\n     *\n     * @param buffer Input buffer that contains name to decode\n     * @param start Pointer to the first character of the name\n     * @param len Length of String; has to be at least 1 (caller guarantees)\n     *\n     * @return Hash code calculated\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "calcHash"
          }
        ],
        "similarity": 0.07582450734815882,
        "end_line": 597,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[] buffer, int start, int len): int"
      },
      {
        "start_line": 552,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public String toString() {\n        int pri = primaryCount();\n        int sec = secondaryCount();\n        int tert = tertiaryCount();\n        int spill = spilloverCount();\n        int total = totalCount();\n        return String.format(\"[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]\",\n                getClass().getName(), _count, _hashSize,\n                pri, sec, tert, spill, (pri+sec+tert+spill), total);\n    }",
        "distance": 1.5,
        "title": null,
        "name": "toString",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "toString"
          }
        ],
        "similarity": 0.07487141613717031,
        "end_line": 561,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.toString(): String"
      },
      {
        "start_line": 1325,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private void nukeSymbols(boolean fill) {\n        _count = 0;\n        // reset spill-over to empty (starting at 7/8 of hash area)\n        _spilloverEnd = _spilloverStart();\n        // and long name area to empty, starting immediately after hash area\n        _longNameOffset = _hashSize << 3;\n        if (fill) {\n            Arrays.fill(_hashArea, 0);\n            Arrays.fill(_names, null);\n        }\n    }",
        "distance": 1.5,
        "title": null,
        "name": "nukeSymbols",
        "documentation": "/**\n     * Helper method called to empty all shared symbols, but to leave\n     * arrays allocated\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "nukeSymbols"
          }
        ],
        "similarity": 0.07256062264425371,
        "end_line": 1335,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.nukeSymbols(boolean fill): void"
      },
      {
        "start_line": 480,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private String _findSymbol2(char[] buffer, int start, int len, Bucket b) {\n        while (b != null) {\n            String sym = b.has(buffer, start, len);\n            if (sym != null) {\n                return sym;\n            }\n            b = b.next;\n        }\n        return null;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "_findSymbol2",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_findSymbol2"
          }
        ],
        "similarity": 0.07251043510724464,
        "end_line": 489,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[] buffer, int start, int len, Bucket b): String"
      },
      {
        "start_line": 534,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private void _handleSpillOverflow(int bucketIndex, Bucket newBucket, int mainIndex) throws IOException",
        "distance": 1.5,
        "title": null,
        "name": "_handleSpillOverflow",
        "documentation": "/**\n     * Method called when an overflow bucket has hit the maximum expected length:\n     * this may be a case of DoS attack. Deal with it based on settings by either\n     * clearing up bucket (to avoid indefinite expansion) or throwing exception.\n     * Currently, the first overflow for any single bucket DOES NOT throw an exception,\n     * only second time (per symbol table instance)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_handleSpillOverflow"
          }
        ],
        "similarity": 0.07083555931085168,
        "end_line": 534,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int bucketIndex, Bucket newBucket, int mainIndex): void"
      },
      {
        "start_line": 260,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void validateIntegerLength(int length) throws StreamConstraintsException",
        "distance": 1.25,
        "title": null,
        "name": "validateIntegerLength",
        "documentation": "/**\n     * Convenience method that can be used to verify that an integer\n     * number of specified length does not exceed maximum specific by this\n     * constraints object: if it does, a\n     * {@link StreamConstraintsException}\n     * is thrown.\n     *\n     * @param length Length of number in input units\n     *\n     * @throws StreamConstraintsException If length exceeds maximum\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "validateIntegerLength"
          }
        ],
        "similarity": 0.07082487103602197,
        "end_line": 260,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.validateIntegerLength(int length): void"
      },
      {
        "start_line": 873,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public String addName(String name, int q1) throws StreamConstraintsException {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int offset = _findOffsetForAdd(calcHash(q1));\n        _hashArea[offset] = q1;\n        _hashArea[offset+3] = 1;\n        _names[offset >> 2] = name;\n        ++_count;\n        return name;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "addName",
        "documentation": "/**\n     * @param name\n     * @param q1\n     * @return name (possibly interned)\n     * @throws StreamConstraintsException if the constraint exceptions\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "addName"
          }
        ],
        "similarity": 0.06807586639988873,
        "end_line": 884,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String name, int q1): String"
      },
      {
        "start_line": 241,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void validateFPLength(int length) throws StreamConstraintsException",
        "distance": 1.25,
        "title": null,
        "name": "validateFPLength",
        "documentation": "/**\n     * Convenience method that can be used to verify that a floating-point\n     * number of specified length does not exceed maximum specified by this\n     * constraints object: if it does, a\n     * {@link StreamConstraintsException}\n     * is thrown.\n     *\n     * @param length Length of number in input units\n     *\n     * @throws StreamConstraintsException If length exceeds maximum\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "validateFPLength"
          }
        ],
        "similarity": 0.06764041273482074,
        "end_line": 241,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.validateFPLength(int length): void"
      },
      {
        "start_line": 921,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public String addName(String name, int q1, int q2, int q3) throws StreamConstraintsException {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int offset = _findOffsetForAdd(calcHash(q1, q2, q3));\n        _hashArea[offset] = q1;\n        _hashArea[offset+1] = q2;\n        _hashArea[offset+2] = q3;\n        _hashArea[offset+3] = 3;\n        _names[offset >> 2] = name;\n        ++_count;\n        return name;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "addName",
        "documentation": "/**\n     * @param name\n     * @param q1\n     * @param q2\n     * @param q3\n     * @return name (possibly interned)\n     * @throws StreamConstraintsException if the constraint exceptions\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "addName"
          }
        ],
        "similarity": 0.06720813306369415,
        "end_line": 934,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String name, int q1, int q2, int q3): String"
      },
      {
        "start_line": 185,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int getMaxNumberLength() {\n        return _maxNumLen;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "getMaxNumberLength",
        "documentation": "/**\n     * Accessor for maximum length of numbers to decode.\n     * see {@link Builder#maxNumberLength(int)} for details.\n     *\n     * @return Maximum allowed number length\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "getMaxNumberLength"
          }
        ],
        "similarity": 0.06663079085673498,
        "end_line": 187,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.getMaxNumberLength(): int"
      },
      {
        "start_line": 570,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int _hashToIndex(int rawHash) {\n        // doing these seems to help a bit\n        rawHash += (rawHash >>> 15);\n        rawHash ^= (rawHash << 7);\n        rawHash += (rawHash >>> 3);\n        return (rawHash & _indexMask);\n    }",
        "distance": 1.5,
        "title": null,
        "name": "_hashToIndex",
        "documentation": "/**\n     * Helper method that takes in a \"raw\" hash value, shuffles it as necessary,\n     * and truncates to be used as the index.\n     *\n     * @param rawHash Raw hash value to use for calculating index\n     *\n     * @return Index value calculated\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_hashToIndex"
          }
        ],
        "similarity": 0.06159813451577513,
        "end_line": 576,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashToIndex(int rawHash): int"
      },
      {
        "start_line": 621,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private void copyArrays() {\n        final String[] oldSyms = _symbols;\n        _symbols = Arrays.copyOf(oldSyms, oldSyms.length);\n        final Bucket[] oldBuckets = _buckets;\n        _buckets = Arrays.copyOf(oldBuckets, oldBuckets.length);\n    }",
        "distance": 1.5,
        "title": null,
        "name": "copyArrays",
        "documentation": "/**\n     * Method called when copy-on-write is needed; generally when first\n     * change is made to a derived symbol table.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "copyArrays"
          }
        ],
        "similarity": 0.06130153242093378,
        "end_line": 626,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.copyArrays(): void"
      },
      {
        "start_line": 216,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void validateNestingDepth(int depth) throws StreamConstraintsException",
        "distance": 1.25,
        "title": null,
        "name": "validateNestingDepth",
        "documentation": "/**\n     * Convenience method that can be used to verify that the\n     * nesting depth does not exceed the maximum specified by this\n     * constraints object: if it does, a\n     * {@link StreamConstraintsException}\n     * is thrown.\n     *\n     * @param depth count of unclosed objects and arrays\n     *\n     * @throws StreamConstraintsException If depth exceeds maximum\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "validateNestingDepth"
          }
        ],
        "similarity": 0.061083199358948626,
        "end_line": 216,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.validateNestingDepth(int depth): void"
      },
      {
        "start_line": 1346,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private final int _spilloverStart() {\n        // we'll need slot at 1.75x of hashSize, but with 4-ints per slot.\n        // So basically multiply by 7\n        int offset = _hashSize;\n        return (offset << 3) - offset;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "_spilloverStart",
        "documentation": "/**\n     * Helper method that calculates start of the spillover area\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_spilloverStart"
          }
        ],
        "similarity": 0.06079830697702265,
        "end_line": 1351,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._spilloverStart(): int"
      },
      {
        "start_line": 501,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int secondaryCount() {\n        int count = 0;\n        int offset = _secondaryStart + 3;\n        for (int end = _tertiaryStart; offset < end; offset += 4) {\n            if (_hashArea[offset] != 0) {\n                ++count;\n            }\n        }\n        return count;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "secondaryCount",
        "documentation": "/**\n     * Method mostly needed by unit tests; calculates number of entries\n     * in secondary buckets\n     *\n     * @return Number of entries in the secondary hash area\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "secondaryCount"
          }
        ],
        "similarity": 0.05887332109826472,
        "end_line": 510,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.secondaryCount(): int"
      },
      {
        "start_line": 472,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public boolean isCanonicalizing() {\n        // couple of options, but for now missing parent linkage simplest:\n        return _parent != null;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "isCanonicalizing",
        "documentation": "/**\n     * @return True for \"real\", canonicalizing child tables; false for\n     *    root table as well as placeholder \"child\" tables.\n     *\n     * @since 2.13\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "isCanonicalizing"
          }
        ],
        "similarity": 0.05875172355246969,
        "end_line": 475,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.isCanonicalizing(): boolean"
      },
      {
        "start_line": 277,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private static int _thresholdSize(int hashAreaSize) { return hashAreaSize - (hashAreaSize >> 2); }",
        "distance": 1.5,
        "title": null,
        "name": "_thresholdSize",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "_thresholdSize"
          }
        ],
        "similarity": 0.05829779508411292,
        "end_line": 277,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._thresholdSize(int hashAreaSize): int"
      },
      {
        "start_line": 408,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int collisionCount() {\n        int count = 0;\n\n        for (Bucket bucket : _buckets) {\n            if (bucket != null) {\n                count += bucket.length;\n            }\n        }\n        return count;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "collisionCount",
        "documentation": "/**\n     * Method mostly needed by unit tests; calculates number of\n     * entries that are in collision list. Value can be at most\n     * ({@link #size} - 1), but should usually be much lower, ideally 0.\n     *\n     * @since 2.1\n     *\n     * @return Number of collisions in the primary hash area\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "collisionCount"
          }
        ],
        "similarity": 0.05810103682579162,
        "end_line": 417,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.collisionCount(): int"
      },
      {
        "start_line": 381,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int size() {\n        if (_tableInfo != null) { // root table\n            return _tableInfo.get().size;\n        }\n        // nope, child table\n        return _size;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "size",
        "documentation": "/**\n     * @return Number of symbol entries contained by this canonicalizer instance\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "size"
          }
        ],
        "similarity": 0.0575348608737855,
        "end_line": 387,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.size(): int"
      },
      {
        "start_line": 518,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int tertiaryCount() {\n        int count = 0;\n        int offset = _tertiaryStart + 3; // to 1.5x, starting point of tertiary\n        for (int end = offset + _hashSize; offset < end; offset += 4) {\n            if (_hashArea[offset] != 0) {\n                ++count;\n            }\n        }\n        return count;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "tertiaryCount",
        "documentation": "/**\n     * Method mostly needed by unit tests; calculates number of entries\n     * in tertiary buckets\n     *\n     * @return Number of entries in the tertiary hash area\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "tertiaryCount"
          }
        ],
        "similarity": 0.05730707218933481,
        "end_line": 527,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.tertiaryCount(): int"
      },
      {
        "start_line": 83,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "        public Builder maxNumberLength(final int maxNumLen) {\n            if (maxNumLen < 0) {\n                throw new IllegalArgumentException(\"Cannot set maxNumberLength to a negative value\");\n            }\n            this.maxNumLen = maxNumLen;\n            return this;\n        }",
        "distance": 2.5,
        "title": null,
        "name": "maxNumberLength",
        "documentation": "/**\n         * Sets the maximum number length (in chars or bytes, depending on input context).\n         * The default is 1000.\n         *\n         * @param maxNumLen the maximum number length (in chars or bytes, depending on input context)\n         *\n         * @return this builder\n         * @throws IllegalArgumentException if the maxNumLen is set to a negative value\n         */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "build"
          },
          {
            "start_node": "build",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "Builder"
          },
          {
            "start_node": "Builder",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "maxNumberLength"
          }
        ],
        "similarity": 0.05670455213264175,
        "end_line": 89,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNumberLength(int maxNumLen): Builder"
      },
      {
        "start_line": 1353,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected void _reportTooManyCollisions() throws StreamConstraintsException",
        "distance": 1.5,
        "title": null,
        "name": "_reportTooManyCollisions",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_reportTooManyCollisions"
          }
        ],
        "similarity": 0.056276169005795816,
        "end_line": 1353,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._reportTooManyCollisions(): void"
      },
      {
        "start_line": 118,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "        Builder(final int maxNestingDepth, final int maxNumLen, final int maxStringLen) {\n            this.maxNestingDepth = maxNestingDepth;\n            this.maxNumLen = maxNumLen;\n            this.maxStringLen = maxStringLen;\n        }",
        "distance": 2.25,
        "title": null,
        "name": "Builder",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "build"
          },
          {
            "start_node": "build",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "Builder"
          },
          {
            "start_node": "Builder",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "Builder"
          }
        ],
        "similarity": 0.055961291189805897,
        "end_line": 122,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.Builder(int maxNestingDepth, int maxNumLen, int maxStringLen)"
      },
      {
        "start_line": 350,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected static ByteQuadsCanonicalizer createRoot(int seed) {\n        return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, seed);\n    }",
        "distance": 1.5,
        "title": null,
        "name": "createRoot",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "createRoot"
          }
        ],
        "similarity": 0.05516344656832725,
        "end_line": 352,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(int seed): ByteQuadsCanonicalizer"
      },
      {
        "start_line": 279,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void validateStringLength(int length) throws StreamConstraintsException",
        "distance": 1.25,
        "title": null,
        "name": "validateStringLength",
        "documentation": "/**\n     * Convenience method that can be used to verify that a String\n     * of specified length does not exceed maximum specific by this\n     * constraints object: if it does, a\n     * {@link StreamConstraintsException}\n     * is thrown.\n     *\n     * @param length Length of string in input units\n     *\n     * @throws StreamConstraintsException If length exceeds maximum\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "validateStringLength"
          }
        ],
        "similarity": 0.05406473070436555,
        "end_line": 279,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.validateStringLength(int length): void"
      },
      {
        "start_line": 1069,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private int _resizeAndFindOffsetForAdd(int hash) throws StreamConstraintsException",
        "distance": 1.5,
        "title": null,
        "name": "_resizeAndFindOffsetForAdd",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_resizeAndFindOffsetForAdd"
          }
        ],
        "similarity": 0.05363311201590832,
        "end_line": 1069,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._resizeAndFindOffsetForAdd(int hash): int"
      },
      {
        "start_line": 535,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int spilloverCount() {\n        // difference between spillover end, start, divided by 4 (four ints per slot)\n        return (_spilloverEnd - _spilloverStart()) >> 2;\n    }",
        "distance": 1.5,
        "title": null,
        "name": "spilloverCount",
        "documentation": "/**\n     * Method mostly needed by unit tests; calculates number of entries\n     * in shared spill-over area\n     *\n     * @return Number of entries in the linear spill-over areay\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "spilloverCount"
          }
        ],
        "similarity": 0.05128085493254037,
        "end_line": 538,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.spilloverCount(): int"
      },
      {
        "start_line": 195,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public int getMaxStringLength() {\n        return _maxStringLen;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "getMaxStringLength",
        "documentation": "/**\n     * Accessor for maximum length of strings to decode.\n     * see {@link Builder#maxStringLength(int)} for details.\n     *\n     * @return Maximum allowed string length\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "getMaxStringLength"
          }
        ],
        "similarity": 0.051139690022227575,
        "end_line": 197,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.getMaxStringLength(): int"
      },
      {
        "start_line": 258,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, int seed,",
        "distance": 1.5,
        "title": null,
        "name": "ByteQuadsCanonicalizer",
        "documentation": "/**\n     * Constructor used when creating a child instance\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          }
        ],
        "similarity": 0.05048812155942655,
        "end_line": 258,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, int seed, TableInfo state, boolean intern, boolean failOnDoS)"
      },
      {
        "start_line": 124,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "        Builder(StreamReadConstraints src) {\n            maxNestingDepth = src._maxNestingDepth;\n            maxNumLen = src._maxNumLen;\n            maxStringLen = src._maxStringLen;\n        }",
        "distance": 2.5,
        "title": null,
        "name": "Builder",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "build"
          },
          {
            "start_node": "build",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "Builder"
          },
          {
            "start_node": "Builder",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "Builder"
          }
        ],
        "similarity": 0.04909049826090635,
        "end_line": 128,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.Builder(StreamReadConstraints src)"
      },
      {
        "start_line": 106,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "        public Builder maxStringLength(final int maxStringLen) {\n            if (maxStringLen < 0) {\n                throw new IllegalArgumentException(\"Cannot set maxStringLen to a negative value\");\n            }\n            this.maxStringLen = maxStringLen;\n            return this;\n        }",
        "distance": 2.5,
        "title": null,
        "name": "maxStringLength",
        "documentation": "/**\n         * Sets the maximum string length (in chars or bytes, depending on input context).\n         * The default is 5,000,000. This limit is not exact, the limit is applied when we increase\n         * internal buffer sizes and an exception will happen at sizes greater than this limit. Some\n         * text values that are a little bigger than the limit may be treated as valid but no text\n         * values with sizes less than or equal to this limit will be treated as invalid.\n         * <p>\n         *   Setting this value to lower than the {@link #maxNumberLength(int)} is not recommended.\n         * </p>\n         *\n         * @param maxStringLen the maximum string length (in chars or bytes, depending on input context)\n         *\n         * @return this builder\n         * @throws IllegalArgumentException if the maxStringLen is set to a negative value\n         */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "build"
          },
          {
            "start_node": "build",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "Builder"
          },
          {
            "start_node": "Builder",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "maxStringLength"
          }
        ],
        "similarity": 0.04789735494982569,
        "end_line": 112,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxStringLength(int maxStringLen): Builder"
      },
      {
        "start_line": 66,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "        public Builder maxNestingDepth(final int maxNestingDepth) {\n            if (maxNestingDepth < 0) {\n                throw new IllegalArgumentException(\"Cannot set maxNestingDepth to a negative value\");\n            }\n            this.maxNestingDepth = maxNestingDepth;\n            return this;\n        }",
        "distance": 2.5,
        "title": null,
        "name": "maxNestingDepth",
        "documentation": "/**\n         * Sets the maximum nesting depth. The depth is a count of objects and arrays that have not\n         * been closed, `{` and `[` respectively.\n         *\n         * @param maxNestingDepth the maximum depth\n         *\n         * @return this builder\n         * @throws IllegalArgumentException if the maxNestingDepth is set to a negative value\n         */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "build"
          },
          {
            "start_node": "build",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "Builder"
          },
          {
            "start_node": "Builder",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "maxNestingDepth"
          }
        ],
        "similarity": 0.047281589929599376,
        "end_line": 72,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNestingDepth(int maxNestingDepth): Builder"
      },
      {
        "start_line": 1253,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected BigDecimal _getBigDecimal() throws JsonParseException {\n        if (_numberBigDecimal != null) {\n            return _numberBigDecimal;\n        } else if (_numberString == null) {\n            throw new IllegalStateException(\"cannot get BigDecimal from current parser state\");\n        }\n        try {\n            // NOTE! Length of number string has been validated earlier\n            _numberBigDecimal = NumberInput.parseBigDecimal(\n                    _numberString,\n                    isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n        } catch (NumberFormatException nex) {\n            _wrapError(\"Malformed numeric value (\"+_longNumberDesc(_numberString)+\")\", nex);\n        }\n        _numberString = null;\n        return _numberBigDecimal;\n    }",
        "distance": 4.0,
        "title": null,
        "name": "_getBigDecimal",
        "documentation": "/**\n     * Internal accessor that needs to be used for accessing number value of type\n     * {@link BigDecimal} which -- as of 2.14 -- is typically lazily parsed.\n     *\n     * @since 2.14\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "addName"
          },
          {
            "start_node": "addName",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "parseEscapedName"
          },
          {
            "start_node": "parseEscapedName",
            "description": "calls method",
            "type": "RELATED",
            "end_node": "_throwUnquotedSpace"
          },
          {
            "start_node": "_throwUnquotedSpace",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ParserBase"
          },
          {
            "start_node": "ParserBase",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_getBigDecimal"
          }
        ],
        "similarity": 0.04577456538752227,
        "end_line": 1269,
        "signature": "com.fasterxml.jackson.core.base.ParserBase._getBigDecimal(): BigDecimal"
      },
      {
        "start_line": 130,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "        public StreamReadConstraints build() {\n            return new StreamReadConstraints(maxNestingDepth, maxNumLen, maxStringLen);\n        }",
        "distance": 2.0,
        "title": null,
        "name": "build",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "build"
          }
        ],
        "similarity": 0.04573560199400531,
        "end_line": 132,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.Builder.build(): StreamReadConstraints"
      },
      {
        "start_line": 1229,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected BigInteger _getBigInteger() throws JsonParseException {\n        if (_numberBigInt != null) {\n            return _numberBigInt;\n        } else if (_numberString == null) {\n            throw new IllegalStateException(\"cannot get BigInteger from current parser state\");\n        }\n        try {\n            // NOTE! Length of number string has been validated earlier\n            _numberBigInt = NumberInput.parseBigInteger(\n                    _numberString,\n                    isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n        } catch (NumberFormatException nex) {\n            _wrapError(\"Malformed numeric value (\"+_longNumberDesc(_numberString)+\")\", nex);\n        }\n        _numberString = null;\n        return _numberBigInt;\n    }",
        "distance": 4.0,
        "title": null,
        "name": "_getBigInteger",
        "documentation": "/**\n     * Internal accessor that needs to be used for accessing number value of type\n     * {@link BigInteger} which -- as of 2.14 -- is typically lazily parsed.\n     *\n     * @since 2.14\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "addName"
          },
          {
            "start_node": "addName",
            "description": "called by method",
            "type": "RELATED",
            "end_node": "parseEscapedName"
          },
          {
            "start_node": "parseEscapedName",
            "description": "calls method",
            "type": "RELATED",
            "end_node": "_throwUnquotedSpace"
          },
          {
            "start_node": "_throwUnquotedSpace",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ParserBase"
          },
          {
            "start_node": "ParserBase",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_getBigInteger"
          }
        ],
        "similarity": 0.04479980987754997,
        "end_line": 1245,
        "signature": "com.fasterxml.jackson.core.base.ParserBase._getBigInteger(): BigInteger"
      },
      {
        "start_line": 227,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private ByteQuadsCanonicalizer(int sz, int seed)",
        "distance": 1.5,
        "title": null,
        "name": "ByteQuadsCanonicalizer",
        "documentation": "/**\n     * Constructor used for creating per-{@code TokenStreamFactory} \"root\"\n     * symbol tables: ones used for merging and sharing common symbols\n     *\n     * @param sz Initial primary hash area size\n     * @param seed Random seed valued used to make it more difficult to cause\n     *   collisions (used for collision-based DoS attacks).\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          }
        ],
        "similarity": 0.04412387891362378,
        "end_line": 227,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer(int sz, int seed)"
      },
      {
        "start_line": 151,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public static StreamReadConstraints defaults() {\n        return DEFAULT;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "defaults",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "StreamReadConstraints"
          },
          {
            "start_node": "StreamReadConstraints",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "defaults"
          }
        ],
        "similarity": 0.043716659739432964,
        "end_line": 153,
        "signature": "com.fasterxml.jackson.core.StreamReadConstraints.defaults(): StreamReadConstraints"
      },
      {
        "start_line": 321,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public CharsToNameCanonicalizer makeChild(int flags) {\n        return new CharsToNameCanonicalizer(this, flags, _seed, _tableInfo.get());\n    }",
        "distance": 1.5,
        "title": null,
        "name": "makeChild",
        "documentation": "/**\n     * \"Factory\" method; will create a new child instance of this symbol\n     * table. It will be a copy-on-write instance, ie. it will only use\n     * read-only copy of parent's data, but when changes are needed, a\n     * copy will be created.\n     *<p>\n     * Note: while this method is synchronized, it is generally not\n     * safe to both use makeChild/mergeChild, AND to use instance\n     * actively. Instead, a separate 'root' instance should be used\n     * on which only makeChild/mergeChild are called, but instance itself\n     * is not used as a symbol table.\n     *\n     * @param flags Bit flags of active {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled.\n     *\n     * @return Actual canonicalizer instance that can be used by a parser\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in class",
            "type": "RELATED",
            "end_node": "CharsToNameCanonicalizer"
          },
          {
            "start_node": "CharsToNameCanonicalizer",
            "description": "contains method",
            "type": "RELATED",
            "end_node": "makeChild"
          }
        ],
        "similarity": 0.04346247510844967,
        "end_line": 323,
        "signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild(int flags): CharsToNameCanonicalizer"
      },
      {
        "start_line": 1240,
        "file_path": "playground/fasterxml__jackson-core/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private void rehash() throws StreamConstraintsException",
        "distance": 1.5,
        "title": null,
        "name": "rehash",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "release"
          },
          {
            "start_node": "release",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "ByteQuadsCanonicalizer"
          },
          {
            "start_node": "ByteQuadsCanonicalizer",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "rehash"
          }
        ],
        "similarity": 0.04344580717409181,
        "end_line": 1240,
        "signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.rehash(): void"
      }
    ],
    "classes": [],
    "issues": [
      {
        "content": "(note: somewhat related to #967)\r\n\r\nAlthough we have reasonable protections against direct parsing/decoding of both `BigDecimal` (as of 2.15 release candidates), regarding \"too long\" numbers (by textual representation), it appears there may be one performance problem that only occurs if:\r\n\r\n1. Incoming number is large JSON floating-point number, using scientific notation (i.e. not long textually); decoded internally as `BigDecimal` (or `double`, depending)\r\n2. Due to target type being `BigInteger`, there is coercion (BigDecimal.toBigInteger())\r\n\r\nbut if so, performance can deteriorate significantly.\r\nIf this turns out to be true, we may need to limit magnitude (scale) of floating-point numbers that are legal to convert; this could be configurable limit (either new value in `StreamReadConstraints`, or derivative of max number length?) or, possibly just hard-coded value.\r\n\n",
        "distance": 0,
        "title": "Prevent inefficient internal conversion from `BigDecimal` to `BigInteger` wrt ultra-large scale",
        "name": "root",
        "path": [],
        "issue_id": "root",
        "similarity": 2.0,
        "type": "issue"
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "968",
        "type": "issue",
        "content": "(note: somewhat related to #967)\r\n\r\nAlthough we have reasonable protections against direct parsing/decoding of both `BigDecimal` (as of 2.15 release candidates), regarding \"too long\" numbers (by textual representation), it appears there may be one performance problem that only occurs if:\r\n\r\n1. Incoming number is large JSON floating-point number, using scientific notation (i.e. not long textually); decoded internally as `BigDecimal` (or `double`, depending)\r\n2. Due to target type being `BigInteger`, there is coercion (BigDecimal.toBigInteger())\r\n\r\nbut if so, performance can deteriorate significantly.\r\nIf this turns out to be true, we may need to limit magnitude (scale) of floating-point numbers that are legal to convert; this could be configurable limit (either new value in `StreamReadConstraints`, or derivative of max number length?) or, possibly just hard-coded value.\r\n\n\n\nComment by cowtowncoder:\n/cc @pjfanning 2/2 of issues discussed separately.\n\nComment by pjfanning:\nIt might be useful to clone the BigDecimalParser code but have the methods use BigInteger instead. This would avoid creating a BigDecimal and converting that to a BigInteger. Small duplication of code but it should be more performant.\n\nComment by cowtowncoder:\n@pjfanning Not sure it'd work since input uses engineering notation... is that legal for `BigInteger`?\n\nComment by pjfanning:\nThe FastDoubleParser lib won't accept '1e20000000'. Do we need to support this value for BigInteger or do we need to ask the maintainer of FastDoubleParser lib to support this as a valid BigInteger?\r\n\r\n`new BigInteger(\"1e20000000\")` also fails.\r\n\r\nAre we better off to modify jackson-core to fail if an Integer has 'e' notation?\n\nComment by cowtowncoder:\n@pjfanning It's little bit different than that: if `e` notation is used, we will always get `JsonToken.VALUE_NUMBER_FLOAT`, not `VALUE_NUMBER_INT`. So we do not really (try to) parse `BigInteger` from E notation ever; it will go via `BigDecimal`. And I don't think we want to try to change this because it then gets into complications of variations (whether engineering value is integral or not).\r\n\r\nBut it seems to me that since the problem is conversion of `BigDecimal` into `BigInteger` we could impose limit on maximum `scale` -- from little I tried, it seemed that that's the key.\r\nWhether to make maximum scale magnitude (I am assuming both `20000000` and `-20000000` are problematic although haven't tested) configurable or just hard-coded is a question.\r\n\r\n\n\nComment by cowtowncoder:\nOne interesting note: I can only reproduce this with 2.15 -- 2.14 and 3.0 fail with different error; probably value overflow (I think given value exceeds `Double` range). That's not a real solution of course but fwtw specific performance problem is N/A for pre-2.15 I think.\r\n\n\nComment by pjfanning:\nWould it make sense to add a StreamReadConstraints setting for max absolute BigInt exponent? We can add a sensible limit but lets people, who know the risks and need to support big exponents, go ahead and change the config to suit themselves. \n\nComment by cowtowncoder:\n@pjfanning That sounds reasonable. One question I have is whether it should only add to this conversion (BigDec->BigInt) or `BigDec` in general. It seems like it's not necessarily dangerous for general BigDecimal.\r\n\r\nAnd the other angle is that with scale of 1000 you get numeric string of ~1000 characters so in a way we could actually simply use existing value `maxNumberLength()` for conversion case: especially since we do not allow engineering notation for integer anyway?\r\n\n\nComment by pjfanning:\nI would suggest just adding it for (big) ints.\n\nComment by cowtowncoder:\n@pjfanning Makes sense. But I am still wondering if a new limit is even needed. Given that this is sort of an edge case (from floating-point number to integer), and since problematic scale magnitude is orders of magnitude bigger than maximum number length... that is,\r\n\r\n    1e999999\r\n\r\nis 1 meg string when written out as \"plain\" `BigInteger`, and we by default only allow number strings of 1000 characters, we could consider one of:\r\n\r\n1. Use a limit that is some multiple of maximum-number-length (10x ?)\r\n2. Use a fixed but higher limit\r\n\r\nsince users can work around the issue of big scale by using `BigDecimal` target and handle post-processing on their own, if limit becomes onerous.\r\n\r\nIt is not that I couldn't add a new limit constant, but there is some maintenance overhead.\r\n\r\nAlso: I think that validation of scale limit, whatever it is, could be done via `StreamReadConstraints`, making it bit easier for us to add explicit override if needed.\r\n\r\nI guess I can cobble up a PR to show what I am thinking, as PoC.\r\n\n\nComment by pjfanning:\n@plokhotnyuk - feel free to ignore this but we ran into an edge case where deserialization to BigInteger can be very slow if the input has a large exponent (eg '1e20000000'). jackson-core parses numbers like this as BigDecimals and then uses the `.toBigInteger` method on BigDecimal because `new BigInteger(str)` can't parse numbers with e notation. It is the `.toBigInteger` method on BigDecimal that is very slow.\r\n\r\nYou have shown great diligence about these problematic inputs in the past. I'm just wondering if you have any thoughts on the best way to handle them.",
        "source_code": null,
        "distance": 0.25,
        "title": "Prevent inefficient internal conversion from `BigDecimal` to `BigInteger` wrt ultra-large scale",
        "name": "issue#968",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#968"
          }
        ],
        "similarity": 0.7773124129062213,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "967",
        "type": "issue",
        "content": "Although there were reasons to expect `BigDecimalParser` could help handling of very large numbers -- and was consequently added for 2.14 via #814 --  there are concerns that there are cases where its performance is sub-standard.\r\n\r\nIn particular there are concerns with use of large exponents (scientific-notation) which lead to \"big\" numbers but ones that are compact enough (wrt textual representation) not to trigger \"too big number\" guardrails but lead to poor performance.\r\nIf and when regular JDK `BigDecimal` parser does not have similar issues, we may need to remove usage.\r\n\r\nA test case exists to show the issue but I will not include it here: contact me over mailing list(s) for details if interested.\r\n\n\n\nComment by cowtowncoder:\n/cc @pjfanning This is one of 2 that we had discussion about\n\nComment by pjfanning:\nMight be useful to backport this to 2.14.\n\nComment by cowtowncoder:\n@pjfanning I guess if it's safe enough, my only concern would be about breaking something. Then again, functionality itself is probably rarely actually used in real-world production (fwtw :) ).",
        "source_code": null,
        "distance": 0.25,
        "title": "Address performance issue with `BigDecimalParser`",
        "name": "issue#967",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#967"
          }
        ],
        "similarity": 0.6674708173182129,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "971",
        "type": "issue",
        "content": "* seems like there are edge cases where BigDecimal conversion to BigInteger is very slow\r\n* this change reduces the chance that a BigInteger is first parsed as a BigDecimal\r\n* doesn't completely disallow this path - just tries to avoid it\r\n* causes #968 failing test to actually fail fast instead of timing out\n\n\nComment by cowtowncoder:\n@pjfanning Would be happy to merge this (after #969 I think), but is this still WIP?\n\nComment by pjfanning:\n@cowtowncoder this breaks the parsing of 'e' notation BigInts - I think we'll need to address https://github.com/FasterXML/jackson-core/issues/968#issuecomment-1496648960 instead",
        "source_code": null,
        "distance": 0.5,
        "title": "[DRAFT] try to reduce edge cases where BigInts are parsed as BigDecimals first",
        "name": "pr#971",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#968"
          },
          {
            "start_node": "issue#968",
            "description": "referenced by issue",
            "type": "RELATED",
            "end_node": "pr#971"
          }
        ],
        "similarity": 0.6362289796111035,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "814",
        "type": "issue",
        "content": "Maybe something for jackson 2.15. Relates to #813\r\n\r\nString to BigInteger support is currently done using `new BigInteger(str)`.\r\n\r\nBigDecimalParser has some performance related code for handling numbers with many digits. #813 suggests that we might be able to get improvements in performance and error handling by using some ideas from jsoniter_scala. BigInteger could probably benefit from these too.\r\n\r\n@plokhotnyuk fyi\n\n\nComment by pjfanning:\n@cowtowncoder could we consider #826 as a late breaking change for Jackson 2.14.0?\n\nComment by cowtowncoder:\n@pjfanning Considering everything else, I think that's safe enough so merged PR to get this improvement in.\r\nI do need to stop merging things of course, but this seemed like non-problematic thing even if last minute.\r\n",
        "source_code": null,
        "distance": 0.5,
        "title": "Use `BigDecimalParser` for BigInteger parsing very long numbers",
        "name": "issue#814",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#967"
          },
          {
            "start_node": "issue#967",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#814"
          }
        ],
        "similarity": 0.6180461586637828,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "825",
        "type": "issue",
        "content": "Similar to the FastDoubleParser support added in Jackson 2.14. FastBigDecimalParser would be enabled optionally.\r\nI have some code based on https://github.com/plokhotnyuk/jsoniter-scala\r\n\r\nhttps://github.com/pjfanning/jackson-number-parse-bench/blob/main/src/main/java/org/example/jackson/bench/FastBigDecimalParser.java\r\n\r\nMaybe something for Jackson 2.15.\r\n\r\nRelates to #814 and #815\r\n\r\nThe current benchmark for FastBigDecimalParser suggests it is better for numbers with lots of digits (and still a little better for numbers with a small number of digits).\r\n\r\nFor BigInteger parsing, I got:\r\n```\r\nBenchmark                                 Mode  Cnt       Score       Error  Units\r\nBigIntegerParserBench.bigDec1000         thrpt    5   35195.566 \u00b1  2758.478  ops/s\r\nBigIntegerParserBench.bigDec10000        thrpt    5    1232.178 \u00b1   221.485  ops/s\r\nBigIntegerParserBench.bigDec1000000      thrpt    5       0.396 \u00b1     0.031  ops/s\r\nBigIntegerParserBench.bigInt1000         thrpt    5   48308.680 \u00b1   671.193  ops/s\r\nBigIntegerParserBench.bigInt10000        thrpt    5     617.721 \u00b1    14.032  ops/s\r\nBigIntegerParserBench.bigInt1000000      thrpt    5       0.063 \u00b1     0.002  ops/s\r\nBigIntegerParserBench.fastBigDec1000     thrpt    5  138409.766 \u00b1 10781.948  ops/s\r\nBigIntegerParserBench.fastBigDec1000000  thrpt    5       2.342 \u00b1     0.019  ops/s\r\n```\r\n\n\n\nComment by pjfanning:\nA duplicate of #813",
        "source_code": null,
        "distance": 0.75,
        "title": "Add FastBigDecimalParser support",
        "name": "issue#825",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#967"
          },
          {
            "start_node": "issue#967",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#814"
          },
          {
            "start_node": "issue#814",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#825"
          }
        ],
        "similarity": 0.44695257842065644,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "813",
        "type": "issue",
        "content": "Maybe something for jackson v2.15. Idea is to enhance the existing BigDecimalParser class.\r\n\r\n@plokhotnyuk suggested looking at https://github.com/plokhotnyuk/jsoniter-scala/blob/3b062f77f566d64b68b765ceed3738ad93d475dc/jsoniter-scala-core/native/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala#L1647-L1874\r\n\r\nHe provides some analysis at https://stackoverflow.com/a/58777171/228843\r\n\r\nHe provided some benchmarks at https://github.com/FasterXML/jackson-module-scala/issues/572#issuecomment-1253781915\r\n\r\n\n\n\nComment by pjfanning:\nI have a prototype at https://github.com/pjfanning/jackson-number-parse-bench/blob/main/src/main/java/org/example/jackson/bench/FastBigDecimalParser.java\r\n\r\n* it is a little faster than the existing parser\r\n* it still needs more testing and some more error handling. It may be possible to get a little bit better perf from it.\r\n* it still works by taking a full String or char[] with the number as opposed to working directly on the input data stream like the jsoniter-scala does - so it won't match jsoniter-scala performance.\n\nComment by cowtowncoder:\nI think it's fine to require copy as `char[]` or `String`; although I guess some parser backends could conceivably pass offsets to internal `char[]` quite easily. But it does not seem like a humongous overhead regardless; at most it's good to maybe avoid throw-away `String` instances (which I think is doable).\n\nComment by pjfanning:\nThe current benchmark for FastBigDecimalParser suggests it is better for numbers with lots of digits (and still a little better for numbers with a small number of digits).\r\n\r\nFor BigInteger parsing, I got:\r\n\r\n```\r\nBenchmark                                 Mode  Cnt       Score       Error  Units\r\nBigIntegerParserBench.bigDec1000         thrpt    5   35195.566 \u00b1  2758.478  ops/s\r\nBigIntegerParserBench.bigDec10000        thrpt    5    1232.178 \u00b1   221.485  ops/s\r\nBigIntegerParserBench.bigDec1000000      thrpt    5       0.396 \u00b1     0.031  ops/s\r\nBigIntegerParserBench.bigInt1000         thrpt    5   48308.680 \u00b1   671.193  ops/s\r\nBigIntegerParserBench.bigInt10000        thrpt    5     617.721 \u00b1    14.032  ops/s\r\nBigIntegerParserBench.bigInt1000000      thrpt    5       0.063 \u00b1     0.002  ops/s\r\nBigIntegerParserBench.fastBigDec1000     thrpt    5  138409.766 \u00b1 10781.948  ops/s\r\nBigIntegerParserBench.fastBigDec1000000  thrpt    5       2.342 \u00b1     0.019  ops/s\r\n```\n\nComment by pjfanning:\nI'll close this as we have gone down the route of using https://github.com/wrandelshofer/FastDoubleParser\r\n\r\njsoniter-scala is actually faster but it parses the number as it streams the bytes/chars instead of building up strings and parsing those as numbers like Jackson does. Changing Jackson do this would be quite some refactor.\r\n\n\nComment by cowtowncoder:\nAgreed, FDP seems to work for now.",
        "source_code": null,
        "distance": 1.0,
        "title": "look at uptaking some of the performance and fast-fail BigDecimal parser code from jsoniter-scala",
        "name": "issue#813",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#967"
          },
          {
            "start_node": "issue#967",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#814"
          },
          {
            "start_node": "issue#814",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#813"
          }
        ],
        "similarity": 0.4108197514348695,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "969",
        "type": "issue",
        "content": "So, looks like there is important performance difference between `BigDecimal.movePointRight()` and `BigDecimal.scaleByPowerOfThen()` -- latter avoiding issues with former.\r\n\n\n\nComment by cowtowncoder:\nStill don't know how to properly rebase PRs; will close, re-create",
        "source_code": null,
        "distance": 1.0,
        "title": "Address issue found wrt #967 by improving BigDecimalParser",
        "name": "pr#969",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#968"
          },
          {
            "start_node": "issue#968",
            "description": "referenced by issue",
            "type": "RELATED",
            "end_node": "pr#971"
          },
          {
            "start_node": "pr#971",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "pr#969"
          }
        ],
        "similarity": 0.38175170730553665,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "826",
        "type": "issue",
        "content": "Parsing numbers in Java has poor performance characteristics. Parse time increases exponentially as the number of digits increases.\r\nUsing BigDecimalParser to parse BigIntegers has better performance when there are a lot of digits. It is slower for more usual numbers. From benchmarking, BigDecimalParser is more performant when you have approx 1250 digits and as you head to 10k, 100k digits, it is much faster. BigDecimalParser is not O(n) but it is better than `new BigInteger(string)`. \r\n\r\nRelates to #814\r\n\n\n\nComment by cowtowncoder:\nInteresting! Ok, I trust that you have benchmarked this in addition to it being found a useful optimization in other libraries.\r\nWill merge to go on 2.14.0 since it seems like a low-risk improvement.\n\nComment by pjfanning:\n@cowtowncoder I benchmarked using https://github.com/pjfanning/jackson-number-parse-bench\r\n\r\nOn my laptop, I got these results\r\n```\r\nBenchmark                                 Mode  Cnt       Score       Error  Units\r\nBigIntegerParserBench.bigDec1000         thrpt    5   35195.566 \u00b1  2758.478  ops/s\r\nBigIntegerParserBench.bigDec10000        thrpt    5    1232.178 \u00b1   221.485  ops/s\r\nBigIntegerParserBench.bigDec1000000      thrpt    5       0.396 \u00b1     0.031  ops/s\r\nBigIntegerParserBench.bigInt1000         thrpt    5   48308.680 \u00b1   671.193  ops/s\r\nBigIntegerParserBench.bigInt10000        thrpt    5     617.721 \u00b1    14.032  ops/s\r\nBigIntegerParserBench.bigInt1000000      thrpt    5       0.063 \u00b1     0.002  ops/s\r\nBigIntegerParserBench.fastBigDec1000     thrpt    5  138409.766 \u00b1 10781.948  ops/s\r\nBigIntegerParserBench.fastBigDec1000000  thrpt    5       2.342 \u00b1     0.019  ops/s\r\n```\r\n\r\n* the higher ops/s is the better\r\n* 1000 in benchmark means testing with integers with 1000 chars, 10000 means 10000 chars, etc.\r\n* fastBigDec benchmarks use an experimental new parser that is not ready for Jackson 2.14\r\n* bigDec benchmarks use `BigDecimalParser`\r\n* bigInt benchmarks use `new BigInteger(string)`\r\n\n\nComment by cowtowncoder:\n@pjfanning Cool. Would it make sense to add simple results on README (everyone can of course run it locally too).",
        "source_code": null,
        "distance": 1.0,
        "title": "improve performance with parsing bigints with lots of digits",
        "name": "pr#826",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#967"
          },
          {
            "start_node": "issue#967",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#814"
          },
          {
            "start_node": "issue#814",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "pr#826"
          }
        ],
        "similarity": 0.37085596499201257,
        "end_line": null,
        "signature": null
      }
    ]
  },
  "artifact_stats": {
    "skipped_due_to_time": 6,
    "valid_related_items": 47
  }
}