{"org": "fasterxml", "repo": "jackson-core", "number": "980", "fix_patch": "--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n@@ -1234,9 +1234,14 @@\n         }\n         try {\n             // NOTE! Length of number string has been validated earlier\n-            _numberBigInt = NumberInput.parseBigInteger(\n-                    _numberString,\n-                    isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n+            if (_numberBigDecimal != null) {\n+                _streamReadConstraints.validateBigIntegerScale(Math.abs(_numberBigDecimal.scale()));\n+                _numberBigInt = _numberBigDecimal.toBigInteger();\n+            } else {\n+                _numberBigInt = NumberInput.parseBigInteger(\n+                        _numberString,\n+                        isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n+            }\n         } catch (NumberFormatException nex) {\n             _wrapError(\"Malformed numeric value (\"+_longNumberDesc(_numberString)+\")\", nex);\n         }\n\n--- a/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java\n+++ b/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java\n@@ -257,7 +257,17 @@\n      *\n      * @throws StreamConstraintsException If length exceeds maximum\n      */\n-    public void validateIntegerLength(int length) throws StreamConstraintsException\n+    public void validateIntegerLength(int length) throws StreamConstraintsException {\n+        if (length > _maxNumLen) {\n+            throw new StreamConstraintsException(\"Number length (\" + length + \") exceeds the maximum allowed (\" + _maxNumLen + \")\");\n+        }\n+    }\n+\n+    public void validateBigIntegerScale(int scale) throws StreamConstraintsException {\n+        if (scale > _maxNumLen * 10) {\n+            throw new StreamConstraintsException(\"BigDecimal scale (\" + scale + \") exceeds the maximum allowed (\" + (_maxNumLen * 10) + \") for BigInteger conversion\");\n+        }\n+    }\n     {\n         if (length > _maxNumLen) {\n             throw new StreamConstraintsException(String.format(\"Number length (%d) exceeds the maximum length (%d)\",\n"}
