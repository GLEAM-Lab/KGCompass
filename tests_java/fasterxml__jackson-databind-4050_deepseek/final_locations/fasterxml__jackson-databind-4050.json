{
  "related_entities": {
    "methods": [
      {
        "start_line": 3514,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public <T extends JsonNode> T valueToTree(Object fromValue)",
        "distance": 1.25,
        "title": null,
        "name": "valueToTree",
        "documentation": "/**\n     * Method that is reverse of {@link #treeToValue}: it\n     * will convert given Java value (usually bean) into its\n     * equivalent Tree mode {@link JsonNode} representation.\n     * Functionally similar to serializing value into token stream and parsing that\n     * stream back as tree model node,\n     * but more efficient as {@link TokenBuffer} is used to contain the intermediate\n     * representation instead of fully serialized contents.\n     *<p>\n     * NOTE: while results are usually identical to that of serialization followed\n     * by deserialization, this is not always the case. In some cases serialization\n     * into intermediate representation will retain encapsulation of things like\n     * raw value ({@link com.fasterxml.jackson.databind.util.RawValue}) or basic\n     * node identity ({@link JsonNode}). If so, result is a valid tree, but values\n     * are not re-constructed through actual format representation. So if transformation\n     * requires actual materialization of encoded content,\n     * it will be necessary to do actual serialization.\n     *\n     * @param <T> Actual node type; usually either basic {@link JsonNode} or\n     *  {@link com.fasterxml.jackson.databind.node.ObjectNode}\n     * @param fromValue Java value to convert\n     *\n     * @return (non-null) Root node of the resulting content tree: in case of\n     *   {@code null} value node for which {@link JsonNode#isNull()} returns {@code true}.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "valueToTree"
          }
        ],
        "similarity": 0.09473746587355182,
        "end_line": 3514,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.valueToTree(Object fromValue): T"
      },
      {
        "start_line": 2511,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper configure(MapperFeature f, boolean state) {\n        _serializationConfig = state ?\n                _serializationConfig.with(f) : _serializationConfig.without(f);\n        _deserializationConfig = state ?\n                _deserializationConfig.with(f) : _deserializationConfig.without(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "configure",
        "documentation": "/**\n     * @deprecated Since 2.13 use {@code JsonMapper.builder().configure(...)}\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "configure"
          }
        ],
        "similarity": 0.08669891516049566,
        "end_line": 2517,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(MapperFeature f, boolean state): ObjectMapper"
      },
      {
        "start_line": 2750,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper configure(DatatypeFeature f, boolean state) {\n        if (state) {\n            _deserializationConfig = _deserializationConfig.with(f);\n            _serializationConfig = _serializationConfig.with(f);\n        } else {\n            _deserializationConfig = _deserializationConfig.without(f);\n            _serializationConfig = _serializationConfig.without(f);\n        }\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "configure",
        "documentation": "/**\n     * Method for changing state of an on/off datatype-specific feature for\n     * this object mapper.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#configure(DatatypeFeature, boolean)} instead.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "configure"
          }
        ],
        "similarity": 0.08255280202967319,
        "end_line": 2759,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(DatatypeFeature f, boolean state): ObjectMapper"
      },
      {
        "start_line": 2252,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setNodeFactory(JsonNodeFactory f) {\n        _deserializationConfig = _deserializationConfig.with(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setNodeFactory",
        "documentation": "/**\n     * Method for specifying {@link JsonNodeFactory} to use for\n     * constructing root level tree nodes (via method\n     * {@link #createObjectNode}\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setNodeFactory"
          }
        ],
        "similarity": 0.0813715175289497,
        "end_line": 2255,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory(JsonNodeFactory f): ObjectMapper"
      },
      {
        "start_line": 575,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper() {\n        this(null, null, null);\n    }",
        "distance": 1.0,
        "title": null,
        "name": "ObjectMapper",
        "documentation": "/**\n     * Default constructor, which will construct the default\n     * {@link JsonFactory} as necessary, use\n     * {@link SerializerProvider} as its\n     * {@link SerializerProvider}, and\n     * {@link BeanSerializerFactory} as its\n     * {@link SerializerFactory}.\n     * This means that it\n     * can serialize all standard JDK types, as well as regular\n     * Java Beans (based on method names and Jackson-specific annotations),\n     * but does not support JAXB annotations.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          }
        ],
        "similarity": 0.08108325769580756,
        "end_line": 577,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper()"
      },
      {
        "start_line": 2523,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper enable(MapperFeature... f) {\n        _deserializationConfig = _deserializationConfig.with(f);\n        _serializationConfig = _serializationConfig.with(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "enable",
        "documentation": "/**\n     * @deprecated Since 2.13 use {@code JsonMapper.builder().enable(...)}\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "enable"
          }
        ],
        "similarity": 0.0769597824424146,
        "end_line": 2527,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(MapperFeature f): ObjectMapper"
      },
      {
        "start_line": 2533,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper disable(MapperFeature... f) {\n        _deserializationConfig = _deserializationConfig.without(f);\n        _serializationConfig = _serializationConfig.without(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "disable",
        "documentation": "/**\n     * @deprecated Since 2.13 use {@code JsonMapper.builder().disable(...)}\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "disable"
          }
        ],
        "similarity": 0.07593102289132092,
        "end_line": 2537,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(MapperFeature f): ObjectMapper"
      },
      {
        "start_line": 4473,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public <T> T convertValue(Object fromValue, Class<T> toValueType)",
        "distance": 1.25,
        "title": null,
        "name": "convertValue",
        "documentation": "/**\n     * Convenience method for doing two-step conversion from given value, into\n     * instance of given value type, by writing value into temporary buffer\n     * and reading from the buffer into specified target type.\n     *<p>\n     * This method is functionally similar to first\n     * serializing given value into JSON, and then binding JSON data into value\n     * of given type, but should be more efficient since full serialization does\n     * not (need to) occur.\n     * However, same converters (serializers, deserializers) will be used as for\n     * data binding, meaning same object mapper configuration works.\n     *<p>\n     * Note that behavior changed slightly between Jackson 2.9 and 2.10 so that\n     * whereas earlier some optimizations were used to avoid write/read cycle\n     * in case input was of target type, from 2.10 onwards full processing is\n     * always performed. See\n     * <a href=\"https://github.com/FasterXML/jackson-databind/issues/2220\">databind#2220</a>\n     * for full details of the change.\n     *<p>\n     * Further note that it is possible that in some cases behavior does differ\n     * from full serialize-then-deserialize cycle: in most case differences are\n     * unintentional (that is, flaws to fix) and should be reported, but\n     * the behavior is not guaranteed to be 100% the same:\n     * the goal is to allow efficient value conversions for structurally\n     * compatible Objects, according to standard Jackson configuration.\n     *<p>\n     * Finally, this functionality is not designed to support \"advanced\" use\n     * cases, such as conversion of polymorphic values, or cases where Object Identity\n     * is used.\n     *\n     * @throws IllegalArgumentException If conversion fails due to incompatible type;\n     *    if so, root cause will contain underlying checked exception data binding\n     *    functionality threw\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "convertValue"
          }
        ],
        "similarity": 0.0747536672732002,
        "end_line": 4473,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(Object fromValue, Class toValueType): T"
      },
      {
        "start_line": 3408,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public <T> T treeToValue(TreeNode n, Class<T> valueType)",
        "distance": 1.25,
        "title": null,
        "name": "treeToValue",
        "documentation": "/**\n     * Convenience conversion method that will bind data given JSON tree\n     * contains into specific value (usually bean) type.\n     *<p>\n     * Functionally equivalent to:\n     *<pre>\n     *   objectMapper.convertValue(n, valueClass);\n     *</pre>\n     *<p>\n     * Note: inclusion of {@code throws JsonProcessingException} is not accidental\n     * since while there can be no input decoding problems, it is possible that content\n     * does not match target type: in such case various {@link DatabindException}s\n     * are possible. In addition {@link IllegalArgumentException} is possible in some\n     * cases, depending on whether {@link DeserializationFeature#WRAP_EXCEPTIONS}\n     * is enabled or not.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "treeToValue"
          }
        ],
        "similarity": 0.07339522054373096,
        "end_line": 3408,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.treeToValue(TreeNode n, Class valueType): T"
      },
      {
        "start_line": 2564,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper configure(SerializationFeature f, boolean state) {\n        _serializationConfig = state ?\n                _serializationConfig.with(f) : _serializationConfig.without(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "configure",
        "documentation": "/**\n     * Method for changing state of an on/off serialization feature for\n     * this object mapper.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#configure(SerializationFeature, boolean)}.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "configure"
          }
        ],
        "similarity": 0.07328420409283391,
        "end_line": 2568,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(SerializationFeature f, boolean state): ObjectMapper"
      },
      {
        "start_line": 1450,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setSerializerFactory(SerializerFactory f) {\n        _serializerFactory = f;\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setSerializerFactory",
        "documentation": "/**\n     * Method for setting specific {@link SerializerFactory} to use\n     * for constructing (bean) serializers.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setSerializerFactory"
          }
        ],
        "similarity": 0.07293964601019212,
        "end_line": 1453,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory(SerializerFactory f): ObjectMapper"
      },
      {
        "start_line": 2661,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper configure(DeserializationFeature f, boolean state) {\n        _deserializationConfig = state ?\n                _deserializationConfig.with(f) : _deserializationConfig.without(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "configure",
        "documentation": "/**\n     * Method for changing state of an on/off deserialization feature for\n     * this object mapper.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#configure(DeserializationFeature, boolean)}.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "configure"
          }
        ],
        "similarity": 0.07041723067343612,
        "end_line": 2665,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(DeserializationFeature f, boolean state): ObjectMapper"
      },
      {
        "start_line": 2108,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper disableDefaultTyping() {\n        return setDefaultTyping(null);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "disableDefaultTyping",
        "documentation": "/**\n     * @deprecated Since 2.10 use {@link #deactivateDefaultTyping} instead\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "disableDefaultTyping"
          }
        ],
        "similarity": 0.07008084270542028,
        "end_line": 2110,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping(): ObjectMapper"
      },
      {
        "start_line": 4772,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected final void _configAndWriteValue(JsonGenerator g, Object value) throws IOException {\n        getSerializationConfig().initialize(g);\n        _writeValueAndClose(g, value);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "_configAndWriteValue",
        "documentation": "/**\n     * @deprecated Since 2.11.2 Use {@link #_writeValueAndClose} instead\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_configAndWriteValue"
          }
        ],
        "similarity": 0.0700370716190925,
        "end_line": 4775,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(JsonGenerator g, Object value): void"
      },
      {
        "start_line": 2368,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setConfig(SerializationConfig config) {\n        _assertNotNull(\"config\", config);\n        _serializationConfig = config;\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setConfig",
        "documentation": "/**\n     * Method that allows overriding of the underlying {@link SerializationConfig}\n     * object, which contains serialization-specific configuration settings.\n     * It is added as a fallback method that may be used if no other configuration\n     * modifier method works: it should not be used if there are alternatives,\n     * and its use is generally discouraged.\n     *<p>\n     * <b>NOTE</b>: only use this method if you know what you are doing -- it allows\n     * by-passing some of checks applied to other configuration methods.\n     * Also keep in mind that as with all configuration of {@link ObjectMapper},\n     * this is only thread-safe if done before calling any serialization methods.\n     *\n     * @since 2.4\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setConfig"
          }
        ],
        "similarity": 0.06959514237254599,
        "end_line": 2372,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setConfig(SerializationConfig config): ObjectMapper"
      },
      {
        "start_line": 2678,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper enable(DeserializationFeature feature) {\n        _deserializationConfig = _deserializationConfig.with(feature);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "enable",
        "documentation": "/**\n     * Method for enabling specified {@link DeserializationConfig} features.\n     * Modifies and returns this instance; no new object is created.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#enable(DeserializationFeature...)}.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "enable"
          }
        ],
        "similarity": 0.06927712834720748,
        "end_line": 2681,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(DeserializationFeature feature): ObjectMapper"
      },
      {
        "start_line": 4186,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectWriter writerWithType(TypeReference<?> rootType) {\n        return _newWriter(getSerializationConfig(),\n                // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\n                ((rootType == null) ? null : _typeFactory.constructType(rootType)),\n                /*PrettyPrinter*/null);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "writerWithType",
        "documentation": "/**\n     * @deprecated Since 2.5, use {@link #writerFor(TypeReference)} instead\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "writerWithType"
          }
        ],
        "similarity": 0.06851985060938216,
        "end_line": 4191,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(TypeReference rootType): ObjectWriter"
      },
      {
        "start_line": 1140,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public final void defaultSerializeValue(Object value, JsonGenerator gen) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "defaultSerializeValue",
        "documentation": "/**\n     * Convenience method that will serialize given value (which can be\n     * null) using standard serializer locating functionality. It can\n     * be called for all values including field and Map values, but usually\n     * field values are best handled calling\n     * {@link #defaultSerializeField} instead.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "SerializerProvider"
          },
          {
            "start_node": "SerializerProvider",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "defaultSerializeValue"
          }
        ],
        "similarity": 0.0684875642379605,
        "end_line": 1140,
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(Object value, JsonGenerator gen): void"
      },
      {
        "start_line": 2041,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper deactivateDefaultTyping() {\n        return setDefaultTyping(null);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "deactivateDefaultTyping",
        "documentation": "/**\n     * Method for disabling automatic inclusion of type information; if so, only\n     * explicitly annotated types (ones with\n     * {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) will have\n     * additional embedded type information.\n     *\n     * @since 2.10\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "deactivateDefaultTyping"
          }
        ],
        "similarity": 0.06802943946308616,
        "end_line": 2043,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping(): ObjectMapper"
      },
      {
        "start_line": 2581,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper enable(SerializationFeature f) {\n        _serializationConfig = _serializationConfig.with(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "enable",
        "documentation": "/**\n     * Method for enabling specified {@link DeserializationConfig} feature.\n     * Modifies and returns this instance; no new object is created.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#enable(SerializationFeature...)}.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "enable"
          }
        ],
        "similarity": 0.06718568976816831,
        "end_line": 2584,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(SerializationFeature f): ObjectMapper"
      },
      {
        "start_line": 2283,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper clearProblemHandlers() {\n        _deserializationConfig = _deserializationConfig.withNoProblemHandlers();\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "clearProblemHandlers",
        "documentation": "/**\n     * Method for removing all registered {@link DeserializationProblemHandler}s\n     * instances from this mapper.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "clearProblemHandlers"
          }
        ],
        "similarity": 0.0668974356229536,
        "end_line": 2286,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers(): ObjectMapper"
      },
      {
        "start_line": 2473,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setTimeZone(TimeZone tz) {\n        _deserializationConfig = _deserializationConfig.with(tz);\n        _serializationConfig = _serializationConfig.with(tz);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setTimeZone",
        "documentation": "/**\n     * Method for overriding default TimeZone to use for formatting.\n     * Default value used is UTC (NOT default TimeZone of JVM).\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setTimeZone"
          }
        ],
        "similarity": 0.06682594317643778,
        "end_line": 2477,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setTimeZone(TimeZone tz): ObjectMapper"
      },
      {
        "start_line": 4078,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectWriter writerFor(TypeReference<?> rootType) {\n        return _newWriter(getSerializationConfig(),\n                ((rootType == null) ? null : _typeFactory.constructType(rootType)),\n                /*PrettyPrinter*/null);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "writerFor",
        "documentation": "/**\n     * Factory method for constructing {@link ObjectWriter} that will\n     * serialize objects using specified root type, instead of actual\n     * runtime type of value. Type must be a super-type of runtime type.\n     *<p>\n     * Main reason for using this method is performance, as writer is able\n     * to pre-fetch serializer to use before write, and if writer is used\n     * more than once this avoids addition per-value serializer lookups.\n     *\n     * @since 2.5\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "writerFor"
          }
        ],
        "similarity": 0.0664585534793656,
        "end_line": 4082,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerFor(TypeReference rootType): ObjectWriter"
      },
      {
        "start_line": 2302,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setConfig(DeserializationConfig config) {\n        _assertNotNull(\"config\", config);\n        _deserializationConfig = config;\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setConfig",
        "documentation": "/**\n     * Method that allows overriding of the underlying {@link DeserializationConfig}\n     * object.\n     * It is added as a fallback method that may be used if no other configuration\n     * modifier method works: it should not be used if there are alternatives,\n     * and its use is generally discouraged.\n     *<p>\n     * <b>NOTE</b>: only use this method if you know what you are doing -- it allows\n     * by-passing some of checks applied to other configuration methods.\n     * Also keep in mind that as with all configuration of {@link ObjectMapper},\n     * this is only thread-safe if done before calling any deserialization methods.\n     *\n     * @since 2.4\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setConfig"
          }
        ],
        "similarity": 0.0663235825184839,
        "end_line": 2306,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setConfig(DeserializationConfig config): ObjectMapper"
      },
      {
        "start_line": 1185,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public final void defaultSerializeDateValue(long timestamp, JsonGenerator gen)",
        "distance": 1.25,
        "title": null,
        "name": "defaultSerializeDateValue",
        "documentation": "/**\n     * Method that will handle serialization of Date(-like) values, using\n     * {@link SerializationConfig} settings to determine expected serialization\n     * behavior.\n     * Note: date here means \"full\" date, that is, date AND time, as per\n     * Java convention (and not date-only values like in SQL)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "SerializerProvider"
          },
          {
            "start_node": "SerializerProvider",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "defaultSerializeDateValue"
          }
        ],
        "similarity": 0.06621665344591923,
        "end_line": 1185,
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long timestamp, JsonGenerator gen): void"
      },
      {
        "start_line": 3333,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void writeTree(JsonGenerator g, JsonNode rootNode)",
        "distance": 1.25,
        "title": null,
        "name": "writeTree",
        "documentation": "/**\n     * Method to serialize given JSON Tree, using generator\n     * provided.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "writeTree"
          }
        ],
        "similarity": 0.06613764062494229,
        "end_line": 3333,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator g, JsonNode rootNode): void"
      },
      {
        "start_line": 3197,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonNode readTree(InputStream in) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "readTree",
        "documentation": "/**\n     * Method to deserialize JSON content as tree expressed\n     * using set of {@link JsonNode} instances.\n     * Returns root of the resulting tree (where root can consist\n     * of just a single node if the current event is a\n     * value event, not container).\n     *<p>\n     * If a low-level I/O problem (missing input, network error) occurs,\n     * a {@link IOException} will be thrown.\n     * If a parsing problem occurs (invalid JSON),\n     * {@link StreamReadException} will be thrown.\n     * If no content is found from input (end-of-input), Java\n     * <code>null</code> will be returned.\n     *\n     * @param in Input stream used to read JSON content\n     *   for building the JSON tree.\n     *\n     * @return a {@link JsonNode}, if valid JSON content found; null\n     *   if input has no content to bind -- note, however, that if\n     *   JSON <code>null</code> token is found, it will be represented\n     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n     *   for {@link JsonNode#isNull()}\n     *\n     * @throws StreamReadException if underlying input contains invalid content\n     *    of type {@link JsonParser} supports (JSON for default case)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "readTree"
          }
        ],
        "similarity": 0.06598121870806448,
        "end_line": 3197,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(InputStream in): JsonNode"
      },
      {
        "start_line": 1202,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public final void defaultSerializeDateValue(Date date, JsonGenerator gen) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "defaultSerializeDateValue",
        "documentation": "/**\n     * Method that will handle serialization of Date(-like) values, using\n     * {@link SerializationConfig} settings to determine expected serialization\n     * behavior.\n     * Note: date here means \"full\" date, that is, date AND time, as per\n     * Java convention (and not date-only values like in SQL)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "SerializerProvider"
          },
          {
            "start_node": "SerializerProvider",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "defaultSerializeDateValue"
          }
        ],
        "similarity": 0.065896483556758,
        "end_line": 1202,
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(Date date, JsonGenerator gen): void"
      },
      {
        "start_line": 2243,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonNodeFactory getNodeFactory() {\n        return _deserializationConfig.getNodeFactory();\n    }",
        "distance": 1.25,
        "title": null,
        "name": "getNodeFactory",
        "documentation": "/**\n     * Method that can be used to get hold of {@link JsonNodeFactory}\n     * that this mapper will use when directly constructing\n     * root {@link JsonNode} instances for Trees.\n     *<p>\n     * Note: this is just a shortcut for calling\n     *<pre>\n     *   getDeserializationConfig().getNodeFactory()\n     *</pre>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "getNodeFactory"
          }
        ],
        "similarity": 0.0658642271433728,
        "end_line": 2245,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory(): JsonNodeFactory"
      },
      {
        "start_line": 2711,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper disable(DeserializationFeature feature) {\n        _deserializationConfig = _deserializationConfig.without(feature);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "disable",
        "documentation": "/**\n     * Method for disabling specified {@link DeserializationConfig} features.\n     * Modifies and returns this instance; no new object is created.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#disable(DeserializationFeature...)} instead.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "disable"
          }
        ],
        "similarity": 0.0658030086146632,
        "end_line": 2714,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(DeserializationFeature feature): ObjectMapper"
      },
      {
        "start_line": 1389,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    protected void _reportIncompatibleRootType(Object value, JavaType rootType) throws IOException",
        "distance": 1.25,
        "title": null,
        "name": "_reportIncompatibleRootType",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "SerializerProvider"
          },
          {
            "start_node": "SerializerProvider",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_reportIncompatibleRootType"
          }
        ],
        "similarity": 0.06576426190667899,
        "end_line": 1389,
        "signature": "com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(Object value, JavaType rootType): void"
      },
      {
        "start_line": 3318,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void writeTree(JsonGenerator g, TreeNode rootNode)",
        "distance": 1.25,
        "title": null,
        "name": "writeTree",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "writeTree"
          }
        ],
        "similarity": 0.06523679935159338,
        "end_line": 3318,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator g, TreeNode rootNode): void"
      },
      {
        "start_line": 1746,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setDefaultPrettyPrinter(PrettyPrinter pp) {\n        _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(pp);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setDefaultPrettyPrinter",
        "documentation": "/**\n     * Method for specifying {@link PrettyPrinter} to use when \"default pretty-printing\"\n     * is enabled (by enabling {@link SerializationFeature#INDENT_OUTPUT})\n     *\n     * @param pp Pretty printer to use by default.\n     *\n     * @return This mapper, useful for call-chaining\n     *\n     * @since 2.6\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setDefaultPrettyPrinter"
          }
        ],
        "similarity": 0.06491287149035396,
        "end_line": 1749,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter pp): ObjectMapper"
      },
      {
        "start_line": 489,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public TokenBuffer bufferForValueConversion(ObjectCodec oc) {\n        // false -> no native type/object ids\n        return new TokenBuffer(oc, false);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "bufferForValueConversion",
        "documentation": "/**\n     * Specialized factory method used when we are converting values and do not\n     * typically have or use \"real\" parsers or generators.\n     *\n     * @since 2.13\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "SerializerProvider"
          },
          {
            "start_node": "SerializerProvider",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "bufferForValueConversion"
          }
        ],
        "similarity": 0.06417968957266271,
        "end_line": 492,
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.bufferForValueConversion(ObjectCodec oc): TokenBuffer"
      },
      {
        "start_line": 3207,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonNode readTree(Reader r) throws IOException {\n        _assertNotNull(\"r\", r);\n        return _readTreeAndClose(_jsonFactory.createParser(r));\n    }",
        "distance": 1.25,
        "title": null,
        "name": "readTree",
        "documentation": "/**\n     * Same as {@link #readTree(InputStream)} except content accessed through\n     * passed-in {@link Reader}\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "readTree"
          }
        ],
        "similarity": 0.06398508786384484,
        "end_line": 3210,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(Reader r): JsonNode"
      },
      {
        "start_line": 2597,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper enable(SerializationFeature first,",
        "distance": 1.25,
        "title": null,
        "name": "enable",
        "documentation": "/**\n     * Method for enabling specified {@link DeserializationConfig} features.\n     * Modifies and returns this instance; no new object is created.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#isEnabled(SerializationFeature)}.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "enable"
          }
        ],
        "similarity": 0.06365916079940144,
        "end_line": 2597,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(SerializationFeature first, SerializationFeature f): ObjectMapper"
      },
      {
        "start_line": 2614,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper disable(SerializationFeature f) {\n        _serializationConfig = _serializationConfig.without(f);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "disable",
        "documentation": "/**\n     * Method for disabling specified {@link DeserializationConfig} features.\n     * Modifies and returns this instance; no new object is created.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#disable(SerializationFeature...)}.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "disable"
          }
        ],
        "similarity": 0.0635169479638645,
        "end_line": 2617,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(SerializationFeature f): ObjectMapper"
      },
      {
        "start_line": 1821,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Value incl) {\n        _configOverrides.setDefaultInclusion(incl);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setDefaultPropertyInclusion",
        "documentation": "/**\n     * Method for setting default POJO property inclusion strategy for serialization,\n     * applied for all properties for which there are no per-type or per-property\n     * overrides (via annotations or config overrides).\n     *\n     * @since 2.9 (basically rename of <code>setPropertyInclusion</code>)\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setDefaultPropertyInclusion"
          }
        ],
        "similarity": 0.06338242765444085,
        "end_line": 1824,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude incl): ObjectMapper"
      },
      {
        "start_line": 4175,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectWriter writerWithType(Class<?> rootType) {\n        return _newWriter(getSerializationConfig(),\n                // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\n                ((rootType == null) ? null :_typeFactory.constructType(rootType)),\n                /*PrettyPrinter*/null);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "writerWithType",
        "documentation": "/**\n     * @deprecated Since 2.5, use {@link #writerFor(Class)} instead\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "writerWithType"
          }
        ],
        "similarity": 0.06334349323604155,
        "end_line": 4180,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(Class rootType): ObjectWriter"
      },
      {
        "start_line": 670,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private SerializationConfig _withoutJsonWriteFeatures(FormatFeature... features) {\n        int parserSet = _generatorFeatures;\n        int parserMask = _generatorFeaturesToChange;\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            final int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n\n            if (f instanceof JsonWriteFeature) {\n                JsonGenerator.Feature oldF = ((JsonWriteFeature) f).mappedFeature();\n                if (oldF != null) {\n                    final int pmask = oldF.getMask();\n                    parserSet &= ~pmask;\n                    parserMask |= pmask;\n                }\n            }\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)\n                && (_generatorFeatures == parserSet) && (_generatorFeaturesToChange == parserMask)\n                ) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    parserSet, parserMask, newSet, newMask);\n    }",
        "distance": 2.5,
        "title": null,
        "name": "_withoutJsonWriteFeatures",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "calls method",
            "type": "RELATED",
            "end_node": "SerializationConfig"
          },
          {
            "start_node": "SerializationConfig",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "SerializationConfig"
          },
          {
            "start_node": "SerializationConfig",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_withoutJsonWriteFeatures"
          }
        ],
        "similarity": 0.06309367819786213,
        "end_line": 694,
        "signature": "com.fasterxml.jackson.databind.SerializationConfig._withoutJsonWriteFeatures(FormatFeature features): SerializationConfig"
      },
      {
        "start_line": 1810,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setPropertyInclusion(JsonInclude.Value incl) {\n        return setDefaultPropertyInclusion(incl);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setPropertyInclusion",
        "documentation": "/**\n     * @since 2.7\n     * @deprecated Since 2.9 use {@link #setDefaultPropertyInclusion}\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setPropertyInclusion"
          }
        ],
        "similarity": 0.0630600098635621,
        "end_line": 1812,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion(JsonInclude incl): ObjectMapper"
      },
      {
        "start_line": 3921,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public void writeValue(OutputStream out, Object value)",
        "distance": 1.25,
        "title": null,
        "name": "writeValue",
        "documentation": "/**\n     * Method that can be used to serialize any Java value as\n     * JSON output, using output stream provided (using encoding\n     * {@link JsonEncoding#UTF8}).\n     *<p>\n     * Note: method does not close the underlying stream explicitly\n     * here; however, {@link JsonFactory} this mapper uses may choose\n     * to close the stream depending on its settings (by default,\n     * it will try to close it when {@link JsonGenerator} we construct\n     * is closed).\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "writeValue"
          }
        ],
        "similarity": 0.06298166922371405,
        "end_line": 3921,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(OutputStream out, Object value): void"
      },
      {
        "start_line": 3385,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonParser treeAsTokens(TreeNode n) {\n        _assertNotNull(\"n\", n);\n        return new TreeTraversingParser((JsonNode) n, this);\n    }",
        "distance": 1.25,
        "title": null,
        "name": "treeAsTokens",
        "documentation": "/**\n     * Method for constructing a {@link JsonParser} out of JSON tree\n     * representation.\n     *\n     * @param n Root node of the tree that resulting parser will read from\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "treeAsTokens"
          }
        ],
        "similarity": 0.06291853352574958,
        "end_line": 3388,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(TreeNode n): JsonParser"
      },
      {
        "start_line": 3374,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonNode nullNode() {\n        return _deserializationConfig.getNodeFactory().nullNode();\n    }",
        "distance": 1.25,
        "title": null,
        "name": "nullNode",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "nullNode"
          }
        ],
        "similarity": 0.06285138077356857,
        "end_line": 3376,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.nullNode(): JsonNode"
      },
      {
        "start_line": 643,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    private SerializationConfig _withJsonWriteFeatures(FormatFeature... features) {\n        int parserSet = _generatorFeatures;\n        int parserMask = _generatorFeaturesToChange;\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            final int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n\n            if (f instanceof JsonWriteFeature) {\n                JsonGenerator.Feature oldF = ((JsonWriteFeature) f).mappedFeature();\n                if (oldF != null) {\n                    final int pmask = oldF.getMask();\n                    parserSet |= pmask;\n                    parserMask |= pmask;\n                }\n            }\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)\n                && (_generatorFeatures == parserSet) && (_generatorFeaturesToChange == parserMask)\n                ) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    parserSet, parserMask, newSet, newMask);\n    }",
        "distance": 2.5,
        "title": null,
        "name": "_withJsonWriteFeatures",
        "documentation": "",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "calls method",
            "type": "RELATED",
            "end_node": "SerializationConfig"
          },
          {
            "start_node": "SerializationConfig",
            "description": "contained in method",
            "type": "RELATED",
            "end_node": "SerializationConfig"
          },
          {
            "start_node": "SerializationConfig",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "_withJsonWriteFeatures"
          }
        ],
        "similarity": 0.06272429208317924,
        "end_line": 667,
        "signature": "com.fasterxml.jackson.databind.SerializationConfig._withJsonWriteFeatures(FormatFeature features): SerializationConfig"
      },
      {
        "start_line": 1800,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) {\n        setPropertyInclusion(JsonInclude.Value.construct(incl, incl));\n        return this;\n    }",
        "distance": 1.0,
        "title": null,
        "name": "setSerializationInclusion",
        "documentation": "/**\n     * Convenience method, equivalent to calling:\n     *<pre>\n     *  setPropertyInclusion(JsonInclude.Value.construct(incl, incl));\n     *</pre>\n     *<p>\n     * NOTE: behavior differs slightly from 2.8, where second argument was\n     * implied to be <code>JsonInclude.Include.ALWAYS</code>.\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "setSerializationInclusion"
          }
        ],
        "similarity": 0.06272326721892159,
        "end_line": 1803,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(JsonInclude incl): ObjectMapper"
      },
      {
        "start_line": 2399,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonFactory tokenStreamFactory() { return _jsonFactory; }",
        "distance": 1.25,
        "title": null,
        "name": "tokenStreamFactory",
        "documentation": "/**\n     * Method that can be used to get hold of {@link JsonFactory} that this\n     * mapper uses if it needs to construct {@link JsonParser}s\n     * and/or {@link JsonGenerator}s.\n     *<p>\n     * WARNING: note that all {@link ObjectReader} and {@link ObjectWriter}\n     * instances created by this mapper usually share the same configured\n     * {@link JsonFactory}, so changes to its configuration will \"leak\".\n     * To avoid such observed changes you should always use \"with()\" and\n     * \"without()\" method of {@link ObjectReader} and {@link ObjectWriter}\n     * for changing {@link com.fasterxml.jackson.core.JsonParser.Feature}\n     * and {@link com.fasterxml.jackson.core.JsonGenerator.Feature}\n     * settings to use on per-call basis.\n     *\n     * @return {@link JsonFactory} that this mapper uses when it needs to\n     *   construct Json parser and generators\n     *\n     * @since 2.10\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "tokenStreamFactory"
          }
        ],
        "similarity": 0.06271186277618312,
        "end_line": 2399,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.tokenStreamFactory(): JsonFactory"
      },
      {
        "start_line": 1871,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper setDefaultMergeable(Boolean b) {\n        _configOverrides.setDefaultMergeable(b);\n        return this;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "setDefaultMergeable",
        "documentation": "/**\n     * Method for setting default Setter configuration, regarding things like\n     * merging, null-handling; used for properties for which there are\n     * no per-type or per-property overrides (via annotations or config overrides).\n     *\n     * @since 2.9\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "setDefaultMergeable"
          }
        ],
        "similarity": 0.06268534537714675,
        "end_line": 1874,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(Boolean b): ObjectMapper"
      },
      {
        "start_line": 2694,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public ObjectMapper enable(DeserializationFeature first,",
        "distance": 1.25,
        "title": null,
        "name": "enable",
        "documentation": "/**\n     * Method for enabling specified {@link DeserializationConfig} features.\n     * Modifies and returns this instance; no new object is created.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#enable(DeserializationFeature...)}.</strong>\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "ObjectMapper"
          },
          {
            "start_node": "ObjectMapper",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "enable"
          }
        ],
        "similarity": 0.0626709869262363,
        "end_line": 2694,
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(DeserializationFeature first, DeserializationFeature f): ObjectMapper"
      },
      {
        "start_line": 945,
        "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "issue_id": null,
        "type": "method",
        "content": null,
        "source_code": "    public JsonSerializer<Object> getDefaultNullValueSerializer() {\n        return _nullValueSerializer;\n    }",
        "distance": 1.25,
        "title": null,
        "name": "getDefaultNullValueSerializer",
        "documentation": "/**\n     * @since 2.0\n     */",
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "SerializerProvider"
          },
          {
            "start_node": "SerializerProvider",
            "description": "contains class",
            "type": "RELATED",
            "end_node": "getDefaultNullValueSerializer"
          }
        ],
        "similarity": 0.06259695862578303,
        "end_line": 947,
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer(): JsonSerializer"
      }
    ],
    "classes": [],
    "issues": [
      {
        "content": "### Search before asking\n\n- [X] I searched in the [issues](https://github.com/FasterXML/jackson-databind/issues) and found nothing similar.\n\n### Describe the bug\n\nWhen we upgrade the jackson-databind version, then we found the ObjectMapper.valueToTree will return the different result with the previous version. Actually, we configured the SerializationFeature.WRAP_ROOT_VALUE. \r\n\r\nThe class is like this:\r\n\r\n@JsonRootName(\"event\")\r\npublic class Event {\r\n\r\n}\r\n\r\nThe previous ObjectMapper.valueToTree result: \r\n![image](https://github.com/FasterXML/jackson-databind/assets/12562318/a7e457b5-dacd-49d2-8f0f-79f266770d55)\r\n\r\nAfter upgraded the version result:\r\n![image](https://github.com/FasterXML/jackson-databind/assets/12562318/0ab4429c-8add-48db-9f9a-f52167420e2f)\r\n\r\n\r\nThis should caused by the commit.  \r\nhttps://github.com/FasterXML/jackson-databind/commit/\nCommit: 2e986dfe5937b28ba39b4d28e0f993802c7c9f68\nAuthor: Tatu Saloranta\nDate: 2021-05-29 01:55:37+00:00\n\nMessage:\nStart work on #2989\n\nModified files:\n- Modified: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n   Added: 22 lines\n   Removed: 12 lines\n- Modified: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n   Added: 32 lines\n   Removed: 1 lines\n\r\nCan we re-enbale SerializationFeature.WRAP_ROOT_VALUE in ObjectMapper.valueToTree method to keep consistent with method writeValueAsString?\n\n### Version Information\n\n2.14.2 (The version after 2.13 should have this issue)\n\n### Reproduction\n\n<-- Any of the following\r\n1. Configure the object mapper  objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n2. Call objectMapper.valueToTree(event) method\r\n3. You can the SerializationFeature.WRAP_ROOT_VALUE does not take effect after version 2.13.x\r\n -->\r\n```java\r\n public ObjectMapper objectMapper() {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.findAndRegisterModules();\r\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\r\n        objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n        objectMapper.registerModule(new JSR310Module());\r\n        return objectMapper;\r\n    }\r\n\r\n@JsonRootName(\"event\")\r\npublic class Event {\r\n    private Long id;\r\n    private String name;\r\n}\r\n//call valueToTree method\r\nobjectMapper.valueToTree(event)\r\n``` \r\n\n\n### Expected behavior\n\nSerializationFeature.WRAP_ROOT_VALUE configuration should be global and take effect in method valueToTree to keep the same with writeValueAsString\n\n### Additional context\n\n_No response_\n`ObjectMapper.valueToTree()` will ignore the configuration `SerializationFeature.WRAP_ROOT_VALUE`\n### Search before asking\n\n- [X] I searched in the [issues](https://github.com/FasterXML/jackson-databind/issues) and found nothing similar.\n\n### Describe the bug\n\nWhen we upgrade the jackson-databind version, then we found the ObjectMapper.valueToTree will return the different result with the previous version. Actually, we configured the SerializationFeature.WRAP_ROOT_VALUE. \r\n\r\nThe class is like this:\r\n\r\n@JsonRootName(\"event\")\r\npublic class Event {\r\n\r\n}\r\n\r\nThe previous ObjectMapper.valueToTree result: \r\n![image](https://github.com/FasterXML/jackson-databind/assets/12562318/a7e457b5-dacd-49d2-8f0f-79f266770d55)\r\n\r\nAfter upgraded the version result:\r\n![image](https://github.com/FasterXML/jackson-databind/assets/12562318/0ab4429c-8add-48db-9f9a-f52167420e2f)\r\n\r\n\r\nThis should caused by the commit.  \r\nhttps://github.com/FasterXML/jackson-databind/commit/\nCommit: 2e986dfe5937b28ba39b4d28e0f993802c7c9f68\nAuthor: Tatu Saloranta\nDate: 2021-05-29 01:55:37+00:00\n\nMessage:\nStart work on #2989\n\nModified files:\n- Modified: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n   Added: 22 lines\n   Removed: 12 lines\n- Modified: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n   Added: 32 lines\n   Removed: 1 lines\n\r\nCan we re-enbale SerializationFeature.WRAP_ROOT_VALUE in ObjectMapper.valueToTree method to keep consistent with method writeValueAsString?\n\n### Version Information\n\n2.14.2 (The version after 2.13 should have this issue)\n\n### Reproduction\n\n<-- Any of the following\r\n1. Configure the object mapper  objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n2. Call objectMapper.valueToTree(event) method\r\n3. You can the SerializationFeature.WRAP_ROOT_VALUE does not take effect after version 2.13.x\r\n -->\r\n```java\r\n public ObjectMapper objectMapper() {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.findAndRegisterModules();\r\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\r\n        objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n        objectMapper.registerModule(new JSR310Module());\r\n        return objectMapper;\r\n    }\r\n\r\n@JsonRootName(\"event\")\r\npublic class Event {\r\n    private Long id;\r\n    private String name;\r\n}\r\n//call valueToTree method\r\nobjectMapper.valueToTree(event)\r\n``` \r\n\n\n### Expected behavior\n\nSerializationFeature.WRAP_ROOT_VALUE configuration should be global and take effect in method valueToTree to keep the same with writeValueAsString\n\n### Additional context\n\n_No response_\n",
        "distance": 0,
        "title": "`ObjectMapper.valueToTree()` will ignore the configuration `SerializationFeature.WRAP_ROOT_VALUE`",
        "name": "root",
        "path": [],
        "issue_id": "root",
        "similarity": 2.0,
        "type": "issue"
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "4047",
        "type": "issue",
        "content": "### Search before asking\n\n- [X] I searched in the [issues](https://github.com/FasterXML/jackson-databind/issues) and found nothing similar.\n\n### Describe the bug\n\nWhen we upgrade the jackson-databind version, then we found the ObjectMapper.valueToTree will return the different result with the previous version. Actually, we configured the SerializationFeature.WRAP_ROOT_VALUE. \r\n\r\nThe class is like this:\r\n\r\n@JsonRootName(\"event\")\r\npublic class Event {\r\n\r\n}\r\n\r\nThe previous ObjectMapper.valueToTree result: \r\n![image](https://github.com/FasterXML/jackson-databind/assets/12562318/a7e457b5-dacd-49d2-8f0f-79f266770d55)\r\n\r\nAfter upgraded the version result:\r\n![image](https://github.com/FasterXML/jackson-databind/assets/12562318/0ab4429c-8add-48db-9f9a-f52167420e2f)\r\n\r\n\r\nThis should caused by the commit.  \r\nhttps://github.com/FasterXML/jackson-databind/commit/2e986dfe5937b28ba39b4d28e0f993802c7c9f68\r\nCan we re-enbale SerializationFeature.WRAP_ROOT_VALUE in ObjectMapper.valueToTree method to keep consistent with method writeValueAsString?\n\n### Version Information\n\n2.14.2 (The version after 2.13 should have this issue)\n\n### Reproduction\n\n<-- Any of the following\r\n1. Configure the object mapper  objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n2. Call objectMapper.valueToTree(event) method\r\n3. You can the SerializationFeature.WRAP_ROOT_VALUE does not take effect after version 2.13.x\r\n -->\r\n```java\r\n public ObjectMapper objectMapper() {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.findAndRegisterModules();\r\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\r\n        objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n        objectMapper.registerModule(new JSR310Module());\r\n        return objectMapper;\r\n    }\r\n\r\n@JsonRootName(\"event\")\r\npublic class Event {\r\n    private Long id;\r\n    private String name;\r\n}\r\n//call valueToTree method\r\nobjectMapper.valueToTree(event)\r\n``` \r\n\n\n### Expected behavior\n\nSerializationFeature.WRAP_ROOT_VALUE configuration should be global and take effect in method valueToTree to keep the same with writeValueAsString\n\n### Additional context\n\n_No response_\n\n\nComment by yawkat:\nit looks to me like the snippet was incorrectly copied from the `convert` implementation.\n\nComment by cowtowncoder:\nWe'd probably need a more slimmed-down reproduction here.\r\n\n\nComment by yawkat:\n@cowtowncoder reproducer:\r\n\r\n```java\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n\r\n        Event value = new Event();\r\n        value.id = 1L;\r\n        value.name = \"foo\";\r\n        System.out.println(objectMapper.writeValueAsString(value)); // {\"event\":{\"id\":1,\"name\":\"foo\"}}\r\n        System.out.println(objectMapper.valueToTree(value)); // {\"id\":1,\"name\":\"foo\"}\r\n    }\r\n\r\n    @JsonRootName(\"event\")\r\n    public static class Event {\r\n        public Long id;\r\n        public String name;\r\n    }\r\n```\r\n\r\nThe bug was introduced in 2e986dfe5937b28ba39b4d28e0f993802c7c9f68 because valueToTree now explicitly drops WRAP_ROOT_VALUE. imo this should be reverted\n\nComment by cowtowncoder:\nHmmh. Does sounds problematic: wish I had added notes on why I felt this should be disabled. I think there's fundamental friction between `WRAP_ROOT_VALUE` usage, `JsonNode`, so that's likely why. But I guess easy enough to see which unit tests fail if leaving that feature on in a PR.\r\n\r\n\n\nComment by JooHyukKim:\n> The bug was introduced in .... ... WRAP_ROOT_VALUE. imo this should be reverted\r\n\r\nI will see if we can revert the commit. But until then, anyone can jump on the #4049 refer to.",
        "source_code": null,
        "distance": 0.25,
        "title": "`ObjectMapper.valueToTree()` will ignore the configuration `SerializationFeature.WRAP_ROOT_VALUE`",
        "name": "issue#4047",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#4047"
          }
        ],
        "similarity": 0.8640966108031263,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "4050",
        "type": "issue",
        "content": "Fixes #4047 \n\n",
        "source_code": null,
        "distance": 0.5,
        "title": "Fix #4047",
        "name": "pr#4050",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#4047"
          },
          {
            "start_node": "issue#4047",
            "description": "referenced by issue",
            "type": "RELATED",
            "end_node": "pr#4050"
          }
        ],
        "similarity": 0.1449827238228293,
        "end_line": null,
        "signature": null
      },
      {
        "start_line": null,
        "file_path": null,
        "issue_id": "4049",
        "type": "issue",
        "content": "Reproduces #4047 \n\n",
        "source_code": null,
        "distance": 0.75,
        "title": "Add failing test for #4047",
        "name": "pr#4049",
        "documentation": null,
        "path": [
          {
            "start_node": "root",
            "description": "points to issue",
            "type": "RELATED",
            "end_node": "issue#4047"
          },
          {
            "start_node": "issue#4047",
            "description": "referenced by issue",
            "type": "RELATED",
            "end_node": "pr#4049"
          }
        ],
        "similarity": 0.14387177688349473,
        "end_line": null,
        "signature": null
      }
    ]
  },
  "artifact_stats": {
    "skipped_due_to_time": 26,
    "valid_related_items": 84
  }
}