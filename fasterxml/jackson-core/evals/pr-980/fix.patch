--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java
+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java
@@ -1234,9 +1234,14 @@
         }
         try {
             // NOTE! Length of number string has been validated earlier
-            _numberBigInt = NumberInput.parseBigInteger(
-                    _numberString,
-                    isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));
+            if (_numberBigDecimal != null) {
+                _streamReadConstraints.validateBigIntegerScale(Math.abs(_numberBigDecimal.scale()));
+                _numberBigInt = _numberBigDecimal.toBigInteger();
+            } else {
+                _numberBigInt = NumberInput.parseBigInteger(
+                        _numberString,
+                        isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));
+            }
         } catch (NumberFormatException nex) {
             _wrapError("Malformed numeric value ("+_longNumberDesc(_numberString)+")", nex);
         }

--- a/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java
+++ b/src/main/java/com/fasterxml/jackson/core/StreamReadConstraints.java
@@ -257,7 +257,17 @@
      *
      * @throws StreamConstraintsException If length exceeds maximum
      */
-    public void validateIntegerLength(int length) throws StreamConstraintsException
+    public void validateIntegerLength(int length) throws StreamConstraintsException {
+        if (length > _maxNumLen) {
+            throw new StreamConstraintsException("Number length (" + length + ") exceeds the maximum allowed (" + _maxNumLen + ")");
+        }
+    }
+
+    public void validateBigIntegerScale(int scale) throws StreamConstraintsException {
+        if (scale > _maxNumLen * 10) {
+            throw new StreamConstraintsException("BigDecimal scale (" + scale + ") exceeds the maximum allowed (" + (_maxNumLen * 10) + ") for BigInteger conversion");
+        }
+    }
     {
         if (length > _maxNumLen) {
             throw new StreamConstraintsException(String.format("Number length (%d) exceeds the maximum length (%d)",
