{
    "related_entities": {
        "methods": [
            {
                "start_line": 2042,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException",
                "distance": 1.0,
                "title": null,
                "name": "_verifyEndArrayForSingle",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    }
                ],
                "similarity": 0.14219827641796362,
                "end_line": 2042,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt): void"
            },
            {
                "start_line": 389,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt)",
                "distance": 1.0,
                "title": null,
                "name": "_parseBooleanPrimitive",
                "documentation": "/**\n     * @param ctxt Deserialization context for accessing configuration\n     * @param p Underlying parser\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_parseBooleanPrimitive"
                    }
                ],
                "similarity": 0.1315119433794852,
                "end_line": 389,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt): boolean"
            },
            {
                "start_line": 380,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final boolean _parseBooleanPrimitive(DeserializationContext ctxt,",
                "distance": 1.0,
                "title": null,
                "name": "_parseBooleanPrimitive",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_parseBooleanPrimitive"
                    }
                ],
                "similarity": 0.12994761851286316,
                "end_line": 380,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseBooleanPrimitive(DeserializationContext ctxt, JsonParser p, Class targetType): boolean"
            },
            {
                "start_line": 114,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "        public String nextToken() {\n            String token;\n            if (_pushbackToken != null) {\n                token = _pushbackToken;\n                _pushbackToken = null;\n            } else {\n                token = super.nextToken();\n                _index += token.length();\n                token = token.trim();\n            }\n            return token;\n        }",
                "distance": 1.0,
                "title": null,
                "name": "nextToken",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "nextToken"
                    }
                ],
                "similarity": 0.1268403837425686,
                "end_line": 125,
                "signature": "com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer.nextToken(): String"
            },
            {
                "start_line": 681,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    private DeserializationConfig _withoutJsonReadFeatures(FormatFeature... features) {\n        int parserSet = _parserFeatures;\n        int parserMask = _parserFeaturesToChange;\n        int newSet = _formatReadFeatures;\n        int newMask = _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            final int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n\n            if (f instanceof JsonReadFeature) {\n                JsonParser.Feature oldF = ((JsonReadFeature) f).mappedFeature();\n                if (oldF != null) {\n                    final int pmask = oldF.getMask();\n                    parserSet &= ~pmask;\n                    parserMask |= pmask;\n                }\n            }\n        }\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)\n                && (_parserFeatures == parserSet) && (_parserFeaturesToChange == parserMask)\n                ) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    parserSet, parserMask, newSet, newMask);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withoutJsonReadFeatures",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withoutJsonReadFeatures"
                    }
                ],
                "similarity": 0.12455851287378181,
                "end_line": 705,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withoutJsonReadFeatures(FormatFeature features): DeserializationConfig"
            },
            {
                "start_line": 654,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    private DeserializationConfig _withJsonReadFeatures(FormatFeature... features) {\n        int parserSet = _parserFeatures;\n        int parserMask = _parserFeaturesToChange;\n        int newSet = _formatReadFeatures;\n        int newMask = _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            final int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n\n            if (f instanceof JsonReadFeature) {\n                JsonParser.Feature oldF = ((JsonReadFeature) f).mappedFeature();\n                if (oldF != null) {\n                    final int pmask = oldF.getMask();\n                    parserSet |= pmask;\n                    parserMask |= pmask;\n                }\n            }\n        }\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)\n                && (_parserFeatures == parserSet) && (_parserFeaturesToChange == parserMask)\n                ) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    parserSet, parserMask, newSet, newMask);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withJsonReadFeatures",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withJsonReadFeatures"
                    }
                ],
                "similarity": 0.1216790934089092,
                "end_line": 678,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withJsonReadFeatures(FormatFeature features): DeserializationConfig"
            },
            {
                "start_line": 380,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean isEnabled(DeserializationFeature feat) {\n        /* 03-Dec-2010, tatu: minor shortcut; since this is called quite often,\n         *   let's use a local copy of feature settings:\n         */\n        return (_featureFlags & feat.getMask()) != 0;\n    }",
                "distance": 1.0,
                "title": null,
                "name": "isEnabled",
                "documentation": "/**\n     * Convenience method for checking whether specified on/off\n     * feature is enabled\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    }
                ],
                "similarity": 0.11959668455757531,
                "end_line": 385,
                "signature": "com.fasterxml.jackson.databind.DeserializationContext.isEnabled(DeserializationFeature feat): boolean"
            },
            {
                "start_line": 818,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory) {\n        int mask = f.getMask();\n        if ((_parserFeaturesToChange & mask) != 0) {\n            return (_parserFeatures & f.getMask()) != 0;\n        }\n        return factory.isEnabled(f);\n    }",
                "distance": 1.0,
                "title": null,
                "name": "isEnabled",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    }
                ],
                "similarity": 0.11725131418509216,
                "end_line": 824,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig.isEnabled(JsonParser f, JsonFactory factory): boolean"
            },
            {
                "start_line": 585,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public boolean hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause) {\n        try {\n            return _cache.hasValueDeserializerFor(this, _factory, type);\n        } catch (DatabindException e) {\n            if (cause != null) {\n                cause.set(e);\n            }\n        } catch (RuntimeException e) {\n            if (cause == null) { // earlier behavior\n                throw e;\n            }\n            cause.set(e);\n        }\n        return false;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "hasValueDeserializerFor",
                "documentation": "/**\n     * Method for checking whether we could find a deserializer\n     * for given type.\n     *\n     * @param type Type to check\n     * @param cause (optional) Reference set to root cause if no deserializer\n     *    could be found due to exception (to find the reason for failure)\n     *\n     * @since 2.3\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "DeserializationContext"
                    },
                    {
                        "start_node": "DeserializationContext",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "hasValueDeserializerFor"
                    }
                ],
                "similarity": 0.1171684771788023,
                "end_line": 599,
                "signature": "com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor(JavaType type, AtomicReference cause): boolean"
            },
            {
                "start_line": 1005,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public boolean isUnknownTypeSerializer(JsonSerializer<?> ser) {\n        if ((ser == _unknownTypeSerializer) || (ser == null)) {\n            return true;\n        }\n        // 23-Apr-2015, tatu: \"empty\" serializer is trickier; needs to consider\n        //    error handling\n        if (isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n            if (ser.getClass() == UnknownSerializer.class) {\n                return true;\n            }\n        }\n        return false;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "isUnknownTypeSerializer",
                "documentation": "/**\n     * Helper method called to see if given serializer is considered to be\n     * something returned by {@link #getUnknownTypeSerializer}, that is, something\n     * for which no regular serializer was found or constructed.\n     * \n     * @since 2.5\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "SerializerProvider"
                    },
                    {
                        "start_node": "SerializerProvider",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "isUnknownTypeSerializer"
                    }
                ],
                "similarity": 0.11660102259655973,
                "end_line": 1017,
                "signature": "com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(JsonSerializer ser): boolean"
            },
            {
                "start_line": 355,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected T _deserializeWrappedValue(JsonParser p, DeserializationContext ctxt) throws IOException",
                "distance": 1.5,
                "title": null,
                "name": "_deserializeWrappedValue",
                "documentation": "/**\n     * Helper called to support {@link DeserializationFeature#UNWRAP_SINGLE_VALUE_ARRAYS}:\n     * default implementation simply calls\n     * {@link #deserialize(JsonParser, DeserializationContext)},\n     * but handling may be overridden.\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_deserializeWrappedValue"
                    }
                ],
                "similarity": 0.11312048404630624,
                "end_line": 355,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeWrappedValue(JsonParser p, DeserializationContext ctxt): T"
            },
            {
                "start_line": 814,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean isEnabled(DeserializationFeature f) {\n        return (_deserFeatures & f.getMask()) != 0;\n    }",
                "distance": 1.0,
                "title": null,
                "name": "isEnabled",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    }
                ],
                "similarity": 0.11092597673063498,
                "end_line": 816,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig.isEnabled(DeserializationFeature f): boolean"
            },
            {
                "start_line": 1709,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected Object _coerceTextualNull(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException {\n        if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {\n            _reportFailedNullCoerce(ctxt, true,  MapperFeature.ALLOW_COERCION_OF_SCALARS, \"String \\\"null\\\"\");\n        }\n        return getNullValue(ctxt);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_coerceTextualNull",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_coerceTextualNull"
                    }
                ],
                "similarity": 0.11084040040076827,
                "end_line": 1714,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceTextualNull(DeserializationContext ctxt, boolean isPrimitive): Object"
            },
            {
                "start_line": 805,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory) {\n        int mask = f.getMask();\n        if ((_generatorFeaturesToChange & mask) != 0) {\n            return (_generatorFeatures & f.getMask()) != 0;\n        }\n        return factory.isEnabled(f);\n    }",
                "distance": 1.0,
                "title": null,
                "name": "isEnabled",
                "documentation": "/**\n     * Accessor method that first checks if we have any overrides\n     * for feature, and only if not, checks state of passed-in\n     * factory.\n     * \n     * @since 2.5\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    }
                ],
                "similarity": 0.10966163624284554,
                "end_line": 811,
                "signature": "com.fasterxml.jackson.databind.SerializationConfig.isEnabled(JsonGenerator f, JsonFactory factory): boolean"
            },
            {
                "start_line": 1591,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected String _coercedTypeDesc() {\n        boolean structured;\n        String typeDesc;\n\n        JavaType t = getValueType();\n        if ((t != null) && !t.isPrimitive()) {\n            structured = (t.isContainerType() || t.isReferenceType());\n            typeDesc = ClassUtil.getTypeDescription(t);\n        } else {\n            Class<?> cls = handledType();\n            structured = cls.isArray() || Collection.class.isAssignableFrom(cls)\n                || Map.class.isAssignableFrom(cls);\n            typeDesc = ClassUtil.getClassDescription(cls);\n        }\n        if (structured) {\n            return \"element of \"+typeDesc;\n        }\n        return typeDesc+\" value\";\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_coercedTypeDesc",
                "documentation": "/**\n     * Helper method called to get a description of type into which a scalar value coercion\n     * is (most likely) being applied, to be used for constructing exception messages\n     * on coerce failure.\n     *\n     * @return Message with backtick-enclosed name of type this deserializer supports\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_coercedTypeDesc"
                    }
                ],
                "similarity": 0.10884705691341504,
                "end_line": 1609,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coercedTypeDesc(): String"
            },
            {
                "start_line": 649,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    private SerializationConfig _withoutJsonWriteFeatures(FormatFeature... features) {\n        int parserSet = _generatorFeatures;\n        int parserMask = _generatorFeaturesToChange;\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            final int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n\n            if (f instanceof JsonWriteFeature) {\n                JsonGenerator.Feature oldF = ((JsonWriteFeature) f).mappedFeature();\n                if (oldF != null) {\n                    final int pmask = oldF.getMask();\n                    parserSet &= ~pmask;\n                    parserMask |= pmask;\n                }\n            }\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)\n                && (_generatorFeatures == parserSet) && (_generatorFeaturesToChange == parserMask)\n                ) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    parserSet, parserMask, newSet, newMask);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withoutJsonWriteFeatures",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "SerializationConfig"
                    },
                    {
                        "start_node": "SerializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withoutJsonWriteFeatures"
                    }
                ],
                "similarity": 0.10782267564453397,
                "end_line": 673,
                "signature": "com.fasterxml.jackson.databind.SerializationConfig._withoutJsonWriteFeatures(FormatFeature features): SerializationConfig"
            },
            {
                "start_line": 786,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonParser initialize(JsonParser p, FormatSchema schema) {\n        if (_parserFeaturesToChange != 0) {\n            p.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);\n        }\n        if (_formatReadFeaturesToChange != 0) {\n            p.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);\n        }\n        if (schema != null) {\n            p.setSchema(schema);\n        }\n        return p;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "initialize",
                "documentation": "/**\n     * @since 2.12\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "initialize"
                    }
                ],
                "similarity": 0.10711041561608804,
                "end_line": 797,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig.initialize(JsonParser p, FormatSchema schema): JsonParser"
            },
            {
                "start_line": 340,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final DeserializationConfig _withMapperFeatures(long mapperFeatures) {\n        return new DeserializationConfig(this, mapperFeatures, _deserFeatures,\n                _parserFeatures, _parserFeaturesToChange,\n                _formatReadFeatures, _formatReadFeaturesToChange);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withMapperFeatures",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withMapperFeatures"
                    }
                ],
                "similarity": 0.10386631158172711,
                "end_line": 344,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withMapperFeatures(long mapperFeatures): DeserializationConfig"
            },
            {
                "start_line": 622,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    private SerializationConfig _withJsonWriteFeatures(FormatFeature... features) {\n        int parserSet = _generatorFeatures;\n        int parserMask = _generatorFeaturesToChange;\n        int newSet = _formatWriteFeatures;\n        int newMask = _formatWriteFeaturesToChange;\n        for (FormatFeature f : features) {\n            final int mask = f.getMask();\n            newSet |= mask;\n            newMask |= mask;\n\n            if (f instanceof JsonWriteFeature) {\n                JsonGenerator.Feature oldF = ((JsonWriteFeature) f).mappedFeature();\n                if (oldF != null) {\n                    final int pmask = oldF.getMask();\n                    parserSet |= pmask;\n                    parserMask |= pmask;\n                }\n            }\n        }\n        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)\n                && (_generatorFeatures == parserSet) && (_generatorFeaturesToChange == parserMask)\n                ) ? this :\n            new SerializationConfig(this,  _mapperFeatures, _serFeatures,\n                    parserSet, parserMask, newSet, newMask);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withJsonWriteFeatures",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "SerializationConfig"
                    },
                    {
                        "start_node": "SerializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withJsonWriteFeatures"
                    }
                ],
                "similarity": 0.10365392513035875,
                "end_line": 646,
                "signature": "com.fasterxml.jackson.databind.SerializationConfig._withJsonWriteFeatures(FormatFeature features): SerializationConfig"
            },
            {
                "start_line": 960,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> T readValue(JsonParser p, JavaType type) throws IOException {\n        JsonDeserializer<Object> deser = findRootValueDeserializer(type);\n        if (deser == null) {\n            return reportBadDefinition(type,\n                    \"Could not find JsonDeserializer for type \"+ClassUtil.getTypeDescription(type));\n        }\n        return (T) deser.deserialize(p, this);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "readValue",
                "documentation": "/**\n     * @since 2.4\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "DeserializationContext"
                    },
                    {
                        "start_node": "DeserializationContext",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readValue"
                    }
                ],
                "similarity": 0.10316922632337643,
                "end_line": 967,
                "signature": "com.fasterxml.jackson.databind.DeserializationContext.readValue(JsonParser p, JavaType type): T"
            },
            {
                "start_line": 862,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean requiresFullValue() {\n        return DeserializationFeature.FAIL_ON_TRAILING_TOKENS.enabledIn(_deserFeatures);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "requiresFullValue",
                "documentation": "/**\n     * Convenience method equivalant to:\n     *<code>\n     *   isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)\n     *</code>\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "requiresFullValue"
                    }
                ],
                "similarity": 0.10288509001299151,
                "end_line": 864,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig.requiresFullValue(): boolean"
            },
            {
                "start_line": 773,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonParser initialize(JsonParser p) {\n        if (_parserFeaturesToChange != 0) {\n            p.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);\n        }\n        if (_formatReadFeaturesToChange != 0) {\n            p.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);\n        }\n        return p;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "initialize",
                "documentation": "/**\n     * Method called by {@link ObjectMapper} and {@link ObjectReader}\n     * to modify those {@link com.fasterxml.jackson.core.JsonParser.Feature} settings\n     * that have been configured via this config instance.\n     * \n     * @since 2.5\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "initialize"
                    }
                ],
                "similarity": 0.1019834663132687,
                "end_line": 781,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig.initialize(JsonParser p): JsonParser"
            },
            {
                "start_line": 1984,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected CoercionAction _findCoercionFromEmptyArray(DeserializationContext ctxt) {\n        return ctxt.findCoercionAction(logicalType(), handledType(),\n                CoercionInputShape.EmptyArray);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_findCoercionFromEmptyArray",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_findCoercionFromEmptyArray"
                    }
                ],
                "similarity": 0.10041063347772916,
                "end_line": 1987,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._findCoercionFromEmptyArray(DeserializationContext ctxt): CoercionAction"
            },
            {
                "start_line": 1618,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected boolean _parseBooleanFromInt(JsonParser p, DeserializationContext ctxt)",
                "distance": 1.5,
                "title": null,
                "name": "_parseBooleanFromInt",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_parseBooleanFromInt"
                    }
                ],
                "similarity": 0.09975249089306829,
                "end_line": 1618,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseBooleanFromInt(JsonParser p, DeserializationContext ctxt): boolean"
            },
            {
                "start_line": 1442,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected Boolean _coerceBooleanFromInt(JsonParser p, DeserializationContext ctxt,",
                "distance": 1.5,
                "title": null,
                "name": "_coerceBooleanFromInt",
                "documentation": "/**\n     * @since 2.12\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_coerceBooleanFromInt"
                    }
                ],
                "similarity": 0.09973295745232724,
                "end_line": 1442,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceBooleanFromInt(JsonParser p, DeserializationContext ctxt, Class rawTargetType): Boolean"
            },
            {
                "start_line": 1700,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected Object _coerceNullToken(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
                "distance": 1.5,
                "title": null,
                "name": "_coerceNullToken",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_coerceNullToken"
                    }
                ],
                "similarity": 0.09916653451568362,
                "end_line": 1700,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceNullToken(DeserializationContext ctxt, boolean isPrimitive): Object"
            },
            {
                "start_line": 2225,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected String _shapeForToken(JsonToken t) {\n        if (t != null) {\n            switch (t) {\n            // Likely Object values\n            case START_OBJECT:\n            case END_OBJECT:\n            case FIELD_NAME:\n                return \"Object value\";\n\n            // Likely Array values\n            case START_ARRAY:\n            case END_ARRAY:\n                return \"Array value\";\n\n            case VALUE_FALSE:\n            case VALUE_TRUE:\n                return \"Boolean value\";\n\n            case VALUE_EMBEDDED_OBJECT:\n                return \"Embedded Object\";\n\n            case VALUE_NUMBER_FLOAT:\n                return \"Floating-point value\";\n            case VALUE_NUMBER_INT:\n                return \"Integer value\";\n            case VALUE_STRING:\n                return \"String value\";\n\n            case VALUE_NULL:\n                return \"Null value\";\n\n            case NOT_AVAILABLE:\n            default:\n                return \"[Unavailable value]\";\n            }\n        }\n        return \"<end of input>\";\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_shapeForToken",
                "documentation": "/**\n     * Helper method for constructing description like \"Object value\" given\n     * {@link JsonToken} encountered.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "DeserializationContext"
                    },
                    {
                        "start_node": "DeserializationContext",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_shapeForToken"
                    }
                ],
                "similarity": 0.09873935268450917,
                "end_line": 2262,
                "signature": "com.fasterxml.jackson.databind.DeserializationContext._shapeForToken(JsonToken t): String"
            },
            {
                "start_line": 1013,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonNode readTree(JsonParser p) throws IOException {\n        JsonToken t = p.currentToken();\n        if (t == null) {\n            t = p.nextToken();\n            if (t == null) {\n                return getNodeFactory().missingNode();\n            }\n        }\n        if (t == JsonToken.VALUE_NULL) {\n            return getNodeFactory().nullNode();\n        }\n        return (JsonNode) findRootValueDeserializer(_config.constructType(JsonNode.class))\n                .deserialize(p, this);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "readTree",
                "documentation": "/**\n     * Convenience method for reading the value that passed {@link JsonParser}\n     * points to as a {@link JsonNode}.\n     *\n     * @param p Parser that points to the first token of the value to read\n     *\n     * @return Value read as {@link JsonNode}\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "DeserializationContext"
                    },
                    {
                        "start_node": "DeserializationContext",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readTree"
                    }
                ],
                "similarity": 0.0986353695568095,
                "end_line": 1026,
                "signature": "com.fasterxml.jackson.databind.DeserializationContext.readTree(JsonParser p): JsonNode"
            },
            {
                "start_line": 993,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> T readPropertyValue(JsonParser p, BeanProperty prop, JavaType type) throws IOException {\n        JsonDeserializer<Object> deser = findContextualValueDeserializer(type, prop);\n        if (deser == null) {\n            return reportBadDefinition(type, String.format(\n                    \"Could not find JsonDeserializer for type %s (via property %s)\",\n                    ClassUtil.getTypeDescription(type), ClassUtil.nameOf(prop)));\n        }\n        return (T) deser.deserialize(p, this);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "readPropertyValue",
                "documentation": "/**\n     * Same as {@link #readPropertyValue(JsonParser, BeanProperty, Class)} but with\n     * fully resolved {@link JavaType} as target: needs to be used for generic types,\n     * for example.\n     *\n     * @since 2.4\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "DeserializationContext"
                    },
                    {
                        "start_node": "DeserializationContext",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readPropertyValue"
                    }
                ],
                "similarity": 0.09746779289617893,
                "end_line": 1001,
                "signature": "com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue(JsonParser p, BeanProperty prop, JavaType type): T"
            },
            {
                "start_line": 2032,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected void handleMissingEndArrayForSingle(JsonParser p, DeserializationContext ctxt)",
                "distance": 1.5,
                "title": null,
                "name": "handleMissingEndArrayForSingle",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "handleMissingEndArrayForSingle"
                    }
                ],
                "similarity": 0.09655741824842032,
                "end_line": 2032,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleMissingEndArrayForSingle(JsonParser p, DeserializationContext ctxt): void"
            },
            {
                "start_line": 198,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected T _deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException",
                "distance": 1.5,
                "title": null,
                "name": "_deserializeFromArray",
                "documentation": "/**\n     * Helper method that allows easy support for array-related coercion features:\n     * checks for either empty array, or single-value array-wrapped value (if coercion\n     * enabled by {@code CoercionConfigs} (since 2.12), and either reports\n     * an exception (if no coercion allowed), or returns appropriate\n     * result value using coercion mechanism indicated.\n     *<p>\n     * This method should NOT be called if Array representation is explicitly supported\n     * for type: it should only be called in case it is otherwise unrecognized.\n     *<p>\n     * NOTE: in case of unwrapped single element, will handle actual decoding\n     * by calling {@link #_deserializeWrappedValue}, which by default calls\n     * {@link #deserialize(JsonParser, DeserializationContext)}.\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_deserializeFromArray"
                    }
                ],
                "similarity": 0.09599883203432788,
                "end_line": 198,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeFromArray(JsonParser p, DeserializationContext ctxt): T"
            },
            {
                "start_line": 1687,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected void _verifyNumberForScalarCoercion(DeserializationContext ctxt, JsonParser p) throws IOException",
                "distance": 1.5,
                "title": null,
                "name": "_verifyNumberForScalarCoercion",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_verifyNumberForScalarCoercion"
                    }
                ],
                "similarity": 0.09578103523327657,
                "end_line": 1687,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNumberForScalarCoercion(DeserializationContext ctxt, JsonParser p): void"
            },
            {
                "start_line": 1574,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected void _reportFailedNullCoerce(DeserializationContext ctxt, boolean state, Enum<?> feature,",
                "distance": 1.5,
                "title": null,
                "name": "_reportFailedNullCoerce",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_reportFailedNullCoerce"
                    }
                ],
                "similarity": 0.0955925729651272,
                "end_line": 1574,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._reportFailedNullCoerce(DeserializationContext ctxt, boolean state, Enum feature, String inputDesc): void"
            },
            {
                "start_line": 1539,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final void _verifyNullForPrimitive(DeserializationContext ctxt) throws JsonMappingException",
                "distance": 1.5,
                "title": null,
                "name": "_verifyNullForPrimitive",
                "documentation": "/**\n     * Method called to verify that {@code null} token from input is acceptable\n     * for primitive (unboxed) target type. It should NOT be called if {@code null}\n     * was received by other means (coerced due to configuration, or even from\n     * optionally acceptable String {@code \"null\"} token).\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_verifyNullForPrimitive"
                    }
                ],
                "similarity": 0.09383393963825087,
                "end_line": 1539,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNullForPrimitive(DeserializationContext ctxt): void"
            },
            {
                "start_line": 499,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final Boolean _parseBoolean(JsonParser p, DeserializationContext ctxt,",
                "distance": 1.5,
                "title": null,
                "name": "_parseBoolean",
                "documentation": "/**\n     * Helper method called for cases where non-primitive, boolean-based value\n     * is to be deserialized: result of this method will be {@link java.lang.Boolean},\n     * although actual target type may be something different.\n     *<p>\n     * Note: does NOT dynamically access \"empty value\" or \"null value\" of deserializer\n     * since those values could be of type other than {@link java.lang.Boolean}.\n     * Caller may need to translate from 3 possible result types into appropriately\n     * matching output types.\n     *\n     * @param p Underlying parser\n     * @param ctxt Deserialization context for accessing configuration\n     * @param targetType Actual type that is being deserialized, may be\n     *    same as {@link #handledType} but could be {@code AtomicBoolean} for example.\n     *    Used for coercion config access.\n     *\n     * @since 2.12\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_parseBoolean"
                    }
                ],
                "similarity": 0.09341629517655099,
                "end_line": 499,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseBoolean(JsonParser p, DeserializationContext ctxt, Class targetType): Boolean"
            },
            {
                "start_line": 626,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final short _parseShortPrimitive(JsonParser p, DeserializationContext ctxt)",
                "distance": 1.5,
                "title": null,
                "name": "_parseShortPrimitive",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_parseShortPrimitive"
                    }
                ],
                "similarity": 0.09314472662679303,
                "end_line": 626,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseShortPrimitive(JsonParser p, DeserializationContext ctxt): short"
            },
            {
                "start_line": 794,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean isEnabled(SerializationFeature f) {\n        return (_serFeatures & f.getMask()) != 0;\n    }",
                "distance": 1.0,
                "title": null,
                "name": "isEnabled",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    }
                ],
                "similarity": 0.09237107693566296,
                "end_line": 796,
                "signature": "com.fasterxml.jackson.databind.SerializationConfig.isEnabled(SerializationFeature f): boolean"
            },
            {
                "start_line": 298,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final SerializationConfig _withMapperFeatures(long mapperFeatures) {\n        return new SerializationConfig(this, mapperFeatures, _serFeatures,\n                        _generatorFeatures, _generatorFeaturesToChange,\n                        _formatWriteFeatures, _formatWriteFeaturesToChange);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withMapperFeatures",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "SerializationConfig"
                    },
                    {
                        "start_node": "SerializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withMapperFeatures"
                    }
                ],
                "similarity": 0.09184960623683697,
                "end_line": 302,
                "signature": "com.fasterxml.jackson.databind.SerializationConfig._withMapperFeatures(long mapperFeatures): SerializationConfig"
            },
            {
                "start_line": 845,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final long _parseLongPrimitive(JsonParser p, DeserializationContext ctxt)",
                "distance": 1.5,
                "title": null,
                "name": "_parseLongPrimitive",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_parseLongPrimitive"
                    }
                ],
                "similarity": 0.09177025147442076,
                "end_line": 845,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseLongPrimitive(JsonParser p, DeserializationContext ctxt): long"
            },
            {
                "start_line": 1650,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected Object _coerceEmptyString(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
                "distance": 1.5,
                "title": null,
                "name": "_coerceEmptyString",
                "documentation": "/**\n     * Method called when JSON String with value \"\" (that is, zero length) is encountered.\n     *\n     * @deprecated Since 2.12\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_coerceEmptyString"
                    }
                ],
                "similarity": 0.08950753188846816,
                "end_line": 1650,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceEmptyString(DeserializationContext ctxt, boolean isPrimitive): Object"
            },
            {
                "start_line": 1990,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected CoercionAction _findCoercionFromBlankString(DeserializationContext ctxt) {\n        return ctxt.findCoercionFromBlankString(logicalType(), handledType(),\n                CoercionAction.Fail);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_findCoercionFromBlankString",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_findCoercionFromBlankString"
                    }
                ],
                "similarity": 0.08923935962570519,
                "end_line": 1993,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._findCoercionFromBlankString(DeserializationContext ctxt): CoercionAction"
            },
            {
                "start_line": 75,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected StdDeserializer(JavaType valueType) {\n        // 26-Sep-2017, tatu: [databind#1764] need to add null-check back until 3.x\n        _valueClass = (valueType == null) ? Object.class : valueType.getRawClass();\n        _valueType = valueType;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "StdDeserializer",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    }
                ],
                "similarity": 0.08921295638499163,
                "end_line": 79,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer(JavaType valueType)"
            },
            {
                "start_line": 1085,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final double _parseDoublePrimitive(JsonParser p, DeserializationContext ctxt)",
                "distance": 1.5,
                "title": null,
                "name": "_parseDoublePrimitive",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_parseDoublePrimitive"
                    }
                ],
                "similarity": 0.08911732497941359,
                "end_line": 1085,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseDoublePrimitive(JsonParser p, DeserializationContext ctxt): double"
            },
            {
                "start_line": 694,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt)",
                "distance": 1.5,
                "title": null,
                "name": "_parseIntPrimitive",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_parseIntPrimitive"
                    }
                ],
                "similarity": 0.08875323595999791,
                "end_line": 694,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseIntPrimitive(JsonParser p, DeserializationContext ctxt): int"
            },
            {
                "start_line": 752,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public DeserializationConfig withNoProblemHandlers() {\n        if (_problemHandlers == null) {\n            return this;\n        }\n        return new DeserializationConfig(this,\n                (LinkedNode<DeserializationProblemHandler>) null);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "withNoProblemHandlers",
                "documentation": "/**\n     * Method for removing all configured problem handlers; usually done to replace\n     * existing handler(s) with different one(s)\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "withNoProblemHandlers"
                    }
                ],
                "similarity": 0.08845434300217875,
                "end_line": 758,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withNoProblemHandlers(): DeserializationConfig"
            },
            {
                "start_line": 908,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public boolean isEnabled(SerializationFeature f) {\n        return _config.isEnabled(f);\n    }",
                "distance": 1.0,
                "title": null,
                "name": "isEnabled",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    }
                ],
                "similarity": 0.08771912334307137,
                "end_line": 910,
                "signature": "com.fasterxml.jackson.databind.ObjectWriter.isEnabled(SerializationFeature f): boolean"
            },
            {
                "start_line": 1669,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected void _failDoubleToIntCoercion(JsonParser p, DeserializationContext ctxt,",
                "distance": 1.5,
                "title": null,
                "name": "_failDoubleToIntCoercion",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_failDoubleToIntCoercion"
                    }
                ],
                "similarity": 0.08732721735470667,
                "end_line": 1669,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._failDoubleToIntCoercion(JsonParser p, DeserializationContext ctxt, String type): void"
            },
            {
                "start_line": 1678,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final void _verifyNullForScalarCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
                "distance": 1.5,
                "title": null,
                "name": "_verifyNullForScalarCoercion",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_verifyNullForScalarCoercion"
                    }
                ],
                "similarity": 0.08731200669279515,
                "end_line": 1678,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNullForScalarCoercion(DeserializationContext ctxt, String str): void"
            },
            {
                "start_line": 1556,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final void _verifyNullForPrimitiveCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
                "distance": 1.5,
                "title": null,
                "name": "_verifyNullForPrimitiveCoercion",
                "documentation": "/**\n     * Method called to verify that text value {@code \"null\"} from input is acceptable\n     * for primitive (unboxed) target type. It should not be called if actual\n     * {@code null} token was received, or if null is a result of coercion from\n     * Some other input type.\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "_verifyEndArrayForSingle"
                    },
                    {
                        "start_node": "_verifyEndArrayForSingle",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "StdDeserializer"
                    },
                    {
                        "start_node": "StdDeserializer",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_verifyNullForPrimitiveCoercion"
                    }
                ],
                "similarity": 0.0872922978012082,
                "end_line": 1556,
                "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNullForPrimitiveCoercion(DeserializationContext ctxt, String str): void"
            },
            {
                "start_line": 246,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected DeserializationContext(DeserializationContext src) {\n        _cache = new DeserializerCache();\n        _factory = src._factory;\n\n        _config = src._config;\n        _featureFlags = src._featureFlags;\n        _readCapabilities = src._readCapabilities;\n        _view = src._view;\n        _injectableValues = null;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "DeserializationContext",
                "documentation": "/**\n     * Copy-constructor for use with <code>copy()</code> by {@link ObjectMapper#copy()}\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "isEnabled"
                    },
                    {
                        "start_node": "isEnabled",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "DeserializationContext"
                    },
                    {
                        "start_node": "DeserializationContext",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "DeserializationContext"
                    }
                ],
                "similarity": 0.087234266948264,
                "end_line": 255,
                "signature": "com.fasterxml.jackson.databind.DeserializationContext(DeserializationContext src)"
            }
        ],
        "classes": [],
        "issues": [
            {
                "content": "TL;DNR:\r\n\r\nFix included in:\r\n\r\n* 2.14.0 once released (until then, 2.14.0-rc1 and rc2)\r\n* 2.13.4.2 micro-patch (jackson-bom 2.13.4.20221013). (NOTE: 2.13.4.1/2.13.4.20221012 have an issue that affects Gradle users)\r\n* 2.12.7.1 micro-patch  (jackson-bom 2.12.7.20221012)\r\n\r\n-----\r\n\r\n(note: similar to #3582 )\r\n(note: originally found via oss-fuzz https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020)\r\n\r\nImplementation of methods like `_parseBooleanPrimitive` (in `StdDeserializer`) uses idiom:\r\n\r\n```\r\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\r\n                p.nextToken();\r\n                final boolean parsed = _parseBooleanPrimitive(p, ctxt);\r\n                _verifyEndArrayForSingle(p, ctxt);\r\n                return parsed;\r\n            }\r\n```\r\n\r\nto handle unwrapping. While simple this exposes possibility of \"too deep\" nesting and possible problem with resource exhaustion in some cases. We should change this similar to how #3582 was handled.\r\n\r\n\r\n\n",
                "distance": 0,
                "title": "Add check in primitive value deserializers to avoid deep wrapper array nesting wrt `UNWRAP_SINGLE_VALUE_ARRAYS` [CVE-2022-42003]",
                "name": "root",
                "path": [],
                "issue_id": "root",
                "similarity": 2.0,
                "type": "issue"
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "3621",
                "type": "issue",
                "content": "# What does this PR do?\r\n\r\nAs discussed in https://github.com/FasterXML/jackson-databind/issues/3590 \r\n\r\nHere is a PR with \r\n\r\n- a cherry pick of the related changes \r\n- updates release notes for a potential 2.13.4.1\n\n",
                "source_code": null,
                "distance": 0.25,
                "title": "[2.13.x] Add check in primitive value deserializers to avoid deep wrapper array nesting wrt UNWRAP_SINGLE_VALUE_ARRAYS [CVE-2022-42003]",
                "name": "pr#3621",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    }
                ],
                "similarity": 0.6969294267560769,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "3590",
                "type": "issue",
                "content": "TL;DNR:\r\n\r\nFix included in:\r\n\r\n* 2.14.0 once released (until then, 2.14.0-rc1 and rc2)\r\n* 2.13.4.2 micro-patch (jackson-bom 2.13.4.20221013). (NOTE: 2.13.4.1/2.13.4.20221012 have an issue that affects Gradle users)\r\n* 2.12.7.1 micro-patch  (jackson-bom 2.12.7.20221012)\r\n\r\n-----\r\n\r\n(note: similar to #3582 )\r\n(note: originally found via oss-fuzz https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020)\r\n\r\nImplementation of methods like `_parseBooleanPrimitive` (in `StdDeserializer`) uses idiom:\r\n\r\n```\r\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\r\n                p.nextToken();\r\n                final boolean parsed = _parseBooleanPrimitive(p, ctxt);\r\n                _verifyEndArrayForSingle(p, ctxt);\r\n                return parsed;\r\n            }\r\n```\r\n\r\nto handle unwrapping. While simple this exposes possibility of \"too deep\" nesting and possible problem with resource exhaustion in some cases. We should change this similar to how #3582 was handled.\r\n\r\n\r\n\n\n\nComment by cowtowncoder:\nMethods to update (and regression test):\r\n\r\n* `_parseBooleanPrimitive()`\r\n*  `_parseBytePrimitive()`\r\n* `_parseShortPrimitive()`\r\n* `_parseIntPrimitive()`\r\n* `_parseLongPrimitive()`\r\n* `_parseFloatPrimitive()`\r\n* `_parseDoublePrimitive()`\r\n* `_parseDateFromArray()` (maybe?)\r\n\r\nAlso note that method `_deserializeWrappedValue()` implements checks although cannot quite be called as-is.\r\nSimilarly, `BeanDeserializer._deserializeFromArray()` at around line 632 has similar checks.\n\nComment by henryrneh:\nHello dear @cowtowncoder,\r\n\r\nI am Henry from Code Intelligence. First of all thank you for your quick fixes of this issue!\r\n\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020\r\n\r\nIs this issue regarded as a security issue? If yes, we are thinking about applying CVE for it, so the community knows about it and will update to the latest version of jackson-databind.\r\n\r\nThank you for your fixes and support for OSS-Fuzz!\r\n\r\nBest regards,\r\nHenry \n\nComment by cowtowncoder:\n@henryrneh Same as #3582 (see my comments there).\n\nComment by henryrneh:\n@cowtowncoder thank you :+1: \n\nComment by DavidKorczynski:\nThis issue was found by a fuzzer written by the Ada Logics team and is part of an ongoing security assessment. @henryrneh can you please ensure the issues you report are found by the fuzzers written by your team (https://github.com/google/oss-fuzz/blob/master/projects/jackson-core/JsonFuzzer.java and https://github.com/google/oss-fuzz/blob/master/projects/jackson-databind/ObjectReaderFuzzer.java) then we'll take care of those from our fuzzers.\n\nComment by henryrneh:\nI already canceled the application. We will do our best to try not to apply CVEs for fuzz targets written by AdaLogics, however we will need some assitance or notification by you to know who wrote which fuzz target, because OSS-Fuzz is not designed to support this, maybe you can use some special prefix in the fuzz target name so it's more obvious for us so we can filter it out?\n\nComment by pjfanning:\n@henryrneh the disclosure in https://nvd.nist.gov/vuln/detail/CVE-2022-42003 should really have been delayed until jackson-databind v2.14.0 was released. The RC should have been given a good chance to be tested and an orderly release of 2.14.0 done when it is ready. Now we risk having people clamouring for an early release of 2.14.0.\r\n\n\nComment by DavidKorczynski:\n@pjfanning -- @AdamKorcz and I applied for this CVE and was done in coordination with the current audit of jackson. We coordinated this with Tatu in terms of agreeing we should apply for CVEs for these issues.\n\nComment by jgoeres:\nOur OWASP scan just ran into this finding for our use of jackson-databind 2.13.3. We are very hesitant to go to an RC of 2.14 (and of course fully understand that this issue cannot change the release plans for 2.14, so we will _not_ join the crowd that is pushing for an \"early release of 2.14\" @pjfanning  :-)). \r\nBut since 2.13 is an actively maintained branch according to https://github.com/FasterXML/jackson#active-developed-jackson-2x-branches, I assume a fix will be made available there as well? Any activities or maybe even an ETA for that?\r\n\n\nComment by pjfanning:\n@jgoeres @alzimmermsft are you even using the UNWRAP_SINGLE_VALUE_ARRAYS option?\n\nComment by alzimmermsft:\nI'll second what @jgoeres, that we're getting security alerts around usage of Jackson 2.13.4 and won't be able to upgrade to the 2.14 RC any time soon and downstream consumers of our SDKs will also get alerts as well. We aren't using `UNWRAP_SINGLE_VALUE_ARRAYS` but a lot of noise will still be caused.\r\n\r\nEdit:\r\n\r\nI know that the fix for this issue now results in an exception being thrown, which is a runtime breaking change within a patch release, but there has been prior art on this being accepted with the fix for https://github.com/FasterXML/jackson-databind/issues/2816. There was also API changes as well, though looking at the fix for this issue the shared method could be made non-protected if it's backported and shouldn't be exposed.\n\nComment by pjfanning:\n> @pjfanning -- @AdamKorcz and I applied for this CVE and was done in coordination with the current audit of jackson. We coordinated this with Tatu in terms of agreeing we should apply for CVEs for these issues.\r\n\r\nJust watch the comments flow in looking for special attention now this change is made public. I've already had https://github.com/swagger-akka-http/swagger-akka-http/issues/342 \r\n\r\n\n\nComment by jgoeres:\n@pjfanning \r\nWe have roughly dozen microservices spread across as many teams, we haven't checked for all of them. But even if none of them used that setting, scans done in various places (both within our organization, but also by customers that run this on-prem) will find the lib and this will lead to irritation and demands to resolve it by updating even if we claim that it is not exploitable.\n\nComment by cowtowncoder:\n@DavidKorczynski I think we need coordinate better in future: my understanding was that a CVE would be filed, I'd be notified with id allocated (so I can update this issue, release notes), but CVE only made public once official release was out.\r\nBut perhaps I am assuming there is a mechanism that does not exist between allocating an id and making it available for the public.\r\n\r\nWhat is needed at minimum, at any rate, is the linkage between CVE and issues. The problem right now is that users email me or file issues asking \"what's up with CVE-2022-xxxx\" and then I have to go digging. It's not a huge effort of course but is an interruption, and something we can avoid by collaboration.\r\n\r\nWe may also need to discuss some of finer details: in this case I hope I mentioned (but perhaps I didn't?) that this setting is disabled by default -- that should have an effect in ranking.\r\n\r\nI realize I did not quite realize everything that needs to be discussed before I say it's fine to proceed with CVE filing.\r\nLive and learn. Thank you everyone.\r\n\n\nComment by cowtowncoder:\nNote: also added the \"sibling\" CVE marker (2022-42004) for #3582.\n\nComment by sbernard31:\n@cowtowncoder do you know approximately when 2.14.0 will be released ?\r\nWe plan to release a new version of our library soon and I would like to know that to decide if we should wait for 2.14.0 or go with 2.14.0-rc1.\n\nComment by rzo1:\nI agree with @sbernard31 - any ETA for 2.14.0 final would be great as we are also looking ahead to go for a new release vote soon.\n\nComment by pjfanning:\nSee https://groups.google.com/g/jackson-dev/c/RuiMDNM3vpQ/m/FgLnTxBPAwAJ and follow that thread for updates\n\nComment by sbernard31:\nI understand the final 2.14.0 release is for  _\"maybe around mid-October in the best case scenario.\"_\r\nSo we will go for 2.14.0-rc1 fo now. \r\n\r\n@pjfanning  thx for the answer :pray: \n\nComment by cowtowncoder:\n2.14.0 will be out when it's ready. We are too small a project to have much of an estimation process. But I think that:\r\n\r\n1. I want to do 2.14.0-rc2 due to number of recent fixes, changes\r\n2. Java One is on October 17 - 20, and I'll attend, probably won't get 2.14.0 before\r\n3. So 2.14.0 out, I hope, by end of October 2022.\r\n\r\nAs to 2.14.0-rc1 -- as usual, please do note that it is not a Production release. Use at your own risk. That said, no critical problems have been found so far.\n\nComment by cowtowncoder:\n@sbernard31 Please, whatever you do, please DO NOT RELEASE A PUBLIC VERSION with 2.14.0-rc1 dependency. That would add non-production dependencies throughout ecosystem.\r\n\r\nIf releasing RC, pre-release, alpha, beta etc, those are fine; most dependency tracking systems recognize these as non-production releases.\r\n\n\nComment by sbernard31:\nThx @cowtowncoder for prompt answer.\r\nIt's for a milestone release so I guess it's OK ?\r\n\r\n>  please DO NOT RELEASE A PUBLIC VERSION with 2.14.0-rc1 dependency. That would add non-production dependencies throughout ecosystem.\r\n\r\nI will not  but I will not be surprised if some Jackson consumers do that reading : \r\n```\r\nIn FasterXML jackson-databind before 2.14.0-rc1, resource exhaustion can occur because \r\nof a lack of a check in primitive value deserializers to avoid deep wrapper array nesting,\r\nwhen the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.\r\n```\r\nAs there is no other available release fixing those issue. :thinking: \r\n\r\n> I want to do 2.14.0-rc2 due to number of recent fixes, changes\r\n\r\nDo you plan to do it today ?\r\n\n\nComment by cowtowncoder:\nNo, I am not planning to release 2.14.0-rc2 today. I hope to do it before Java One -- this weekend would be the earliest; if not, next week.\r\n\r\nOn 2.14.0-rc1: I am fine with users using it if they feel compelled to do so due to \"security\" tools (I wish CVE was not released yet but...). That is their choice. I just hope it will not be automated via dependency resolution.\r\n\n\nComment by chadlwilson:\n> @DavidKorczynski I think we need coordinate better in future: my understanding was that a CVE would be filed, I'd be notified with id allocated (so I can update this issue, release notes), but CVE only made public once official release was out. But perhaps I am assuming there is a mechanism that does not exist between allocating an id and making it available for the public.\r\n\r\n@cowtowncoder the mechanism definitely exists with MITRE to reserve and allocate a CVE independently of disclosure, which is normal practice. Indeed if one uses GHSA to raise ones security isues you can get GitHub to manage this process for you as a CVE Numbering Authority, as well as collaborate on the text in GitHub with those who raise the issue, leaving maintainers able to manage the disclosure alongside, or after a release is available.\r\n\r\nBased on what I observed with the set of ossfuzz SnakeYAML vulns in the last few months and now this, the well intentioned and otherwise good work within ossfuzz is in some cases unleashing a torrent of noise on already limited OSS dev time due to the way our current generation of tools work (dependency checkers etc), complexity of dependency trees and then overreaction from certain ops/security folk who ignore important context and for some reason put blind trust in the CVE process (which is remarkably, err, subjective and subject to abuse IMHO).\r\n\r\nUnfortunately this case does not seem like 'responsible' disclosure to me. I fear that if we as a community create noise like this, we take away from dev time (OSS and users alike) to actually address the most important security issues - instead replacing it with devs having to understand or explain risk severity, evaluate environmental context/feature usage yada yada, rather than just being able to upgrade and move on (ideally bot-and-test-automation assisted) - without having to think about whether one is affected or not.\n\nComment by cowtowncoder:\nVery well put @chadlwilson.\n\nComment by jgoeres:\n> I'll second what @jgoeres, that we're getting security alerts around usage of Jackson 2.13.4 and won't be able to upgrade to the 2.14 RC any time soon and downstream consumers of our SDKs will also get alerts as well. We aren't using `UNWRAP_SINGLE_VALUE_ARRAYS` but a lot of noise will still be caused.\r\n> \r\n> Edit:\r\n> \r\n> I know that the fix for this issue now results in an exception being thrown, which is a runtime breaking change within a patch release, but there has been prior art on this being accepted with the fix for #2816. There was also API changes as well, though looking at the fix for this issue the shared method could be made non-protected if it's backported and shouldn't be exposed.\r\n\r\nSince everybody seems to be only talking about fixing this for 2.14 - is the verdict out yet if there will be a fix for that on 2.13.x, for the IMNSHO well-founded reasons explained by @alzimmermsft and myself?\n\nComment by pjfanning:\nthe discussion about whether a v2.13 patch is made is on https://github.com/FasterXML/jackson/discussions/126\n\nComment by cowtowncoder:\nAs per @pjfanning provided link, my thinking is that it is somewhat risky to backport and hence 2.14.0 only.\r\n\r\nIt is also not necessarily the case that I'd have any time to release 2.13.5 sooner than 2.14.0: my time to use on Jackson is limited and I need to prioritize it heavily.\r\n\n\nComment by plaird:\n@[chadlwilson](https://github.com/chadlwilson)\r\n> unleashing a torrent of noise on already limited OSS dev time....and then overreaction from certain ops/security folk who ignore important context and for some reason put blind trust in the CVE process (which is remarkably, err, subjective and subject to abuse IMHO).\r\n\r\nTotally agree, and it goes beyond this unfortunately. Those of us who operate within regulatory frameworks (e.g. gov) have contractural obligations to remediate within specific time frames. We aren't just debating with overzealous sysadmins, we are beholden to external auditors who aren't very interested in the mitigating context. A vuln is a vuln to them.\n\nComment by cowtowncoder:\nYes @plaird this is very true. At my day jobs I have had a chance to observe this as well. It's a regular mess when all of these things collide... assumptions made on validity of specific vulnerability reports, inflexibility of modeling and so on.\n\nComment by cowtowncoder:\nOk, on backporting. So, I am really time-bound and focused on getting 2.14 out -- 2.14.0-rc2 was released today.\r\n\r\nBut I would consider micro-patch for `jackson-databind`, if anyone has time to do a PR against 2.13 (just cherry-picking changes needed here).\r\nIf so, I could release `2.13.4.1` for databind and matching `jackson-bom` as this does not take very long. Unlike spending half a day to push out 2.13.5 with no real changes except for this one thing.\r\n",
                "source_code": null,
                "distance": 0.5,
                "title": "Add check in primitive value deserializers to avoid deep wrapper array nesting wrt `UNWRAP_SINGLE_VALUE_ARRAYS` [CVE-2022-42003]",
                "name": "issue#3590",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    }
                ],
                "similarity": 0.6742975419173748,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "3582",
                "type": "issue",
                "content": "Fix included in\r\n\r\n* 2.13.4\r\n* 2.12.7.1 micro-patch (jackson-bom 2.12.7.20221012)\r\n\r\n----\r\n\r\n(note: found by oss-fuzz, see: https://bugs.chromium.org/p/oss-fuzz/issues)\r\n\r\nCurrently feature `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS` is supported by most types, and deserializers tend to implement support using recursion, effectively allowing multiple nested layers of JSON Arrays to be unwrapped.\r\nThis is not a feature to support but just an implementation detail; ideally we should only allow a single JSON Array to wrap a value.\r\n\r\nI think I have removed ability for deeper nesting from some other types so there may be some prior art.\r\n\r\n\n\n\nComment by henryrneh:\nHello dear @cowtowncoder,\r\n\r\nI am Henry from Code Intelligence. First of all thank you for your quick fixes of this issue!\r\n\r\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50490\r\n\r\nIs this issue regarded as a security issue? If yes, we are thinking about applying CVE for it, so the community knows about it and will update to the latest version of jackson-databind.\r\n\r\nThank you for your fixes and support for OSS-Fuzz!\r\n\r\nBest regards,\r\nHenry\n\nComment by cowtowncoder:\n@henryrneh I think it is reasonable to file a CVE for this, although one caveat is that it is only applicable if users enable specific `DeserializationFeature` and not with vanilla (default) setting of `ObjectMapper`. So that should probably at least be reflect in applicability -- I do not have any statistics of how common enabling this feature is but it probably is minority of usage.\r\n\n\nComment by henryrneh:\n@cowtowncoder thanks for your reply and info! We will communicate the information and handle the application to Google. Many thanks! \n\nComment by DavidKorczynski:\nThis issue was found by a fuzzer written by the Ada Logics team and is part of an ongoing security assessment. @henryrneh can you please ensure the issues you report are found by the fuzzers written by your team (https://github.com/google/oss-fuzz/blob/master/projects/jackson-core/JsonFuzzer.java and https://github.com/google/oss-fuzz/blob/master/projects/jackson-databind/ObjectReaderFuzzer.java) then we'll take care of those from our fuzzers.\n\nComment by henryrneh:\nI already canceled the application. We will do our best to try not to apply CVEs for fuzz targets written by AdaLogics, however we will need some assitance or notification by you to know who wrote which fuzz target, because OSS-Fuzz is not designed to support this, maybe you can use some special prefix in the fuzz target name so it's more obvious for us so we can filter it out?\n\nComment by DavidKorczynski:\n> We will do our best to try not to apply CVEs for fuzz targets written by AdaLogics\r\n\r\nGreat, thanks! \r\n\r\n> we will need some assitance or notification by you to know who wrote which fuzz target\r\n\r\nDo the links I provided above suffice?\r\n\r\n\n\nComment by henryrneh:\nThank you that works! In the future when AdaLogics add a new fuzz target please let us know or add some prefix to the name, so this will not happen again\n\nComment by DavidKorczynski:\n> Thank you that works! In the future when AdaLogics add a new fuzz target please let us know or add some prefix to the name, so this will not happen again\r\n\r\nsounds good -- I'll also send over an email after the assessment so you can see details about the findings we got using Jazzer\n\nComment by henryrneh:\nGreat, thank you!",
                "source_code": null,
                "distance": 0.25,
                "title": "Add check in `BeanDeserializer._deserializeFromArray()` to prevent use of deeply nested arrays [CVE-2022-42004]",
                "name": "issue#3582",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#3582"
                    }
                ],
                "similarity": 0.6377278630818106,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "2816",
                "type": "issue",
                "content": "**EDIT**: related to to CVE-2020-36518 (see https://nvd.nist.gov/vuln/detail/CVE-2020-36518)\r\n\r\n**EDIT**: Fix included in\r\n\r\n* 2.14.0\r\n* 2.13.3:\r\n    * Was also included  in 2.13.2.1 and 2.13.2.2 (see https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.13); to be used with `jackson-bom` version `2.13.2.20220328`\r\n* 2.12.6.1: (see https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12)\r\n    * use with `jackson-bom` version `2.12.6.1.20220326`\r\n\r\n**EDIT**: included as one of Snyk's \"top-10 vulns of 2022\" CVEs -- see https://go.snyk.io/snyk-top-10-open-source-vulnerabilities-dwn-typ.html\r\n\r\n-----\r\n\r\nCurrent implementation `UntypedObjectDeserializer` is relatively expensive for deeply nested Object and Array values as it uses recursion even for \"vanilla\" case (one where there are no custom `List`/array or `Map` deserializers).\r\nIn practical terms it is possible to exhaust typical modest JVM memory with documents having about ten thousand levels of nestings, due to size of call stack from recursive calls.\r\n\r\n*NOTE*: specifically this ONLY APPLIES if the target type is \"untyped\" or generic `Collection<Object>` / `Map<String, Object>` -- it DOES NOT APPLY to cases where target is POJO (except if POJO itself has \"untyped\" property or properties).\r\n\r\nSimilar issue was already solved wrt `JsonNode` (see #3397), included in 2.13.0; this might show a way to approach this problem: by replacing simple recursion with iteration, either completely or at some inner levels.\r\n\r\nAlso note that it may ultimately be necessary to have lower-level constraints for streaming parser too, see: https://github.com/FasterXML/jackson-core/issues/637\r\n\r\nIdeally it should be:\r\n\r\n1. Possible to handle at least tens of thousands of levels of nesting (100k should be processable with 256M heap, say)\r\n2. Have streaming level limits that -- by default -- block documents with more than limit we deem safe (less than 100k -- perhaps 10k or something, to be determined).\r\n\r\nThis issue is specifically about (1) as (2) is about `jackson-core`.\r\n\n\n\nComment by cowtowncoder:\nLooks like nesting of about 2000 works, 3000 fails, with default settings for both Arrays and Objects.\n\nComment by cowtowncoder:\nTagging as \"performance\" (since resource consumption of call stack causes the exception). Also added similar test for `JsonNode`. Hoping to eventually tackle for these types but realistically support from streaming parser (jackson-core) is probably needed (will file separate ticket) for more general complexity limits for input documents.\n\nComment by cowtowncoder:\nFWTW, similar issues does NOT affect `JsonNode`, as of Jackson 2.13.0 and later on.\r\nShould have created separate issue to point to, but iterate version of `JsonNodeDeserializer` was merged in at around March 2021.\r\nWould be great to achieve the same here for 2.14.\r\n\r\nCould start with `UntypedObjectDeserializer.Vanilla` first, see if generalizable to full case (should be).\r\n\n\nComment by meier-th:\n@cowtowncoder , could you please clarify if the same fix is planned to be backported to the versions `2.12.x` and `2.11.x` of Jackson?\n\nComment by cowtowncoder:\n**EDIT**: fix actually backported, see initial Description (now Edited as well) for details.\r\n\r\n-----\r\n\r\n@meier-th Very unlikely that I would try to backport this to anything prior to 2.14.0. The new implementation probably has non-trivial chance of regression and this functionality is widely used. Note that no implementation yet exists, but I fully intend to work on this to try to get it done for 2.14.0  (or someone else could beat me to it).\r\n\n\nComment by AlvinYueChao:\n@meier-th I'm sure that the same issue existing in `2.12.x` and `2.11.x`. May I know the fixing plan ? if the issue can only be fixed by upgrading to `2.14.x`, when do you plan to release this version ?\n\nComment by cowtowncoder:\nOh fucking great. Someone decided to file an CVE for this one. \r\n\r\nSurely teaches me to file issues on things I want to work on -- and then some Very Nice Person going to file an CVE to freak out everybody.\r\n\r\n\n\nComment by wsdng:\nI recommend that you simply throw some error if the nesting is to deep to cope with. You could improve the nesting depth later on, but you (and we users) will get rid of this annoying cve.\n\nComment by TaylorSMarks:\nYou could just add a try/catch around UntypedObjectDeserializer's entire deserialize method. The catch clause could just be:\r\n\r\n    } catch (StackOverflowError soe) {\r\n        throw new JsonMappingException(\"JSON is too deeply nested.\", soe);\r\n    }\r\n    \r\nThen instead of throwing an undeclared/unchecked runtime error (StackOverflowError), it throws a declared/checked JsonMappingException. That should mean anyone calling the function is actually catching the exception and hopefully doing something appropriate instead of letting their application fail in an unexpected way.\r\n\r\nI tested the above on the 2.13 branch - is it simple enough to just release that as a 2.13.3? I wasn't sure whether it would actually be appreciated or not so I didn't make a PR, and I'm not sure if there's other spots (or a better spot) to check for the StackOverflowError at. But I can confirm I did it locally and that it compiles. The currently failing test could be changed to expect a JsonMappingException instead of expecting an object to be returned.\r\n\r\nEdit: Nevermind. Making a PR was simple enough, so I went ahead and did it. I included a new passing test case. The PR is against branch 2.13, so it could be released as a 2.13.3. The fix could likely easily be applied to earlier branches as well. I figure 2.14 will have an actual fix so this patch wouldn't be helpful on that branch.\r\n\r\nhttps://github.com/FasterXML/jackson-databind/pull/3416\n\nComment by cowtowncoder:\nFirst of all: thank you everyone for your ideas, input, help. Much appreciated!\r\n\r\n@wsdng That is one possibility, but due to statelessness of deserializers requires a bit of refactoring. It also would be better to add limits at streaming level (there is a separate issue there) but I do agree that there's timing issue where ideally this would be tackled first.\r\nSince I have the general idea -- of not having to use nesting counters -- from earlier `JsonNodeDeserializer` work all I need is time to work on this.\r\nI did consider simple (conceptually) counter approach earlier and only abandoned that since solving it in (IMO) better way by avoiding recursion. This is (I think) better esp. eventually when we get streaming level general limits.\r\n\r\n@TaylorSMarks unfortunately I don't think that approach is workable: by the time SOE is thrown the damage is done -- all catching would do would be to give slightly friendlier exception message.\r\nWhile that can be useful in itself (and POJO (de)serializers do this, I think) I don't think it helps us here, unfortunately.\r\n\r\n\r\n\r\n\n\nComment by memoricab:\nHey, thanks everyone and @cowtowncoder for this library.\r\n\r\nI just wanted comment that; unfortunately, our nexusiq instance started to fail our builds by this issue as CVE indexed 7.5 HIGH severity. I think the only solution is to waive this CVE for now. \r\n\r\nBtw, still planned in 2.14? Not possible to patch only this issue in 2.13.3?\r\n\r\n\n\nComment by TaylorSMarks:\n@cowtowncoder - I have approval to spend a day of company time on fixing this. Our company uses Black Duck for security scanning, which is flagging all versions of Jackson-databind for having this issue.\r\n\r\nI'm hoping for a solution that's simple enough to implement in a few hours, factoring in that I'm not particularly familiar with this project (I wrote a few custom deserializers a few weeks ago - that's the most exposure I had prior to downloading/compiling/running the tests so that I could make the PR last night.)\r\n\r\nFixes I can think of, in order of how simple they'd be to implement/test:\r\n\r\n1 - Catch the SOE and throw a checked exception. This should improve stability of the code calling it, but it has the issues you mentioned.\r\n\r\n2 - Add a counter, maybe to the DeserializationContext? Everytime we enter an array or object, increment the counter. When we return, decrement it. If the counter exceeds a predefined depth, throw an exception. What's a reasonable default for the max depth? 20? 100? 200? In the exception message mention how to configure it to allow for more deeply nested objects. This has the same benefits as what I did for the PR, and now additionally it means we intentionally limit how much resources are consumed by a malicious payload. The downside is there's some cost to having to keep track of how deep we are. The cost seems acceptable to me.\r\n\r\n3 - Don't make Vanilla.mapArray and Vanilla.mapObject separate methods - just include them straight in Vanilla.deserialize. I question the value of even mentioning this. It's hideous and decreases maintainability. The only positive thing to say about it is it doubles the maximum depth of the payload that can be handled before it throws a Stack Overflow Error.\r\n\r\n4 - Removing recursion. I suspect there's a lot of existing code that I haven't looked at that I'd need to understand and rework to do this. I think it's worth pointing out that, like 3 above, this doesn't really fix the issue, though. You still have the potential to consume all available memory and then throw an OutOfMemory exception.\r\n\r\nI'm pretty sure the second of the options I listed is best from a security perspective. As soon as we realize it's not a serious payload, we're rejecting it, minimizing wasted resources and throwing a checked exception which the calling code will know they have to handle somehow. I'd probably also leave what I already did yesterday for the PR (the first of the proposals)... leaking a runtime exception if they set the parameter too high and they received a payload that's too big doesn't seem great.\r\n\r\nI'll probably do the second option I listed above and make a PR for it in a few hours unless I hear back from you. How quickly could a 2.13.3 be released? I don't know what the release process for the library is...\n\nComment by cowtowncoder:\nOk, starting in reverse order.\r\n\r\n2.13.3. I guess due to high visibility, it may be necessary, despite non-trivial regression risk.\r\nRelease takes 2-4 hours for me; Jackson currently is not part of my daytime job. So it's weekend voluntary work for me, essentially. If and when CVE was solved I'd say 3-10 days after that.\r\nWell, except... this would qualify for a micro-patch, 2.13.2.1. That can be released much faster since it is only 2 repos (Jackson-databind and Jackson-bom). I think that'd be the way to go.\r\n\r\n\r\n\n\nComment by cowtowncoder:\nAs to suggested approaches, my initial quick thoughts:\r\n\r\n1. Not worth pursuing, IMO.\r\n2. Something I have considered and may be viable -- selecting default value is problematic indeed; making it configurable even bigger issue since there's no clean API to extend. AND if this is temporary... in fact I would leave it non-configurable altogether at first, waiting for better solution IF this was pursued\r\n3. Yeah just doubling does not really seem like worth the effort.\r\n4. This is the approach I would take (and am planning to take): have a look at `JsonNodeDeserializer` which did this for 2.13; can contrast with earlier (2.12) implementation.\r\n\r\nAlso on (2): I don't think counter should go in `DeserializationContext -- properly if this approach is taken should be in streaming (Jackson-core); otherwise maintaining the counter leads to really ugly code, possibly reducing performance (wrt code paths, optimization). Instead I think if done it should remain fully encapsulated within `UntypedObjectDeserializer` (but then also must be passed as a new argument).\r\n\r\nAs to (4) \"not fixing\", I agree and disagree. Correct, fundamentally one can still run out of resources with big enough input. But to me the initial point is that there is difference between say, \"only 2000 levels\" (document of 2000 characters) and something like \"only 1 million levels\" (megabyte document). So this fix would change the nature of problem; you cannot just send a small document, you need to be able to send a very much bigger one.\r\n\r\nBut I think bigger reason why I think this makes sense is that I think that fundamentally limits for document aspects should go through this:\r\n\r\nhttps://github.com/FasterXML/jackson-core/issues/637\r\n\r\nso that the ultimate protection is via global document limits (\"maximum nesting: 10,000 levels\"), but we also make default deserializers more robust to let us keep the default document limits rather loose.\r\n\r\nSo: I'd go for (4), similar to handling of `JsonNode`: and for 2.14 try to get general document limits for streaming parser. I'd probably be ok for (2) as temporary solution, to be removed once (4) is implemented.\r\n\n\nComment by TaylorSMarks:\n@cowtowncoder - This PR has changed from just catching a Stack Overflow Error and rethrowing a JsonMappingException to instead tracking the nesting depth and throwing if it's \"Too Deep\".\r\n\r\n256 was chosen as the max depth. It's mostly arbitrary. I looked into the maximum folder depth allowed on different platforms - it's less than 130 on Windows, less than 512 on macOS. I don't hear people complaining that they can't nest their folders any deeper on Windows, so... I figured 256 was a safe maximum depth for json.\r\n\r\nThe unit tests were updated. It'll verify that 250 nested arrays or objects will deserialize properly. It verifies that 300 nested arrays or objects throws a JsonParseException.\r\n\r\nIf you're happy with this, then I look forward to seeing 2.13.3 or 2.13.2.1 or whatever you choose to name it being released soon.\r\n\r\nRegarding making the max depth configurable - I looked at all the other configurable settings for an hour before giving up on doing that. I guess maybe the simplest option for making the max depth configurable would be to just read a system property? I'm not sure if anything else in Jackson is configured via system properties, though.\n\nComment by abdullahali99:\nVersion 2.13.2 is still vulnerable (high)\n\nComment by schlm3:\nI can not understand why this becomes a CVE with a \"high\" rating.\r\nDOS attack, really?\r\nSuch a StackOverflow occurs after about 500ms when I try this here. Means an attacker would get the error after that time, which seems not to be too high for me. \r\nMinimal effort on flow control on the http level (which you need to have in place anyway!) is enough to mitigate this.\r\nOr do I miss something here?\n\nComment by yawkat:\n@schlm3 You can also exhaust some heap this way. However that will probably just lead to an error for the attacker also, not actual DoS for other users. I guess an attacker could open a connection, consume a large amount of memory in UntypedObjectDeserializer, and then keep it open for a while to put pressure on the heap that affects other users. But yes, the \"high\" CVSS availability impact that justifies the \"high\" CVSS for this vuln seems a bit far-fetched. (easy exploitability is true, though ofc most users aren't using the `UntypedObjectDeserializer` anyway so are not impacted)\r\n\r\nThe \"high\" rating for this vuln is more an issue with the limited info that can be crammed into a single CVSS score.\n\nComment by cowtowncoder:\n@schlm3 I am with you here, I don't quite understand the high rating. And like someone mentioned (I think? but can't see a reference), many other JSON libraries have similar challenges -- so theoretically similar CVE should be filed against GSON, Genson, fast-json, for relevant types (disclaimer: I have not tested personally which ones have similar problem, some might have checks). But the reason Jackson gets the first dibs is due to our popularity: the potential attack vector is bigger, so that's somewhat reasonable I guess. Underhanded compliment if you wish :)\r\n\r\nI have heard that some of the ratings are also auto-generated; or, almost as bad, just using submitters original suggestion with little validation. I sort of understand this in that fully grokking most important aspects is a lot of work, and the torrent of reports is high. It's bit like challenges patent application clerks face in evaluating if an app is actually novel invention -- not enough time to do proper searches; or as in here, dig in the code.\r\n\r\n\n\nComment by abdullahali99:\nIs there any plan to release a fix? 2.14.0?\n\nComment by cowtowncoder:\n@abdullahali99 there is a plan (see PR #3416) which for practical reasons probably must be micro-patch like `2.13.2.1` of `jackson-databind` (along with matching `jackson-bom`).\r\nI hope to get it out some time this week. Really wish system did not cause these stupid fire drills for CVEs of dubious severity rating, but here we are :-)\n\nComment by cowtowncoder:\nMerged the fix in for 2.13; left out for 2.14 and master (3.0) for now. Getting late, will try to get release out tomorrow.\n\nComment by rob-spoor:\n@cowtowncoder I added that as a comment here first, but then decided that https://github.com/opensearch-project/anomaly-detection/issues/436 was a better place to place that comment, so I removed it here.\r\n\r\nI have reproduced this issue with Gson and JSON-B; the code snippet in that comment can easily be adapted to also test others.\n\nComment by jaime-castells:\n@cowtowncoder there is contradictory guidance in the market about your fix release version.  Could you please clarify \"Merged the fix in for 2.13...\"  Is 2.13.* vulnerable?  What is the fix version number?  \n\nComment by yawkat:\n@jaime-castells It has been merged into the 2.13 *branch*, but there has not been a 2.13 *release* yet. The release with the fix will be 2.13.3 (or 2.13.2.1 micro-patch)\n\nComment by zacthompson:\nOut of curiosity, do you think there will be a 2.12.6.1 with the fix? \r\nNot sure what your threshold is for micro-patches on 2.12, or if the 2.13 fix will even backport easily.\r\nhttps://github.com/FasterXML/jackson#active-developed-jackson-2x-branches\n\nComment by cowtowncoder:\nI'd really prefer not to have to backport this, but... based on past experiences I have a feeling I will cave in and do backport :-D\r\n2.12 branch is officially still open, unlike earlier ones. And I suspect `UntypedObjectDeserializer` can actually be merged without problems.\r\n\n\nComment by jeffhubLR:\n@cowtowncoder thank you in advance for your time on this. How this CVE came about is a little ridiculous, and the severity it was given is not very defendable.\r\n@TaylorSMarks thank you for contributing https://github.com/FasterXML/jackson-databind/pull/3416\r\n\r\nMy one and only reason in replying: Open source is not a thankless job. You are appreciated. I checked both your profiles and neither has any way to donate, so this is currently what I have the ability to do.\r\n\r\nThank you!\n\nComment by Syed-Shahul-Hameed:\nHi, Still facing this CVE alert, are there any plan to fix and release next version?\r\nhttps://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-36518\n\nComment by cowtowncoder:\n@Syed-Shahul-Hameed more that I have to spend time on answering this question slower the release is. As soon as I find time -- this is a non-paid voluntary activity for me, alongside a real job and family -- I will make a release.\r\n\r\nIn the meantime I just hope users will eventually push back on security tool vendors that cause all of this stress and fake alarm: Security Circus at its worst.\r\nThis wrt general applicability -- there is an actual potential problem, for some users and usage.\r\nBut not an immediate generally applicable wide-scale thing like remote execution.\r\n\r\n\n\nComment by Syed-Shahul-Hameed:\n> @Syed-Shahul-Hameed more that I have to spend time on answering this question slower the release is. As soon as I find time -- this is a non-paid voluntary activity for me, alongside a real job and family -- I will make a release.\r\n> \r\n> In the meantime I just hope users will eventually push back on security tool vendors that cause all of this stress and fake alarm: Security Circus at its worst.\r\n\r\nThank you @cowtowncoder \n\nComment by rebbuh:\nDoes the new 2.13.2.1 already contain the fix? Sorry, I've got to ask, as there are no release notes.\n\nComment by yawkat:\n@rebbuh Yes it does\n\nComment by jensborrmann:\n@cowtowncoder : kudos for all the work regarding this nasty thing!\r\n\r\nYou mentioned a probable fix for 2.12. What are your current thoughts/plans for that?\n\nComment by jorsol:\n> You mentioned a probable fix for 2.12. What are your current thoughts/plans for that?\r\n\r\nJust quoting cowtowncoder: https://github.com/FasterXML/jackson-databind/issues/2816#issuecomment-1075913619\r\n> more that I have to spend time on answering this question slower the release is. As soon as I find time -- this is a non-paid voluntary activity for me, alongside a real job and family -- I will make a release.\r\n\r\nLeaving this here just in case someone hasn't noticed it: https://tidelift.com/funding/github/maven/com.fasterxml.jackson.core:jackson-databind\r\n\r\nhttps://twitter.com/fasterxml/status/1507198466732175378\n\nComment by cowtowncoder:\n@rebbuh Yes, 2.13.2.1 does contain the fix. Micro-patch release notes are bit tricky to find as they are on minor version page like so:\r\n\r\nhttps://github.com/FasterXML/jackson/wiki/Jackson-Release-2.13\r\n\r\nbut I will update fixed-in version of this issue.\r\n\n\nComment by cowtowncoder:\nOn 2.12.6.1: I will do that, it is only a question of finding time. Right now my time for OSS is limited and although getting this version out is the highest priority item, it has to compete with paying work and family and my personal health (I'm fine, not to worry -- and aim to stay that way! -- but it all takes work).\r\n\r\nSo please be patient: I will update this issue, Tweet, once version is out.\r\n\r\nIn the meantime, anyone able to is recommended to use 2.13.2.1 that is already out.\r\n\r\n\r\n\r\n\r\n\n\nComment by TaylorSMarks:\nWe were able to update to 2.13.2.1 at my company without an issue.\n\nBlackDuck (OSS scanner tool) already recognizes that there is a version 2.13.2.1 and that it fixes the CVE, but the automatic scanner mistook it for being version 2.13.2, so we had to manually verify that we\u2019re only using 2.13.2.1 and update the BlackDuck report to say that.\n\nTaylor\n\n> \n> On Mar 25, 2022, at 14:25, Tatu Saloranta ***@***.***> wrote:\n> \n> \ufeff\n> On 2.12.6.1: I will do that, it is only a question of finding time. Right now my time for OSS is limited and although getting this version out is the highest priority item, it has to compete with paying work and family and my personal health (I'm fine, not to worry -- and aim to stay that way! -- but it all takes work).\n> \n> So please be patient: I will update this issue, Tweet, once version is out.\n> \n> In the meantime, anyone able to is recommended to use 2.13.2.1 that is already out.\n> \n> \u2014\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> You are receiving this because you were mentioned.\n\n\nComment by bbarman4u:\n@TaylorSMarks or others, sorry to ask a noob question, but the 2.13.2.1 does not seem to be in the Maven central just yet, how can we upgrade to that micro patch version ?\n\nComment by yawkat:\n@bbarman4u it is on maven central. Only jackson-databind got an update though.\n\nComment by bbarman4u:\n> @bbarman4u it is on maven central. Only jackson-databind got an update though.\r\n\r\nSorry for being lost, I see only the version update up to 2.13.2 here in the Maven Central, when we declare it explicitly in the Maven pom.xml also it does not resolve. \r\nError - `Non-resolvable import POM: Could not find artifact com.fasterxml.jackson:jackson-bom:pom:2.13.2.1`\r\n\r\nFrom Maven Central -\r\nhttps://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind\r\n![image](https://user-images.githubusercontent.com/20643454/160215545-7143af37-dbed-45e6-82df-d8a71adaca73.png)\r\n\n\nComment by yawkat:\nmvnrepository.com doesn't show it yet but it is available.\n\nComment by bbarman4u:\n@yawkat thank you clarifying that for me. I was able to verify that pointing it to below version indeed fixes the issue and the security scan s/w are happy as well. @cowtowncoder Kudos on your exemplary dedication to the community.\r\n\r\n```\t\t\r\n\t\t<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\r\n\t\t\t<artifactId>jackson-databind</artifactId>\r\n\t\t\t<version>2.13.2.1</version>\r\n\t\t</dependency>\r\n```\n\nComment by cowtowncoder:\n@bbarman4u thank you. As to `jackson-bom`, for micro-patches its versioning differs because there is no full matching set of versions, so a timestamp-based fourth part is added: so in this case you can either:\r\n\r\n1. Use `jackson-bom` version `2.13.2` but override version for `jackson-databind`\r\n2. Use `jackson-bom` version `2.13.2.20220324` which does (1) essentially (everything else has version 2.13.2 but `jackson-databind` 2.13.2.1)\r\n\n\nComment by zhanganyuan:\n@cowtowncoder first, thanks a lot for your work! can i update only jackson-databind\u3001jackson-core and jackson-annotations to 2.13.2(or 2.13.2.1), but let jackson-dataformat-xxx and jackson-module-xxx still 2.12.x? as 2.12.6.1 is still on the way, is it compatible to do this?\n\nComment by yawkat:\n@zhanganyuan it depends on the module. Generally 2.12.x does not always work with 2.13.x. However sometimes it will work fine.\n\nComment by cowtowncoder:\n@zhanganyuan As general guidance, no, you should NOT mix different minor versions; exception being that in certain directions you may use \"adjacent\" ones. In particular: \"lower\" component like `jackson-core` MAY have HIGHER minor version than \"higher level\" component. So what is expected to work (but not guaranteed) would be:\r\n\r\n* `jackson-core:2.13.x` but `jackson-databind:2.12.x`\r\n* `jackson-databind:2.12.x` but `jackson-dataformat-xx:2.11.x`\r\n\r\nbut the reverse is not likely to work. This is because API additions for `jackson-core` in 2.12 can only be used by `jackson-databind` 2.12 or later\r\nRule, if any, would really be that:\r\n\r\n* Component A that depends on Component B will require version of B at Same Major Version (mandatory) and Same-or-Higher Minor Version.\r\n\r\nThat said I would strongly recommend attempting to align all minor versions. Patch versions should be freely mixable; you would always want the latest patch of given Major.Minor version.\r\n\r\nI hope this helps.\r\n\n\nComment by cowtowncoder:\nQuick note: I hope to release 2.12.6.1 today (2022-03-26) but there are some on-going discussions about use of `jackson-bom` (see https://github.com/FasterXML/jackson-databind/issues/3428) that I think need to be resolved first. Stay tuned!\r\n\n\nComment by melahn:\n@cowtowncoder another thank you for your work on jackson-databind 2.13.2.1 \n\nComment by cowtowncoder:\nJackson 2.12.6.1 released with jackson-bom 2.12.6.20220326: on its way to Maven Central now.\r\n\r\nDue to #3428 may need to consider releasing 2.13.2.2 too, only for Gradle module metadata.\r\n\n\nComment by JoshDM:\nLooks like https://nvd.nist.gov/vuln/detail/CVE-2020-36518 still hasn't recognized 2.12.6.1; they only appear to recognize 2.13.2.1 at this time.\n\nComment by cowtowncoder:\nIf anyone knows how to submit an update to include exclusion for 2.12.6.1, that'd be great.\r\nI don't know how to do that and will focus on getting 2.13.2.2 out today.\r\n\n\nComment by norrisjeremy:\nYou can send an email to `cpe_dictionary@nist.gov` and ask them to amend the CPE list to reflect that 2.12.6.1 should not be affected.\n\nComment by JoshDM:\nI did that a few hours before I posted the above; they have not yet responded. My e-mail content was:\r\n\r\nSubject: CVE-2020-36518\r\n\r\nFix is patched in 2.12.6.1 for Jackson-databind.\r\n\r\nYou are falsely reporting it as containing the vulnerability and stating that 2.13.2.1 is the only version with the fix. You are incorrect.\r\n\r\nSee https://github.com/FasterXML/jackson-databind/issues/2816 for details\r\n\r\n-Josh\r\n\n\nComment by norrisjeremy:\nThey don't always respond instantly. I've seen it take them several days before they reply back.\n\nComment by JoshDM:\nI've at least submitted PR https://github.com/github/advisory-database/pull/164 to improve CVE-2020-36518 with the 2.12 version fix.\n\nComment by cowtowncoder:\nThank you @JoshDM. I think the omission is just due to update indicating 2.13.2.1 when 2.12.6.1 was not yet available.\r\n\n\nComment by darakian:\n@JoshDM & @cowtowncoder got you guys updated on the GHSA. Thanks for the contributions \ud83d\udc4d \n\nComment by cowtowncoder:\nFinally found time to release:\r\n\r\n* `jackson-databind:2.13.2.2` with corrected GMM manifest\r\n* Optional `jackson-bom:2.13.2.20220328` bill-of-materials that includes version set that includes `jackson-databind:2.13.2.2` overrides over other `2.13.2` components\r\n\r\nPlease let me know if there are further issues; this SHOULD work with Gradle, similar to 2.12.6.1.\r\n\r\n\n\nComment by blazespinnaker:\nFolks, we may want to avoid the editorial chatter on the CVE scores.  Some comments on mitigation and technical exposure make sense, but there are a lot of clients to this library, some very popular ones which expose untyped jackson databind to unauthenticated remote users.  There might be a reason why the severity is in place and we don't want to discourage folks from fixing this.  IMHO, this is not security circus, but an important DOS issue to be fixed.\n\nComment by cowtowncoder:\n@blazespinnaker While I see your point, I have a fundamental problem with the current crop of security scanning tools due to their inability to use anything other than essential On/Off applicability for dependencies. FWTW, following rant is not aimed at you.\r\n\r\n<rant>\r\n\r\nPotential security concerns such as this one -- and I agree this is one for certain subset of users -- cannot be flattened into simple \"yes, everyone is affected at Critical level\" kind of guidance without causing significant amount of overreaction.\r\n\r\nI am not sure what would be a good way to raise awareness of absurdity of the current system, if any; but I cannot but help to wonder how much effort is essentially wasted -- in the sense that value for work is less than almost any other potential upgrade -- because of the dysfunctional severity ranking system.\r\n\r\nTo expand on this point, further; level of vulnerability for asymmetric amplification is defined... where? how? \r\nSo even beyond \"is it Remote Execution?  Is it remote DoS vector?\" question there are many qualitative aspects.\r\nAnd this on top of the fact that almost certainly majority of use cases are not affected because they do not use this mode of reading -- never mind even the other part of whether content comes from untrusted sources.\r\n\r\nSo... yeah. I detest the way things are today, and how the full cost of this system is borne by maintainers.\r\nAnd there is no extra cost for entities that provide information, or for companies that benefit from this system. That is, the cost is for generating issues, but there is no downside for overestimating severity; high severity entries have the same cost as trivial ones.\r\n\r\n</rant>\r\n\r\n\r\n\r\n\n\nComment by yawkat:\n@blazespinnaker nobody is questioning that people parse untrusted json (most people do!), and I'm sure quite a few of those use the affected deserializer. \r\n\r\nHowever, why do you think this is a DoS issue for those affected? The bug fixed here has the potential to throw a stack overflow exception, however that can be handled cleanly (and it *is* handled cleanly eg by app servers), so it is not at all clear how an attacker could cause DoS here. Just causing an error is not DoS, there's other ways to do that, you have to actually affect other users of the service.\n\nComment by blazespinnaker:\n@yawkat That's good context, however this is what I read at the top:\r\n\r\n> Current implementation UntypedObjectDeserializer is relatively expensive for deeply nested Object and Array values as it uses recursion even for \"vanilla\" case (one where there are no custom List/array or Map deserializers).\r\n> **In practical terms it is possible to exhaust typical modest JVM heap sizes** with documents having about ten thousand levels of nestings.\r\n> \r\n> NOTE: specifically this ONLY APPLIES if the target type is \"untyped\" or generic Collection<Object> / Map<String, Object> -- it DOES NOT APPLY to cases where target is POJO (except if POJO itself has \"untyped\" property or properties).\r\n\r\nand further down \r\n\r\nLooks like nesting of about 2000 works, 3000 fails, with default settings for both Arrays and Objects.\n\nComment by blazespinnaker:\n@cowtowncoder Agreed, the scanners are a pain because they are very dumb.  I encourage folks to know their frameworks and use tools like opencve if they can.\r\n\r\nMost folks are aware of this, but for those who aren't - https://owasp.org/www-community/Threat_Modeling  is a great technique to develop an understanding of your frameworks and service.  You only have to do it fully a few times before it becomes second nature and you can almost just do it in your head.\n\nComment by cowtowncoder:\nOk how do we ban https://github.com/apps/whitesource-for-github-com ?! :-p\n\nComment by cowtowncoder:\n@blazespinnaker Ah, good point on my bit misleading description: it gives impression that there is on-going memory retention which is... sort of not the case -- thread stack is exhausted, not heap, and the actual overload is bit different. And at the point of SOE memory retention will disappear.\r\nThis does not mean there is no possibility of DoS -- there is a way to cause excessive load with modest-sized documents -- but my description suggests a bigger problem.\r\n\r\nAnyone have suggestions for a better description; maybe something to copy from an existing issue? :)\r\n\n\nComment by cowtowncoder:\nOne final thing: I also went ahead and released `jackson-bom:2.13.2.1` just so that Gradle Module Metadata issue for `jackson-databind:2.13.2.1` SHOULD be fully resolved. So while there is also `2.13.2.2` of `jackson-databind` (with actual already valid GMM) it seems better not to leave 2.13.2.1 with dangling reference to non-existing module info.\r\n\n\nComment by holgerhaag:\nWondering if there is a 2.13.3 version planned that includes fix for this issue? \r\n\r\n\n\nComment by holgerhaag:\nTo add some context to my question about 2.13.3 - our pom.xml files are structured in a way (with properties) that assigns the same property (version) to all jackson dependencies. The version is never a range, but a fixed version. That can of course be changed, but we prefer fixed versions aiming for repeatable build results. I think we're not the only organization which structures pom.xml files that way.\r\n\r\nSo changing just one dependency to a slightly different version like 2.13.2.2 is of course possible, but requires some work and will have to be rolled back as soon as 2.13.3 (or 2.14.0) comes out. Otherwise we have to remember to keep two properties in sync in pom.xml file which we want to avoid.\r\n\r\nThen again, most important thing is that there is a fix for this CVE and I'd like to thank everybody who has contributed to that.\n\nComment by cowtowncoder:\n@holgerhaag Yes, there will eventually be 2.13.3. But due to effort it takes to release a full set (*) I will only do it when there are enough fixes, and at this point 2.13.2 was just released and there's almost nothing to release.\r\nHence the micro-patch to address this particular concern.\r\n\r\nI don't see 2.13.3 being released within next month or so -- and 2.13.x release cycle has been slow so it may be couple of months.\r\n\r\n(*) Unfortunately there is no current way of me letting others to release new versions; the process is mostly automated (and beyond that mechanic, i.e. simple steps) on per-fasterxml-repo but not across dozen or so repos. It takes between 2 and 4 hours depending on how Sonatype's servers' load is.\r\n\n\nComment by JoshDM:\nFrom NIST (received 20 min ago)\r\n\r\nThank you for bringing this to our attention. We appreciate community input in order to provide the most accurate and up-to-date information as possible. After reviewing publicly available information, we have made the appropriate modifications to reflect that the affected versions are up to (excluding) 2.12.6.1 and from (including) 2.13.0 up to (excluding) 2.13.2.1. Please allow up to 24 hours for the changes to be reflected on the website and in the data feeds. \r\n\r\nV/r,\r\nCommon Platform Enumeration Team\r\ncpe_dictionary@nist.gov\r\n\r\n--\r\n\r\nI just verified it's there: https://nvd.nist.gov/vuln/detail/CVE-2020-36518\n\nComment by yhs0092:\nHi, is this a typo mistake? I find the bom version of 2.12 mentioned above is `2.12.6.1.20220326`, but in the [release notes](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12) it's `2.12.6.20220326`.\r\n\r\n![image](https://user-images.githubusercontent.com/22049770/162757944-049fe11f-ed27-44de-b470-7ee5e4d6b1ab.png)\r\n\n\nComment by MaximilianTews:\nHi @cowtowncoder, any way to determine if one is affected or not?\r\nYou write that UntypedObjectDeserializer needs to be used in combination with Collection<Object> / Map<String, Object> - at least this is what I understand. \r\nI scanned my code and we are not using UntypedObjectDeserializer, however, it might be used by other jackson-databind code that we use. Could you please clarify how to determine if one is affected by this CVE?\n\nComment by jtnord:\n@cowtowncoder \r\n\r\n> 2.12.6.1: (see https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12)\r\nuse with jackson-bom version `2.12.6.1.20220326`\r\n\r\nthe version for the bom here looks incorrect, should be `2.12.6.20220326` ?\r\n\r\nhttps://github.com/FasterXML/jackson-bom/tree/jackson-bom-2.12.6.20220326\r\n\n\nComment by MaximilianTews:\nHi @cowtowncoder, could you please clarify what methods are affected by this vulnerability? I am specifically interested if ObjectMapper.readTree and ObjectMapper.readValue are affected?\n\nComment by yawkat:\nreadTree is not affected, readValue is affected if you use untyped fields somewhere in the object graph youre deserializing\n\nComment by cowtowncoder:\n@MaximilianTews see #2816 for more information. This is just a rewrite of that fix.\r\n\r\nAnd @yawkat is correct: `readTree()` is not affected. `readValue()` MAY be affected BUT ONLY if the nominal type is or includes target type of `java.lang.Object`. Term \"untyped\" in Jackson context means `java.lang.Object` as binding target type (either explicitly, or via raw types, `?` type parameter and so on).\r\n\r\n",
                "source_code": null,
                "distance": 1.0,
                "title": "Optimize `UntypedObjectDeserializer` wrt recursion [CVE-2020-36518]",
                "name": "issue#2816",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#2816"
                    }
                ],
                "similarity": 0.3847597057792366,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "3616",
                "type": "issue",
                "content": "Hi Team,\r\n\r\nWe can see Vulnerabilities found in jackson-databind latest versions i.e. v2.13.4 & v2.13.3 and this reported as high severity \r\nVulnerabilities.\r\n\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-42003\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-42004\r\n\r\nis there any non-vulnerable version available or is there any plan to fix this soon.\r\n\r\n\n\n\nComment by dersvenhesse:\n* https://github.com/FasterXML/jackson-databind/issues/3590 (currently in 2.14.0-rc1)\r\n* https://github.com/FasterXML/jackson-databind/issues/3582 (already in 2.13.4)\n\nComment by iamludal:\n@cowtowncoder any date for the stable 2.14 please?\n\nComment by cowtowncoder:\n@iamludal It is out when it is ready. We will do 2.14.0-rc2 first, then 2.14.0. I wish I worked for Jackson project but I don't; and due to my day job, time to spend on Jackson is somewhat limited.\r\nAt this point, my estimate is 3-4 weeks; by the end of October 2022.\r\n\r\n\n\nComment by iamludal:\n@cowtowncoder No problem, thank you for your quick reply and for your work. Good luck.",
                "source_code": null,
                "distance": 0.75,
                "title": "Vulnerabilities found in jackson-databind v2.13.4 & v2.13.3",
                "name": "issue#3616",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#3616"
                    }
                ],
                "similarity": 0.35935167164716464,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "4016",
                "type": "issue",
                "content": "relates to https://github.com/FasterXML/jackson-core/pull/1055\n\n",
                "source_code": null,
                "distance": 0.75,
                "title": "add cyclic data serialization tests",
                "name": "pr#4016",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#4016"
                    }
                ],
                "similarity": 0.3329153040747214,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "66",
                "type": "issue",
                "content": "I migrated my project to jackson 1.9.9 to jackson 2.0.5\n\nbefore i expected for a list, something like that.\n\n{ \"myObjectBean\" : [ {-myObjectBean-}, {-myObjectBean-} ] }\n\nafter migrating, i had\n\n[ {-myObjectBean-}, {-myObjectBean-} ] \n\nso i added com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE\n\nand now, i have\n\n{ \"ArrayList\" : [ {-myObjectBean-}, {-myObjectBean} ] }\n\ni look the source code, and unfortunately i can't change \"ArrayList\" to \"myObjectBean\".\n\nObviously, \"ArrayList\" is a wrong name ... my function returns a List of MyObjectBean.\n\n\n\nComment by cowtowncoder:\n1.9 to 2.0 upgrade does not quite explain changes, so I need more information.\nSpecifically, what does your object definition look like? Which annotations are you using (Jackson ones, or JAXB compatibility)? Are you using Jackson directly, or via framework like Jersey/RESTeasy/Restlet?\n\n\nComment by sylvek:\nwell, first of all, thank you for your reply.\n\nmy bean is simple without any annotation.\n public class MobileBean { with setters and getters }\n\nI use it from Spring MVC 3.2.BUILD-SNAPSHOT with this configuration.\n\n```\n<bean id=\"JSon\" class=\"com.fasterxml.jackson.databind.ObjectMapper\" />\n<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\" />\n<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\">\n    <property name=\"asyncRequestTimeout\">\n        <value>60000</value>\n    </property>\n    <property name=\"messageConverters\">\n        <list>\n            <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n                <property name=\"objectMapper\" ref=\"JSon\">\n                </property>\n            </bean>\n        </list>\n    </property>\n</bean>\n<bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\">\n    <property name=\"targetObject\" ref=\"JSon\" />\n    <property name=\"targetMethod\" value=\"enable\" />\n    <property name=\"arguments\">\n        <util:constant static-field=\"com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE\" />\n    </property>\n</bean>\n```\n\nand my controller looks like.\n\n```\n@RequestMapping(value = \"\", method = RequestMethod.GET)\n@ResponseBody\n@Commentary(value = \"Lists all valid mobiles.\", returnType = MobileBean[].class)\npublic List<MobileBean> listAllMobiles(@RequestParam(value = \"onlyvalid\", defaultValue = \"true\") String valid)\n{\n    return listMobiles(StringUtils.EMPTY, Boolean.parseBoolean(valid));\n}\n```\n\n\nComment by sylvek:\ni resolved my problem by returning a ListBean containing a my List<MobileBean> thanks :)\n\n\nComment by cowtowncoder:\nGlad to hear you resolved your problem, regardless of what the integration issue was.\n",
                "source_code": null,
                "distance": 0.75,
                "title": "Divergence between JacksonV1 and JacksonV2 about Root Name (especially for Lists)",
                "name": "issue#66",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#66"
                    }
                ],
                "similarity": 0.2988680175152641,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "1495",
                "type": "issue",
                "content": "A simple util  that can check if a given string is a valid json or not.\r\nfeatures\r\n- boolean isValidJSON(String json)\r\n- multiple keys cannot share the same name in an object scope. eg. {\"foo\": \"value1\", \"foo\": \"value2\"}\r\n- other cases that can be updated on each release of specification.\r\n\r\nCan be inside object mapper or be its own thing.\r\n\n\n\nComment by cowtowncoder:\nYou can already do something like:\r\n\r\n     mapper.readTree(string);\r\n\r\nand probably want to enable `JsonParser.STRICT_DUPLICATE_DETECTION` for duplicate checks.\r\n\r\nSo what benefits would an additional method have?\r\n\r\n\n\nComment by dgrahn:\n@cowtowncoder If this was implemented in a way which checked for valid JSON, but didn't do anything with it, it could conceivably be quicker than mapping.",
                "source_code": null,
                "distance": 0.75,
                "title": "Util method to validate if a string is JSON-able",
                "name": "issue#1495",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#1495"
                    }
                ],
                "similarity": 0.29857904474004526,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "2861",
                "type": "issue",
                "content": "**Describe the bug**\r\na JSON with 5000 levels causes a StackOverflowError at deserialize\r\n```\r\n{\"level1\":{\"level2\":{\"level3\":{... {\"level5000\":\"\"}...}}}\r\n```\r\n\r\nPartial stack trace:\r\n```\r\nCaused by: java.lang.StackOverflowError: null\r\n\tat com.fasterxml.jackson.core.util.InternCache.intern(InternCache.java:41)\r\n\tat com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(CharsToNameCanonicalizer.java:489)\r\n\tat com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(CharsToNameCanonicalizer.java:461)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName(ReaderBasedJsonParser.java:1701)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:707)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:648)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n```\r\n\r\n**Version information**\r\n2.11.2  (dependent of spring boot-boot 2.2.6)\r\n\r\n**To Reproduce**\r\nI have a REST application created using spring-boot, which is configured to parse JSON data using Jackson.\r\nWhen the abovesaid JSON data is passed via http, the servlet process crashes.\r\n<details><summary>Detailed trace log (click to expand)</summary><p>\r\n\r\n```\r\norg.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.StackOverflowError\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:523)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:590)\r\n           :\r\n           :\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1618)\r\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1618)\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1618)\r\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:549)\r\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\r\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)\r\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)\r\n\tat org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)\r\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1610)\r\n\tat org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)\r\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1369)\r\n\tat org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)\r\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:489)\r\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1580)\r\n\tat org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)\r\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1284)\r\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\r\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)\r\n\tat org.eclipse.jetty.server.Server.handle(Server.java:501)\r\n\tat org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:383)\r\n\tat org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:556)\r\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:375)\r\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:272)\r\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)\r\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)\r\n\tat org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)\r\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806)\r\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.StackOverflowError: null\r\n\tat com.fasterxml.jackson.core.util.InternCache.intern(InternCache.java:41)\r\n\tat com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(CharsToNameCanonicalizer.java:489)\r\n\tat com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(CharsToNameCanonicalizer.java:461)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName(ReaderBasedJsonParser.java:1701)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:707)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:648)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:871)\r\n\tat com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:654)\t\r\n\t     :\r\n\t     :\r\n```\r\n\r\n</p></details>\r\n\r\n**Expected behavior**\r\nA properties-configurable key specifying the maximum depth of parsing should be available , just like PHP's `json_decode`.\r\n\r\n**Additional context**\r\nn/a\n\n\nComment by GedMarc:\nLOL LOL LOL!!!!!\r\n\r\nI promise you, something else here is the problem xD 5000 nested level on any format structure will crash most machines.\r\nUnrealistic test case. I don't think it is necessary to set a property, or to scan depth before deserialization. Any time this is hit it will always be a user issue\n\nComment by cowtowncoder:\nDuplicate of #2816, and/or jackson-core https://github.com/FasterXML/jackson-core/issues/637; may be tackled at two levels.\r\n",
                "source_code": null,
                "distance": 0.75,
                "title": "nested JSON causes StackOverflowError",
                "name": "issue#2861",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#2861"
                    }
                ],
                "similarity": 0.2801356747826605,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "532",
                "type": "issue",
                "content": "I have a model class like so:\n\n``` java\npublic class PostProject\n{\n    /* The field template of this project */\n    private List< FieldTemplateObject > field_templates;\n\n    /**\n     * @author Damilola Okuboyejo\n     */\n    @JsonFilter( \"FieldTemplateIdFilter\" )\n    public static class FieldTemplateObject\n    {\n      private int     id;\n      private boolean is_inherited;\n      private String  item_type;\n\n      /**\n       * @return the id\n       */\n      public int getId()\n      {\n         return id;\n      }\n\n      /**\n       * @param id\n       *           the id to set\n       */\n      public void setId( int id )\n      {\n         this.id = id;\n      }\n\n      /**\n       * @return the is_inherited\n       */\n      public boolean isIs_inherited()\n      {\n         return is_inherited;\n      }\n\n      /**\n       * @param is_inherited\n       *           the is_inherited to set\n       */\n      public void setIs_inherited( boolean is_inherited )\n      {\n         this.is_inherited = is_inherited;\n      }\n\n      /**\n       * @return the item_type\n       */\n      public String getItem_type()\n      {\n         if( item_type == null )\n         {\n            item_type = PostProject.item_type;\n         }\n         return item_type;\n      }\n\n      /**\n       * @param item_type\n       *           the item_type to set\n       */\n      public void setItem_type( String item_type )\n      {\n         this.item_type = item_type;\n      }\n   }\n}\n```\n\nAnd a filter serializer:\n\n``` java\npublic static class ModelFieldSerializer extends SimpleBeanPropertyFilter\n{\n  @Override\n  protected boolean include( BeanPropertyWriter writer )\n  {\n     return true;\n  }\n\n  @Override\n  protected boolean include( PropertyWriter writer )\n  {\n     return true;\n  }\n\n  @Override\n  public void serializeAsField( Object pPojo, JsonGenerator pJgen,\n        SerializerProvider pProvider, PropertyWriter pWriter )\n        throws Exception\n  {\n     if( pPojo instanceof FieldTemplateObject )\n     {\n        if( (\"id\".equals( pWriter.getName() ))\n              && ((FieldTemplateObject) pPojo).isIs_inherited() )\n        {\n           pWriter.serializeAsOmittedField( pPojo, pJgen, pProvider );\n        }\n        else\n        {\n           super.serializeAsField( pPojo, pJgen, pProvider, pWriter );\n        }\n     }\n  }\n}\n```\n\nI then added the filter to the mapper, like so:\n\n``` java\nSimpleFilterProvider vSimpleFilterProvider = new SimpleFilterProvider();\nvSimpleFilterProvider.addFilter( \"FieldTemplateIdFilter\",\n                        new FieldTemplateObjectFilter() );\n```\n\nAs soon as I attempt to serliaze the model: \n\n``` java\nString vBody = vJsonMapper.writeValueAsString( pModelObject ),\n```\n\nJackson complains about the filter: 'FieldTemplateIdFilter'\nErrorMessage: ... no FilterProvider configured for id FieldTemplateIdFilter (through reference chain: ... ->java.util.ArrayList[0])\n\n\n\nComment by cowtowncoder:\nHmmh. I don't see you actually adding the provider to mapper in code above? It is just constructing a filter. It needs to be registered with mapper, using `mapper.setFilters()`.\n\n\nComment by dokuboyejo:\nThanks @cowtowncoder \nit was an oversight from my part. That resolved the issue.\n",
                "source_code": null,
                "distance": 0.75,
                "title": "JsonMappingException for @JsonFilter for a List<Pojo>",
                "name": "issue#532",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#532"
                    }
                ],
                "similarity": 0.22569886896235078,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "1712",
                "type": "issue",
                "content": "We want to use JsonNode and everything inside immutably.\r\nWe want to know for certain that code would not mutate any of it.\r\n\r\nSaw some discussion in #85 about overriding...\r\ncom.fasterxml.jackson.databind.node.JsonNodeFactory#objectNode\r\n\r\n...but not sure how exactly to go about.\r\nAny suggestions?\n\n\nComment by cowtowncoder:\nThere were lengthy discussions, back and forth, but realistically I don't think this is doable in general with `JsonNode`. Plan so far has been to try to make `TreeNode` useful enough that alternate models could be defined and used by users, to use instead of `JsonNode` (i.e. `JsonNode` would be but one of many implementations).\r\n\r\nThe main problem is that although it is quite possible to define a node hierarchy that is immutable:\r\n\r\n1. It is not really (IMO) possible to create general-purposes hierarchy one that also allows backwards compatibility\r\n2. Immutable implementation is great for some use cases (typically read, never modify; or, build once, don't change), but really cumbersome for others (where actual mutability is required)\r\n3. Although some time was spent on figuring out how sub-classing could be used to allow extension, this may not work well for cases other than perhaps adding a field or two in specific sub-classes.\r\n\r\nand this is assuming that immutability should be real immutability, not a flag that just prevents changes (which I think is clumsy to implement and not necessarily thread-safe).\r\n\r\nHowever: instead of (1), you may be able to specify hierarchy that is specific to your needs.\r\nIf you, `JsonNodeFactory` was indeed envisaged as the way to do it. You would create sub-classes for mutable types (`ObjectNode`, `ArrayNode`), and override methods that would allow mutability.\r\n\r\nOr, if you have full control over creation (... and won't give access to `ObjectMapper`), just simple sub-classing could work too. It all depends on details of use case.\r\n\n\nComment by neopaf:\nthanks for the insight, Tatu. ",
                "source_code": null,
                "distance": 1.0,
                "title": "parse and use as immutable",
                "name": "issue#1712",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#85"
                    },
                    {
                        "start_node": "issue#85",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#1712"
                    }
                ],
                "similarity": 0.1921424918668433,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "85",
                "type": "issue",
                "content": "Yep, me again, and with yet another question...\n\nIs there any reason for the above? Basically, it forbids any other implementation of a Map to be used if ObjectNode is extended.\n\nThis is especially surprising since key order in a JSON object is not significant. What I have tried to do is inherit ObjectNode and make _children an instance of Guava's ImmutableMap. No dice, of course...\n\n\n\nComment by BobKerns:\nIt's valuable that it _be_ a LinkedHashMap, because having irreproducible bugs is nasty. Software with regular hash maps often will fail in irreproducible ways. Using a LinkedHashMap will make the failures reproducible (or occasionally, hide, or even remove, the bug). I recommend using a LinkedHashMap wherever there's any possibilty that you will iterate over the keys, values, or entries. TreeMap is an alternative, albeit with a bit of a cost.\n\nIt can also help with writing unit tests -- you can explicitly test for order dependencies.\n\nHowever, there's almost NEVER any reason to _declare_ a variable or field LinkedHashMap; it's nearly always better to simply declare it Map. The exception would be when you're actually depending on it being a LinkedHashMap and want to enforce it to be supplied that way.\n\nTo really do what fge wants, you probably want to replace the 'new LinkedHashMap<...>()' calls with a protected method he can override.\n\n\nComment by fge:\n@BobKerns :\n\n> It's valuable that it be a LinkedHashMap, because having irreproducible bugs is nasty.\n\nWhat kind of \"irreproducible bugs\"?\n\n> I recommend using a LinkedHashMap wherever there's any possibilty that you will iterate over the keys, values, or entries.\n\nAgain, why? I fail to see any advantage, except that you are guaranteed to see your keys in insertion order...\n\n\nComment by BobKerns:\nGetting your keys back in a _consistent_ order means that, when you run the same code twice, you get the same answer. That it is in _insertion_ order is not important -- before LinkedHashMap, using a TreeMap was how you could accomplish this.\n\nWith a regular HashMap, however, when you run the same code twice, anything which hashes based on the object identity will hash _differently_ every time you run the program. So every time you run the program, you WILL get a different iteration order. This can mean that your (buggy) code takes a very different path. You can end up with failures that only happen when a production server is run for days, and the corruption occurs days before the visible failure it provokes.\n\nThe situation is much less serious here, because String.hashCode() returns a consistent value that does not depend on object identity. However, that is not the only failure mode. Depending on  your JVM's HashMap implementation, tables can be rehashed in ways which may be GC-dependent. And even without that -- if your keys are variable -- perhaps they are hashes themselves, or timestamps -- you end up with a a similar situation.\n\nOnly with a LinkedHashMap is the order _guaranteed_ to be stable. It's less expensive than TreeMap, and the order is purely based on program flow, and not sensitive to any key variations.\n\nOver the past 15 years, I have spent countless weeks tracking down \"irreproducible\" bugs that were irreproducible only because of this little issue. But I've gotten far more efficient at it. I start out now by replacing all the relevant new HashMap'()s with new LinkedHashMap(),  A large percentage of the time, it suddenly becomes reproducible.\n\nThe rest of the time, it's a thread synchronization problem, or occasionally an external source of variability.\n\nSo using LinkedHashMap, unless there's an actual reason not to, really should be regarded as a Best Practice.\n\n\nComment by fge:\n@BobKerns :\n\n> Getting your keys back in a consistent order means that, when you run the same code twice, you get the same answer. \n\nI know all that. But why is this of any importance to Jackson? If a program really relies on key read order, it has a problem to begin with. I have _never_, ever, written code relying on that. And I don't believe the serialization code in Jackson cares -- except for string representations, but then you can just use a TreeSet of keys and write entries in order.\n\n\nComment by pgelinas:\nI agree with fge on this, you should never, ever write code that rely on the iteration order of a Map. You should code against a Class/Interface contract, and Map doesn't offer any iteration guarantee. If you require a specific iteration order, double-check if you really need to, and only then code against an implementation of a Map. LinkedHashMap has a memory hit that can be quite high for big maps and that should be kept in mind. There's never a single solution to a problem, otherwise there wouldn't be multiple implementation for an interface ;)\n\nOn why ObjectNode uses a LinkedHashMap, I believe this is for representation consistensy. If you deserialize an ObjectNode and reserialize it, you'll get the exact same json, which I believe is somewhat important. One such case is, let's say, a json file that is associated to an editor. When you save the editor, you don't want all your content to be scrambled EVERY time. This json file is probably under SCM too, so you get conflict every time two people modify it. Although ObjectNode doesn't specify anywhere this guarantee, I wonder if this is an implementation detail and should not be relied upon.\n\nAnother note: why would you want to extends ObjectNode? This doesn't smell good, IMHO.\n\n\nComment by fge:\n@pgelinas \n\n> why would you want to extends ObjectNode? This doesn't smell good, IMHO.\n\nI want immutable instances, and ObjectNode is mutable, that is why.\n\n_edit: I guess a solution would be that I extend JsonNode... Trying that, who knows, I may succeed._\n\n\nComment by pgelinas:\nWhy not use delegation instead then? You wrap an ObjectNode in another class, which is immutable, and you simply don't permit any mutable operation on the ObjectNode delegate. The constructor can be an ObjectNode and Jackson will happily resolve that for you.\n\n\nComment by cowtowncoder:\nQuick answer: LinkedHashMap is there because I think it is good to retain ordering, even if it is insignificant.\nEven if users may abuse it. I just like it that way.\n\nI would agree in that the real \"good\" requirement is that ordering is stable. And for that, TreeMap could work as well.\nBut my experience aligns with @BobKerns experiences, and so it does seem like the best choice.\n\nNow: I would not be against ability to use other Maps, so that only the default implementation would use LHM.\n\nSince this actually leads to a bigger discussion -- if and how to extends JsonNode type system -- I suggest we continue this on Jackson dev list.\n\nAs a starting point, I will make another statement: I have always intended that there should be a way to improve upon Tree model; but I am ambivalent as to whether to:\n1. Offer it by allowing extending the current default implementation: difficulties come from fragility of inheritance, and general difficulty of designing for extensibility, a priori (before people actually extend). Chicken-and-egg problem.\n2. Allow it by alternative Tree Models -- the default one is rather loosely bolted in, and aside from couple of methods in `ObejctMapper`, there really is no magic: there are just couple of serializers, deserializers.\n\nMy thinking has evolved starting with (1) much more towards (2). But I am not the one implementing extensions, so I don't know if this makes sense.\n\n\nComment by cowtowncoder:\nOne more clarification for this particular question: I think that concrete type should NOT be included in ObjectNode -- it should be just a Map there. I can change that for 2.1.\n\n\nComment by cowtowncoder:\nQuick note: I changed `ObjectNode` implementation to allow overriding of Map construction, removed requirement that Map must be LinkedHashMap, to allow custom sub-types that may choose differently.\nSame probably needs to be done for ArrayNode as well.\n\n\nComment by fge:\nThanks!\n\nI already expressed interest into having a deeper look at the tree model, so I subscribed to the dev@ mailing list. See you there!\n\n\nComment by BobKerns:\n@pgelinas  you're missing my point, by focusing on how one should write the code, vs the big picture.\n\nI _absolutely agree_ you should never, ever, rely on the iteration order of an ordinary map. Doing so is a bug, pure and simple!\n\nThe problem is, such dependencies can arise inadvertently. A particular bug can manifest, or not manifest, depending on side-effects earlier in an interation. Something gets initialized if this object is processed first; it doesn't if that one does. If you have 10,000,000 of the first object, and 1 of the second, and one day that first one appears first in the list, then the Phantom of the HashMap strikes again!\n\nI don't believe in a single case, have I seen anyone _deliberately_ rely on the iteration order of a Map. Generally, the bug lies elsewhere, in the work done in the iteration, and the only contribution of the unstable iteration is to make the bug a real bear to track down! And ordering the iteration doesn't fix the bug, either. It just lets you find it from the debugger within a human lifetime -- by making the bug repeatable.\n\nBut if you use LinkedHashMap, you can actually _test_ this case, trivially. Just test inserting one object type first, then the other. You won't necessarily think to do so -- but when you DO hit the bug, you can be sure you'll go back and add it then!\n\nAs for extending ObjectNode -- you might do that if you need a different implementation. It's only a smell if you're adding to the contract. You might want to make a more storage-efficient version, for example, that uses a regular hash map (though it's just 2 cells more per actual entry, if I recall correctly). Or perhaps you want to add a check that it's being accessed by the right thread, to detect or find threading-related bugs.\n\nBut it's not something you'd do, so you can produce your application objects as ObjectNode's.\n\nIt would actually be good if ObjectNode were an interface -- then in the second of my cases above, you could wrap and delegate instead of subclass. But I don't think that's important; this case should be rare, and an interface might be open to abuse equal to any benefit.\n\n\nComment by cowtowncoder:\nI will close this entry, now that ObjectNode and ArrayNode allow use of other `List` and `Map` implementations.\nWe can discuss follow-up improvement ideas on mailing list & add new entries here as necessary.\n",
                "source_code": null,
                "distance": 0.75,
                "title": "Why is ObjectNode's underlying map a LinkedHashMap?",
                "name": "issue#85",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#85"
                    }
                ],
                "similarity": 0.1022155198603476,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "1319",
                "type": "issue",
                "content": "This method is missing. It is quite easy because the support for BigInteger are already there.\n\n\n\nComment by jlolling:\nOk Thanks a lot.\n",
                "source_code": null,
                "distance": 0.75,
                "title": "Add `ObjectNode.put(String, BigInteger)`",
                "name": "pr#1319",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#3621"
                    },
                    {
                        "start_node": "pr#3621",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#3590"
                    },
                    {
                        "start_node": "issue#3590",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#1319"
                    }
                ],
                "similarity": 0.08820517651422012,
                "end_line": null,
                "signature": null
            }
        ]
    },
    "artifact_stats": {
        "skipped_due_to_time": 111,
        "valid_related_items": 191
    }
}