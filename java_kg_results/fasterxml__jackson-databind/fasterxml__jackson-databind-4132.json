{
    "related_entities": {
        "methods": [
            {
                "start_line": 1339,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T extends JsonNode> T withArray(String exprOrProperty) {\n        throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but `\"\n                +getClass().getName()+\")`, cannot call `withArray()` on it\");\n    }",
                "distance": 1.25,
                "title": null,
                "name": "withArray",
                "documentation": "/**\n     * Method that works in one of possible ways, depending on whether\n     * {@code exprOrProperty} is a valid {@link JsonPointer} expression or\n     * not (valid expression is either empty String {@code \"\"} or starts\n     * with leading slash {@code /} character).\n     * If it is, works as a short-cut to:\n     *<pre>\n     *  withObject(JsonPointer.compile(exprOrProperty));\n     *</pre>\n     * If it is NOT a valid {@link JsonPointer} expression, value is taken\n     * as a literal Object property name and traversed like a single-segment\n     * {@link JsonPointer}.\n     *<p>\n     * NOTE: before Jackson 2.14 behavior was always that of non-expression usage;\n     * that is, {@code exprOrProperty} was always considered as a simple property name.\n     *\n     * @param exprOrProperty Either {@link JsonPointer} expression for full access (if valid\n     *   pointer expression), or the name of property for the {@link ArrayNode}.\n     *\n     * @return {@link ArrayNode} found or created\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "withArray"
                    }
                ],
                "similarity": 0.1868071616661039,
                "end_line": 1342,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withArray(String exprOrProperty): T"
            },
            {
                "start_line": 1466,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode withArrayProperty(String propName) {\n        // To avoid abstract method, base implementation just fails\n        throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but `\"\n                +getClass().getName()+\")`, cannot call `withArrayProperty(String)` on it\");\n    }",
                "distance": 1.25,
                "title": null,
                "name": "withArrayProperty",
                "documentation": "/**\n     * Method similar to {@link #withArray(JsonPointer, OverwriteMode, boolean)} -- basically\n     * short-cut to:\n     *<pre>\n     *   withArray(JsonPointer.compile(\"/\"+propName), OverwriteMode.NULLS, false);\n     *</pre>\n     * that is, only matches immediate property on {@link ObjectNode}\n     * and will either use an existing {@link ArrayNode} that is\n     * value of the property, or create one if no value or value is {@code NullNode}.\n     * <br>\n     * Will fail with an exception if:\n     * <ul>\n     *  <li>Node method called on is NOT {@link ObjectNode}\n     *   </li>\n     *  <li>Property has an existing value that is NOT {@code NullNode} (explicit {@code null})\n     *   </li>\n     * </ul>\n     *\n     * @param propName Name of property that has or will have {@link ArrayNode} as value\n     *\n     * @return {@link ArrayNode} value of given property (existing or created)\n     *\n     * @since 2.16\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "withArrayProperty"
                    }
                ],
                "similarity": 0.18256038458968737,
                "end_line": 1470,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withArrayProperty(String propName): ArrayNode"
            },
            {
                "start_line": 1313,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T extends JsonNode> T with(String exprOrProperty) {\n        throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but \"\n                                +getClass().getName()+\"), cannot call `with(String)` on it\");\n    }",
                "distance": 1.25,
                "title": null,
                "name": "with",
                "documentation": "/**\n     * Method that works in one of possible ways, depending on whether\n     * {@code exprOrProperty} is a valid {@link JsonPointer} expression or\n     * not (valid expression is either empty String {@code \"\"} or starts\n     * with leading slash {@code /} character).\n     * If it is, works as a short-cut to:\n     *<pre>\n     *  withObject(JsonPointer.compile(exprOrProperty));\n     *</pre>\n     * If it is NOT a valid {@link JsonPointer} expression, value is taken\n     * as a literal Object property name and traversed like a single-segment\n     * {@link JsonPointer}.\n     *<p>\n     * NOTE: before Jackson 2.14 behavior was always that of non-expression usage;\n     * that is, {@code exprOrProperty} was always considered as a simple property name.\n     *\n     * @deprecated Since 2.14 use {@code withObject(String)} instead\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "with"
                    }
                ],
                "similarity": 0.17974070287972302,
                "end_line": 1316,
                "signature": "com.fasterxml.jackson.databind.JsonNode.with(String exprOrProperty): T"
            },
            {
                "start_line": 1288,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectNode withObjectProperty(String propName) {\n        // To avoid abstract method, base implementation just fails\n        throw new UnsupportedOperationException(\"`JsonNode` not of type `ObjectNode` (but `\"\n                +getClass().getName()+\")`, cannot call `withObjectProperty(String)` on it\");\n    }",
                "distance": 1.25,
                "title": null,
                "name": "withObjectProperty",
                "documentation": "/**\n     * Method similar to {@link #withObject(JsonPointer, OverwriteMode, boolean)} -- basically\n     * short-cut to:\n     *<pre>\n     *   withObject(JsonPointer.compile(\"/\"+propName), OverwriteMode.NULLS, false);\n     *</pre>\n     * that is, only matches immediate property on {@link ObjectNode}\n     * and will either use an existing {@link ObjectNode} that is\n     * value of the property, or create one if no value or value is {@code NullNode}.\n     * <br>\n     * Will fail with an exception if:\n     * <ul>\n     *  <li>Node method called on is NOT {@link ObjectNode}\n     *   </li>\n     *  <li>Property has an existing value that is NOT {@code NullNode} (explicit {@code null})\n     *   </li>\n     * </ul>\n     *\n     * @param propName Name of property that has or will have {@link ObjectNode} as value\n     *\n     * @return {@link ObjectNode} value of given property (existing or created)\n     *\n     * @since 2.16\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "withObjectProperty"
                    }
                ],
                "similarity": 0.17474370508682918,
                "end_line": 1292,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withObjectProperty(String propName): ObjectNode"
            },
            {
                "start_line": 1154,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final ObjectNode withObject(String expr) {\n        return withObject(JsonPointer.compile(expr));\n    }",
                "distance": 1.0,
                "title": null,
                "name": "withObject",
                "documentation": "/**\n     * Short-cut equivalent to:\n     *<pre>\n     *   withObject(JsonPointer.compile(expr);\n     *</pre>\n     * see {@link #withObject(JsonPointer)} for full explanation.\n     *\n     * @param expr {@link JsonPointer} expression to use\n     *\n     * @return {@link ObjectNode} found or created\n     *\n     * @since 2.14\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withObject"
                    }
                ],
                "similarity": 0.1710329538181493,
                "end_line": 1156,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withObject(String expr): ObjectNode"
            },
            {
                "start_line": 1185,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final ObjectNode withObject(JsonPointer ptr) {\n        return withObject(ptr, OverwriteMode.NULLS, true);\n    }",
                "distance": 1.0,
                "title": null,
                "name": "withObject",
                "documentation": "/**\n     * Same as {@link #withObject(JsonPointer, OverwriteMode, boolean)} but\n     * with defaults of {@code OvewriteMode#NULLS} (overwrite mode)\n     * and {@code true} for {@code preferIndex} (that is, will try to\n     * consider {@link JsonPointer} segments index if at all possible\n     * and only secondarily as property name\n     *\n     * @param ptr {@link JsonPointer} that indicates path to use for Object value to return\n     *   (potentially creating as necessary)\n     *\n     * @return {@link ObjectNode} found or created\n     *\n     * @since 2.14\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withObject"
                    }
                ],
                "similarity": 0.16812732206798078,
                "end_line": 1187,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withObject(JsonPointer ptr): ObjectNode"
            },
            {
                "start_line": 1257,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectNode withObject(JsonPointer ptr,",
                "distance": 1.0,
                "title": null,
                "name": "withObject",
                "documentation": "/**\n     * Method that can be called on Object or Array nodes, to access a Object-valued\n     * node pointed to by given {@link JsonPointer}, if such a node exists:\n     * or if not, an attempt is made to create one and return it.\n     * For example, on document\n     *<pre>\n     *  { \"a\" : {\n     *       \"b\" : {\n     *          \"c\" : 13\n     *       }\n     *    }\n     *  }\n     *</pre>\n     * calling method with {@link JsonPointer} of {@code /a/b} would return\n     * {@link ObjectNode}\n     *<pre>\n     *  { \"c\" : 13 }\n     *</pre>\n     *<p>\n     * In cases where path leads to \"missing\" nodes, a path is created.\n     * So, for example, on above document, and\n     * {@link JsonPointer} of {@code /a/x} an empty {@link ObjectNode} would\n     * be returned and the document would look like:\n     *<pre>\n     *  { \"a\" : {\n     *       \"b\" : {\n     *          \"c\" : 13\n     *       },\n     *       \"x\" : { }\n     *    }\n     *  }\n     *</pre>\n     * Finally, if the path is incompatible with the document -- there is an existing\n     * {@code JsonNode} through which expression cannot go -- a replacement is\n     * attempted if (and only if) conversion is allowed as per {@code overwriteMode}\n     * passed in. For example, with above document and expression of {@code /a/b/c},\n     * conversion is allowed if passing {@code OverwriteMode.SCALARS} or\n     * {@code OvewriteMode.ALL}, and resulting document would look like:\n     *<pre>\n     *  { \"a\" : {\n     *       \"b\" : {\n     *          \"c\" : { }\n     *       },\n     *       \"x\" : { }\n     *    }\n     *  }\n     *</pre>\n     * but if different modes ({@code NONE} or {@code NULLS}) is passed, an exception\n     * is thrown instead.\n     *\n     * @param ptr Pointer that indicates path to use for {@link ObjectNode} value to return\n     *   (potentially creating one as necessary)\n     * @param overwriteMode Defines which node types may be converted in case of\n     *    incompatible {@code JsonPointer} expression: if conversion not allowed,\n     *    {@link UnsupportedOperationException} is thrown.\n     * @param preferIndex When creating a path (for empty or replacement), and path\n     *    contains segment that may be an array index (simple integer number like\n     *    {@code 3}), whether to construct an {@link ArrayNode} ({@code true}) or\n     *    {@link ObjectNode} ({@code false}). In latter case matching property with\n     *    quoted number (like {@code \"3\"}) is used within Object.\n     *\n     * @return {@link ObjectNode} found or created\n     *\n     * @throws UnsupportedOperationException if a conversion would be needed for given\n     *    {@code JsonPointer}, document, but was not allowed for the type encountered\n     *\n     * @since 2.14\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withObject"
                    }
                ],
                "similarity": 0.16661820092051674,
                "end_line": 1257,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withObject(JsonPointer ptr, OverwriteMode overwriteMode, boolean preferIndex): ObjectNode"
            },
            {
                "start_line": 117,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectNode withObject(JsonPointer ptr,",
                "distance": 1.0,
                "title": null,
                "name": "withObject",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withObject"
                    }
                ],
                "similarity": 0.16567496653556485,
                "end_line": 117,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode.withObject(JsonPointer ptr, OverwriteMode overwriteMode, boolean preferIndex): ObjectNode"
            },
            {
                "start_line": 1166,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final ObjectNode withObject(String expr,",
                "distance": 1.0,
                "title": null,
                "name": "withObject",
                "documentation": "/**\n     * Short-cut equivalent to:\n     *<pre>\n     *  withObject(JsonPointer.compile(expr), overwriteMode, preferIndex);\n     *</pre>\n     *\n     * @since 2.14\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withObject"
                    }
                ],
                "similarity": 0.15556191900616828,
                "end_line": 1166,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withObject(String expr, OverwriteMode overwriteMode, boolean preferIndex): ObjectNode"
            },
            {
                "start_line": 77,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectNode with(String exprOrProperty) {\n        JsonPointer ptr = _jsonPointerIfValid(exprOrProperty);\n        if (ptr != null) {\n            return withObject(ptr);\n        }\n        return super.with(exprOrProperty); // to give failure\n    }",
                "distance": 1.5,
                "title": null,
                "name": "with",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "with"
                    }
                ],
                "similarity": 0.14523975335601244,
                "end_line": 83,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.with(String exprOrProperty): ObjectNode"
            },
            {
                "start_line": 183,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode withArray(JsonPointer ptr,",
                "distance": 1.0,
                "title": null,
                "name": "withArray",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    }
                ],
                "similarity": 0.1428797583355913,
                "end_line": 183,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode.withArray(JsonPointer ptr, OverwriteMode overwriteMode, boolean preferIndex): ArrayNode"
            },
            {
                "start_line": 1435,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode withArray(JsonPointer ptr,",
                "distance": 1.25,
                "title": null,
                "name": "withArray",
                "documentation": "/**\n     * Method that can be called on Object or Array nodes, to access a Array-valued\n     * node pointed to by given {@link JsonPointer}, if such a node exists:\n     * or if not, an attempt is made to create one and return it.\n     * For example, on document\n     *<pre>\n     *  { \"a\" : {\n     *       \"b\" : [ 1, 2 ]\n     *    }\n     *  }\n     *</pre>\n     * calling method with {@link JsonPointer} of {@code /a/b} would return\n     * {@code Array}\n     *<pre>\n     *  [ 1, 2 ]\n     *</pre>\n     *<p>\n     * In cases where path leads to \"missing\" nodes, a path is created.\n     * So, for example, on above document, and\n     * {@link JsonPointer} of {@code /a/x} an empty {@code ArrayNode} would\n     * be returned and the document would look like:\n     *<pre>\n     *  { \"a\" : {\n     *       \"b\" : [ 1, 2 ],\n     *       \"x\" : [ ]\n     *    }\n     *  }\n     *</pre>\n     * Finally, if the path is incompatible with the document -- there is an existing\n     * {@code JsonNode} through which expression cannot go -- a replacement is\n     * attempted if (and only if) conversion is allowed as per {@code overwriteMode}\n     * passed in. For example, with above document and expression of {@code /a/b/0},\n     * conversion is allowed if passing {@code OverwriteMode.SCALARS} or\n     * {@code OvewriteMode.ALL}, and resulting document would look like:\n     *<pre>\n     *  { \"a\" : {\n     *       \"b\" : [ [ ], 2 ],\n     *       \"x\" : [ ]\n     *    }\n     *  }\n     *</pre>\n     * but if different modes ({@code NONE} or {@code NULLS}) is passed, an exception\n     * is thrown instead.\n     *\n     * @param ptr Pointer that indicates path to use for {@link ArrayNode} value to return\n     *   (potentially creating it as necessary)\n     * @param overwriteMode Defines which node types may be converted in case of\n     *    incompatible {@code JsonPointer} expression: if conversion not allowed,\n     *    an exception is thrown.\n     * @param preferIndex When creating a path (for empty or replacement), and path\n     *    contains segment that may be an array index (simple integer number like\n     *    {@code 3}), whether to construct an {@link ArrayNode} ({@code true}) or\n     *    {@link ObjectNode} ({@code false}). In latter case matching property with\n     *    quoted number (like {@code \"3\"}) is used within Object.\n     *\n     * @return {@link ArrayNode} found or created\n     *\n     * @throws UnsupportedOperationException if a conversion would be needed for given\n     *    {@code JsonPointer}, document, but was not allowed for the type encountered\n     *\n     * @since 2.14\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "withArray"
                    }
                ],
                "similarity": 0.14228623567874346,
                "end_line": 1435,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withArray(JsonPointer ptr, OverwriteMode overwriteMode, boolean preferIndex): ArrayNode"
            },
            {
                "start_line": 1369,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final ArrayNode withArray(JsonPointer ptr) {\n        return withArray(ptr, OverwriteMode.NULLS, true);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "withArray",
                "documentation": "/**\n     * Same as {@link #withArray(JsonPointer, OverwriteMode, boolean)} but\n     * with defaults of {@code OvewriteMode#NULLS} (overwrite mode)\n     * and {@code true} for {@code preferIndex}.\n     *\n     * @param ptr Pointer that indicates path to use for {@link ArrayNode} to return\n     *   (potentially creating as necessary)\n     *\n     * @return {@link ArrayNode} found or created\n     *\n     * @since 2.14\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "withArray"
                    }
                ],
                "similarity": 0.12867674356760084,
                "end_line": 1371,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withArray(JsonPointer ptr): ArrayNode"
            },
            {
                "start_line": 168,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected boolean _withXxxMayReplace(JsonNode node, OverwriteMode overwriteMode) {\n        switch (overwriteMode) {\n        case NONE:\n            return false;\n        case NULLS:\n            return node.isNull();\n        case SCALARS:\n            return !node.isContainerNode();\n        default:\n        case ALL:\n            return true;\n        }\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withXxxMayReplace",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "BaseJsonNode"
                    },
                    {
                        "start_node": "BaseJsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withXxxMayReplace"
                    }
                ],
                "similarity": 0.1238031761989131,
                "end_line": 180,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode._withXxxMayReplace(JsonNode node, OverwriteMode overwriteMode): boolean"
            },
            {
                "start_line": 282,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final JsonNode at(String jsonPtrExpr) {\n        return at(JsonPointer.compile(jsonPtrExpr));\n    }",
                "distance": 1.25,
                "title": null,
                "name": "at",
                "documentation": "/**\n     * Convenience method that is functionally equivalent to:\n     *<pre>\n     *   return at(JsonPointer.valueOf(jsonPointerExpression));\n     *</pre>\n     *<p>\n     * Note that if the same expression is used often, it is preferable to construct\n     * {@link JsonPointer} instance once and reuse it: this method will not perform\n     * any caching of compiled expressions.\n     *\n     * @param jsonPtrExpr Expression to compile as a {@link JsonPointer}\n     *   instance\n     *\n     * @return Node that matches given JSON Pointer: if no match exists,\n     *   will return a node for which {@link TreeNode#isMissingNode()} returns true.\n     *\n     * @since 2.3\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "at"
                    }
                ],
                "similarity": 0.12190486500606702,
                "end_line": 284,
                "signature": "com.fasterxml.jackson.databind.JsonNode.at(String jsonPtrExpr): JsonNode"
            },
            {
                "start_line": 137,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ObjectNode _withObject(JsonPointer origPtr,",
                "distance": 1.5,
                "title": null,
                "name": "_withObject",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "BaseJsonNode"
                    },
                    {
                        "start_node": "BaseJsonNode",
                        "description": "contains method",
                        "type": "RELATED",
                        "end_node": "_withObject"
                    }
                ],
                "similarity": 0.1217564836299272,
                "end_line": 137,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode._withObject(JsonPointer origPtr, JsonPointer currentPtr, OverwriteMode overwriteMode, boolean preferIndex): ObjectNode"
            },
            {
                "start_line": 97,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ObjectNode _withObject(JsonPointer origPtr,",
                "distance": 1.5,
                "title": null,
                "name": "_withObject",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withObject"
                    }
                ],
                "similarity": 0.1217564836299272,
                "end_line": 97,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._withObject(JsonPointer origPtr, JsonPointer currentPtr, OverwriteMode overwriteMode, boolean preferIndex): ObjectNode"
            },
            {
                "start_line": 269,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "   protected JsonPointer _jsonPointerIfValid(String exprOrProperty) {\n       if (exprOrProperty.isEmpty() || exprOrProperty.charAt(0) == '/') {\n           return JsonPointer.compile(exprOrProperty);\n       }\n       return null;\n   }",
                "distance": 1.5,
                "title": null,
                "name": "_jsonPointerIfValid",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "BaseJsonNode"
                    },
                    {
                        "start_node": "BaseJsonNode",
                        "description": "contains method",
                        "type": "RELATED",
                        "end_node": "_jsonPointerIfValid"
                    }
                ],
                "similarity": 0.11923741550961227,
                "end_line": 274,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode._jsonPointerIfValid(String exprOrProperty): JsonPointer"
            },
            {
                "start_line": 87,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode withArray(String exprOrProperty)",
                "distance": 1.0,
                "title": null,
                "name": "withArray",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    }
                ],
                "similarity": 0.11843428392423655,
                "end_line": 87,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.withArray(String exprOrProperty): ArrayNode"
            },
            {
                "start_line": 1352,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode withArray(String expr,",
                "distance": 1.25,
                "title": null,
                "name": "withArray",
                "documentation": "/**\n     * Short-cut equivalent to:\n     *<pre>\n     *  withArray(JsonPointer.compile(expr), overwriteMode, preferIndex);\n     *</pre>\n     *\n     * @since 2.14\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "withArray"
                    }
                ],
                "similarity": 0.11819607761360854,
                "end_line": 1352,
                "signature": "com.fasterxml.jackson.databind.JsonNode.withArray(String expr, OverwriteMode overwriteMode, boolean preferIndex): ArrayNode"
            },
            {
                "start_line": 1192,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ArrayNode _set(int index, JsonNode node) {\n        if (index < 0 || index >= _children.size()) {\n            throw new IndexOutOfBoundsException(\"Illegal index \"+ index +\", array size \"+size());\n        }\n        _children.set(index, node);\n        return this;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_set",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_set"
                    }
                ],
                "similarity": 0.11711178333165549,
                "end_line": 1198,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._set(int index, JsonNode node): ArrayNode"
            },
            {
                "start_line": 143,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ObjectNode _withObjectAddTailElement(JsonPointer tail, boolean preferIndex)",
                "distance": 1.5,
                "title": null,
                "name": "_withObjectAddTailElement",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withObjectAddTailElement"
                    }
                ],
                "similarity": 0.113923934352597,
                "end_line": 143,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._withObjectAddTailElement(JsonPointer tail, boolean preferIndex): ObjectNode"
            },
            {
                "start_line": 196,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected void _withXxxSetArrayElement(int index, JsonNode value) {\n        // 27-Jul-2022, tatu: Let's make it less likely anyone OOMs by\n        //    humongous index...\n        if (index >= size()) {\n            final int max = _nodeFactory.getMaxElementIndexForInsert();\n            if (index > max) {\n                _reportWrongNodeOperation(\"Too big Array index (%d; max %d) to use for insert with `JsonPointer`\",\n                        index, max);\n            }\n            while (index >= this.size()) {\n                addNull();\n            }\n        }\n        set(index, value);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_withXxxSetArrayElement",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withXxxSetArrayElement"
                    }
                ],
                "similarity": 0.11259936027597131,
                "end_line": 210,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._withXxxSetArrayElement(int index, JsonNode value): void"
            },
            {
                "start_line": 37,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode(JsonNodeFactory nf, int capacity) {\n        super(nf);\n        _children = new ArrayList<JsonNode>(capacity);\n    }",
                "distance": 1.5,
                "title": null,
                "name": "ArrayNode",
                "documentation": "/**\n     * @since 2.8\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    }
                ],
                "similarity": 0.11168868039582548,
                "end_line": 40,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode(JsonNodeFactory nf, int capacity)"
            },
            {
                "start_line": 203,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ArrayNode _withArray(JsonPointer origPtr,",
                "distance": 1.5,
                "title": null,
                "name": "_withArray",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "BaseJsonNode"
                    },
                    {
                        "start_node": "BaseJsonNode",
                        "description": "contains method",
                        "type": "RELATED",
                        "end_node": "_withArray"
                    }
                ],
                "similarity": 0.10779133163206259,
                "end_line": 203,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode._withArray(JsonPointer origPtr, JsonPointer currentPtr, OverwriteMode overwriteMode, boolean preferIndex): ArrayNode"
            },
            {
                "start_line": 121,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ArrayNode _withArray(JsonPointer origPtr,",
                "distance": 1.5,
                "title": null,
                "name": "_withArray",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withArray"
                    }
                ],
                "similarity": 0.10779133163206259,
                "end_line": 121,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._withArray(JsonPointer origPtr, JsonPointer currentPtr, OverwriteMode overwriteMode, boolean preferIndex): ArrayNode"
            },
            {
                "start_line": 149,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean isContainerNode() {\n        final JsonNodeType type = getNodeType();\n        return type == JsonNodeType.OBJECT || type == JsonNodeType.ARRAY;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "isContainerNode",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "isContainerNode"
                    }
                ],
                "similarity": 0.10760542079763755,
                "end_line": 152,
                "signature": "com.fasterxml.jackson.databind.JsonNode.isContainerNode(): boolean"
            },
            {
                "start_line": 45,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode(JsonNodeFactory nf, List<JsonNode> children) {\n        super(nf);\n        _children = children;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "ArrayNode",
                "documentation": "/**\n     * @since 2.7\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    }
                ],
                "similarity": 0.10711726360139524,
                "end_line": 48,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode(JsonNodeFactory nf, List children)"
            },
            {
                "start_line": 1200,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ArrayNode _add(JsonNode node) {\n        _children.add(node);\n        return this;\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_add",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_add"
                    }
                ],
                "similarity": 0.1067840204833758,
                "end_line": 1203,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._add(JsonNode node): ArrayNode"
            },
            {
                "start_line": 73,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectNode with(String exprOrProperty) {\n        JsonPointer ptr = _jsonPointerIfValid(exprOrProperty);\n        if (ptr != null) {\n            return withObject(ptr);\n        }\n        JsonNode n = _children.get(exprOrProperty);\n        if (n != null) {\n            if (n instanceof ObjectNode) {\n                return (ObjectNode) n;\n            }\n            throw new UnsupportedOperationException(\"Property '\" + exprOrProperty\n                + \"' has value that is not of type `ObjectNode` (but `\" + n\n                .getClass().getName() + \"`)\");\n        }\n        ObjectNode result = objectNode();\n        _children.put(exprOrProperty, result);\n        return result;\n    }",
                "distance": 2.0,
                "title": null,
                "name": "with",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withObject"
                    },
                    {
                        "start_node": "withObject",
                        "description": "called by method",
                        "type": "RELATED",
                        "end_node": "with"
                    }
                ],
                "similarity": 0.10657576421926608,
                "end_line": 90,
                "signature": "com.fasterxml.jackson.databind.node.ObjectNode.with(String exprOrProperty): ObjectNode"
            },
            {
                "start_line": 250,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final JsonNode at(JsonPointer ptr)",
                "distance": 1.25,
                "title": null,
                "name": "at",
                "documentation": "/**\n     * Method for locating node specified by given JSON pointer instances.\n     * Method will never return null; if no matching node exists,\n     *   will return a node for which {@link #isMissingNode()} returns true.\n     *\n     * @return Node that matches given JSON Pointer: if no match exists,\n     *   will return a node for which {@link #isMissingNode()} returns true.\n     *\n     * @since 2.3\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "at"
                    }
                ],
                "similarity": 0.10553261372952984,
                "end_line": 250,
                "signature": "com.fasterxml.jackson.databind.JsonNode.at(JsonPointer ptr): JsonNode"
            },
            {
                "start_line": 887,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final JsonNode requiredAt(final JsonPointer path) throws IllegalArgumentException {\n        JsonPointer currentExpr = path;\n        JsonNode curr = this;\n\n        // Note: copied from `at()`\n        while (true) {\n            if (currentExpr.matches()) {\n                return curr;\n            }\n            curr = curr._at(currentExpr); // lgtm [java/dereferenced-value-may-be-null]\n            if (curr == null) {\n                _reportRequiredViolation(\"No node at '%s' (unmatched part: '%s')\",\n                        path, currentExpr);\n            }\n            currentExpr = currentExpr.tail();\n        }\n    }",
                "distance": 1.25,
                "title": null,
                "name": "requiredAt",
                "documentation": "/**\n     * Method is functionally equivalent to\n     *{@code\n     *   at(path).required()\n     *}\n     * and can be used to check that there is an actual value node at specified {@link JsonPointer}\n     * starting from {@code this} node\n     * (but note that value may be explicit JSON null value).\n     * If such value node exists it is returned;\n     * otherwise {@link IllegalArgumentException} is thrown.\n     *\n     * @param path {@link JsonPointer} expression to use for finding value node\n     *\n     * @return Matching value node for given expression\n     *\n     * @throws IllegalArgumentException if no value node exists at given {@code JSON Pointer} path\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "requiredAt"
                    }
                ],
                "similarity": 0.1050840389780255,
                "end_line": 903,
                "signature": "com.fasterxml.jackson.databind.JsonNode.requiredAt(JsonPointer path): JsonNode"
            },
            {
                "start_line": 29,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode(JsonNodeFactory nf) {\n        super(nf);\n        _children = new ArrayList<JsonNode>();\n    }",
                "distance": 1.5,
                "title": null,
                "name": "ArrayNode",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    }
                ],
                "similarity": 0.10361039157560835,
                "end_line": 32,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode(JsonNodeFactory nf)"
            },
            {
                "start_line": 549,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode addPOJO(Object pojo) {\n        return _add((pojo == null) ? nullNode() : pojoNode(pojo));\n    }",
                "distance": 1.5,
                "title": null,
                "name": "addPOJO",
                "documentation": "/**\n     * Method that will construct a POJONode and add it at the end\n     * of this array node.\n     *\n     * @return This array node, to allow chaining\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "addPOJO"
                    }
                ],
                "similarity": 0.1027413071210866,
                "end_line": 551,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.addPOJO(Object pojo): ArrayNode"
            },
            {
                "start_line": 51,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected JsonNode _at(JsonPointer ptr) {\n        return get(ptr.getMatchingIndex());\n    }",
                "distance": 1.5,
                "title": null,
                "name": "_at",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_at"
                    }
                ],
                "similarity": 0.10266763813659006,
                "end_line": 53,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._at(JsonPointer ptr): JsonNode"
            },
            {
                "start_line": 296,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected abstract JsonNode _at(JsonPointer ptr);",
                "distance": 1.25,
                "title": null,
                "name": "_at",
                "documentation": "/**\n     * Helper method used by other methods for traversing the next step\n     * of given path expression, and returning matching value node if any:\n     * if no match, {@code null} is returned.\n     *\n     * @param ptr Path expression to use\n     *\n     * @return Either matching {@link JsonNode} for the first step of path or\n     *    {@code null} if no match (including case that this node is not a container)\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_at"
                    }
                ],
                "similarity": 0.10256922391192075,
                "end_line": 296,
                "signature": "com.fasterxml.jackson.databind.JsonNode._at(JsonPointer ptr): JsonNode"
            },
            {
                "start_line": 170,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ArrayNode _withArrayAddTailElement(JsonPointer tail, boolean preferIndex)",
                "distance": 1.5,
                "title": null,
                "name": "_withArrayAddTailElement",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withArrayAddTailElement"
                    }
                ],
                "similarity": 0.10179507675420073,
                "end_line": 170,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode._withArrayAddTailElement(JsonPointer tail, boolean preferIndex): ArrayNode"
            },
            {
                "start_line": 771,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode insertPOJO(int index, Object pojo) {\n        return _insert(index, (pojo == null) ? nullNode() : pojoNode(pojo));\n    }",
                "distance": 1.5,
                "title": null,
                "name": "insertPOJO",
                "documentation": "/**\n     * Method that will construct a POJONode and\n     * insert it at specified position in this array.\n     *\n     * @return This array node, to allow chaining\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "insertPOJO"
                    }
                ],
                "similarity": 0.10066784855023829,
                "end_line": 773,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.insertPOJO(int index, Object pojo): ArrayNode"
            },
            {
                "start_line": 936,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode insert(int index, Boolean value) {\n        if (value == null) {\n            return insertNull(index);\n        }\n        return _insert(index, booleanNode(value.booleanValue()));\n    }",
                "distance": 1.5,
                "title": null,
                "name": "insert",
                "documentation": "/**\n     * Alternative method that we need to avoid bumping into NPE issues\n     * with auto-unboxing.\n     *\n     * @return This array node, to allow chaining\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "insert"
                    }
                ],
                "similarity": 0.10035943013351348,
                "end_line": 941,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.insert(int index, Boolean value): ArrayNode"
            },
            {
                "start_line": 269,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonNode path(int index) {\n        if (index >= 0 && index < _children.size()) {\n            return _children.get(index);\n        }\n        return MissingNode.getInstance();\n    }",
                "distance": 1.5,
                "title": null,
                "name": "path",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "path"
                    }
                ],
                "similarity": 0.09925245953451786,
                "end_line": 274,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.path(int index): JsonNode"
            },
            {
                "start_line": 971,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode setPOJO(int index, Object pojo) {\n        return _set(index, (pojo == null) ? nullNode() : pojoNode(pojo));\n    }",
                "distance": 1.5,
                "title": null,
                "name": "setPOJO",
                "documentation": "/**\n     * @return This array node, to allow chaining\n     *\n     * @since 2.13\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setPOJO"
                    }
                ],
                "similarity": 0.09770630160795103,
                "end_line": 973,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.setPOJO(int index, Object pojo): ArrayNode"
            },
            {
                "start_line": 91,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected JsonNode() { }",
                "distance": 1.0,
                "title": null,
                "name": "JsonNode",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    }
                ],
                "similarity": 0.09725106250487861,
                "end_line": 91,
                "signature": "com.fasterxml.jackson.databind.JsonNode()"
            },
            {
                "start_line": 277,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonNode required(int index) {\n        if ((index >= 0) && (index < _children.size())) {\n            return _children.get(index);\n        }\n        return _reportRequiredViolation(\"No value at index #%d [0, %d) of `ArrayNode`\",\n                index, _children.size());\n    }",
                "distance": 1.5,
                "title": null,
                "name": "required",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "required"
                    }
                ],
                "similarity": 0.09718711504265899,
                "end_line": 283,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.required(int index): JsonNode"
            },
            {
                "start_line": 950,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ArrayNode insert(int index, byte[] v) {\n        if (v == null) {\n            return insertNull(index);\n        }\n        return _insert(index, binaryNode(v));\n    }",
                "distance": 1.5,
                "title": null,
                "name": "insert",
                "documentation": "/**\n     * Method that will insert specified binary value\n     * at specified position in this array\n     * (note: when written as JSON, will be Base64 encoded)\n     *\n     * @return This array node, to allow chaining\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "ArrayNode"
                    },
                    {
                        "start_node": "ArrayNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "insert"
                    }
                ],
                "similarity": 0.09704269975240863,
                "end_line": 955,
                "signature": "com.fasterxml.jackson.databind.node.ArrayNode.insert(int index, byte[] v): ArrayNode"
            },
            {
                "start_line": 230,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public abstract void serializeWithType(JsonGenerator g, SerializerProvider ctxt,",
                "distance": 1.5,
                "title": null,
                "name": "serializeWithType",
                "documentation": "/**\n     * Type information is needed, even if JsonNode instances are \"plain\" JSON,\n     * since they may be mixed with other types.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "BaseJsonNode"
                    },
                    {
                        "start_node": "BaseJsonNode",
                        "description": "contains method",
                        "type": "RELATED",
                        "end_node": "serializeWithType"
                    }
                ],
                "similarity": 0.09650175809407013,
                "end_line": 230,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode.serializeWithType(JsonGenerator g, SerializerProvider ctxt, TypeSerializer typeSer): void"
            },
            {
                "start_line": 323,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final boolean isPojo() {\n        return getNodeType() == JsonNodeType.POJO;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "isPojo",
                "documentation": "/**\n     * Method that can be used to check if the node is a wrapper\n     * for a POJO (\"Plain Old Java Object\" aka \"bean\".\n     * Returns true only for\n     * instances of <code>POJONode</code>.\n     *\n     * @return True if this node wraps a POJO\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "isPojo"
                    }
                ],
                "similarity": 0.0957977509113788,
                "end_line": 325,
                "signature": "com.fasterxml.jackson.databind.JsonNode.isPojo(): boolean"
            },
            {
                "start_line": 864,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonNode requiredAt(String pathExpr) throws IllegalArgumentException {\n        return requiredAt(JsonPointer.compile(pathExpr));\n    }",
                "distance": 1.25,
                "title": null,
                "name": "requiredAt",
                "documentation": "/**\n     * Method is functionally equivalent to\n     *{@code\n     *   at(pathExpr).required()\n     *}\n     * and can be used to check that there is an actual value node at specified {@link JsonPointer}\n     * starting from {@code this} node\n     * (but note that value may be explicit JSON null value).\n     * If such value node exists it is returned;\n     * otherwise {@link IllegalArgumentException} is thrown.\n     *\n     * @param pathExpr {@link JsonPointer} expression (as String) to use for finding value node\n     *\n     * @return Matching value node for given expression\n     *\n     * @throws IllegalArgumentException if no value node exists at given {@code JSON Pointer} path\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "requiredAt"
                    }
                ],
                "similarity": 0.0957436529530341,
                "end_line": 866,
                "signature": "com.fasterxml.jackson.databind.JsonNode.requiredAt(String pathExpr): JsonNode"
            },
            {
                "start_line": 841,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonNode required(int index) throws IllegalArgumentException {\n        return _reportRequiredViolation(\"Node of type `%s` has no indexed values\", getClass().getName());\n    }",
                "distance": 1.25,
                "title": null,
                "name": "required",
                "documentation": "/**\n     * Method is functionally equivalent to\n     *{@code\n     *   path(index).required()\n     *}\n     * and can be used to check that this node is an {@code ArrayNode} (that is, represents\n     * JSON Array value) and has value for specified {@code index}\n     * (but note that value may be explicit JSON null value).\n     * If this node is Array Node and has value for specified index, value at index\n     * is returned; otherwise {@link IllegalArgumentException} is thrown.\n     *\n     * @param index Index of the value of this Array node to access\n     *\n     * @return Value at specified index of this Array node\n     *\n     * @throws IllegalArgumentException if this node is not an Array node or if it does not\n     *   have value for specified index\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonNode"
                    },
                    {
                        "start_node": "JsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "required"
                    }
                ],
                "similarity": 0.09562676423660835,
                "end_line": 843,
                "signature": "com.fasterxml.jackson.databind.JsonNode.required(int index): JsonNode"
            },
            {
                "start_line": 155,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected void _withXxxVerifyReplace(JsonPointer origPtr,",
                "distance": 1.5,
                "title": null,
                "name": "_withXxxVerifyReplace",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withArray"
                    },
                    {
                        "start_node": "withArray",
                        "description": "contained in class",
                        "type": "RELATED",
                        "end_node": "BaseJsonNode"
                    },
                    {
                        "start_node": "BaseJsonNode",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withXxxVerifyReplace"
                    }
                ],
                "similarity": 0.09558203942203666,
                "end_line": 155,
                "signature": "com.fasterxml.jackson.databind.node.BaseJsonNode._withXxxVerifyReplace(JsonPointer origPtr, JsonPointer currentPtr, OverwriteMode overwriteMode, boolean preferIndex, JsonNode toReplace): void"
            },
            {
                "start_line": 143,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected ObjectNode _withObject(JsonPointer origPtr,",
                "distance": 2.0,
                "title": null,
                "name": "_withObject",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "withObject"
                    },
                    {
                        "start_node": "withObject",
                        "description": "calls method",
                        "type": "RELATED",
                        "end_node": "_withObject"
                    }
                ],
                "similarity": 0.09431216667829681,
                "end_line": 143,
                "signature": "com.fasterxml.jackson.databind.node.ObjectNode._withObject(JsonPointer origPtr, JsonPointer currentPtr, OverwriteMode overwriteMode, boolean preferIndex): ObjectNode"
            }
        ],
        "classes": [],
        "issues": [
            {
                "content": "### Describe your Issue\n\n(see #3780 for lengthy background discussion)\r\n\r\nNew `JsonNode.withObject(String)` method added in 2.14 only allows for using String that is valid `JsonPointer` expression. This is different from existing `withArray(String)` method. While I earlier felt that the new behavior is more sensible, avoiding confusion, it seems many users feel otherwise.\r\n\r\nAs a consequence I think behavior should be changed for 2.16 to allow for \"property-or-expression\" -- this should be safe (enough) change and along with #4095 solve the issue.\r\n\r\n\r\n\n",
                "distance": 0,
                "title": "Change `JsonNode.withObject(String)` to work similar to `withArray()` wrt argument",
                "name": "root",
                "path": [],
                "issue_id": "root",
                "similarity": 2.0,
                "type": "issue"
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "3780",
                "type": "issue",
                "content": "**Is your feature request related to a problem? Please describe.**\r\nVersion `2.14` deprecated `JsonNode.with(String)` and suggests replacing it with `JsonNode.withObject(String)`. However, this causes problems because `JsonNode.withObject(String)` accepts only expressions, whereas the former method accepts a property. Moreover, `JsonNode.withArray(String)` accepts both property names and expressions, making it quite asymmetric.\r\n\r\n**Describe the solution you'd like**\r\nMigrating the method would imply in many cases extra work and prepending the \"/\" before every property name in existing calls.\r\nFrom the deprecation message of `JsonNode.with(String)` I would change `myObj.with(myProp)` to `myObj.withObject(myProp)` but that throws an exception, so I have to do `myObj.withObject(\"/\" + myProp)`, which I find unpleasant. Again, `myObj.withArray(myProp)` works just fine without need of change.\r\n\r\n**Usage example**\r\nThe change from `myObj.with(myProp)` to `myObj.withObject(myProp)` should work with property or expression.\r\n\n\n\nComment by tanis138:\nFaced the same issue. I think, adding \"/\" before every property is a bad idea. Because each withObject() call will cause JsonPointer.compile() on your property, which significantly decrease performance.\r\nIt would be great to add new method withProperty(String property) for creation properties.\r\n```\r\n    public ObjectNode withProperty(String property) {\r\n        JsonNode n = _children.get(property);\r\n        if (n != null) {\r\n            if (n instanceof ObjectNode) {\r\n                return (ObjectNode) n;\r\n            }\r\n            throw new UnsupportedOperationException(\"Property '\" + property\r\n                + \"' has value that is not of type `ObjectNode` (but `\" + n\r\n                .getClass().getName() + \"`)\");\r\n        }\r\n        ObjectNode result = objectNode();\r\n        _children.put(property, result);\r\n        return result;\r\n    }\r\n```\r\nOtherwise, migration to Jackson 3 will be very painful for many users like me, who often uses .with(\"property\") method.\n\nComment by cowtowncoder:\nOk, I do not think it is a good idea at all to overload \"property-or-expression\" because two sets are overlapping -- even if it is not common, one can definitely use empty String as property name, or something starting with slash.\r\n\r\nSituation with `withArray(String)` is a mess however, I admit. My apologies: it should be consistent -- and I need to see if it's just Javadoc being wrong.\r\n\r\nHaving said that, I am to addition of, say, 2 new methods that only allow property would make sense:\r\n\r\n* `withObjectProperty(String)`\r\n* `withArrayProperty(String)`\r\n\r\nand I'd be happy to help merge a PR, based on code sample @tanis138 shared for example.\r\n\n\nComment by bmatasar:\nBackwards compatibility is creating all this mess. For this purpose, \"property-or-expression\" fits best.\r\nHowever, I think overloading `withObject`/`withArray` with `String` for property name and `JsonPointer` for expression would be clearer and cleaner. This is what overloading is all about, in the end.\n\nComment by cowtowncoder:\nI will not be adding any new \"property-or-expression\" functionality, fwtw. I think that is a bad idea and I will try to eventually get rid of such logic; for now (2.x) functionality will be retained for backwards-compatibility.\r\nSo these methods will stay deprecated but won't be removed.\r\n\r\nI also dislike overloads for `withObject()` / `withArray()` because of ambiguity of `String` parameter: it could be either property name or un-compiled JsonPointer expression. Given that they are now implemented to support `JsonPointer` expression (whether compiled or as-String) that's how they shall remain.\r\nStrings are tricky for similar cases as input source: some APIs accept file paths as String (instead of or in addition to `java.io.File`), wherein others take in `String` as content (document to decode).\r\n\r\nThis is why the way forward to me is addition of 2 new methods. And due to need to produce array or object nodes, need 2 instead of generic `withProperty()`.\r\n\r\n\r\n\r\n\r\n\n\nComment by cowtowncoder:\nOn `JsonNode.withArray()`, it does indeed support \"property-or-expression\" -- I first looked at `ArrayNode` implementation where only expression works (because Arrays have no properties).\n\nComment by JuMp3:\nIf it helps, I solved it like this (withObject):\r\n\r\n`objNode.withObject(JsonPointer.compile(newPath))`\r\n\r\nwith this method of JsonNode.class (jackson-2.15.x)\r\n\r\npublic final ObjectNode withObject(JsonPointer ptr) {\r\n        return this.withObject(ptr, JsonNode.OverwriteMode.NULLS, true);\r\n}\n\nComment by filiphr:\nI'd like to chime in on this one as well. We were in the process of replacing `with` with `withObject` as it was written in the Javadoc, I missed the fact about the change that `withObject` is using now an expression.\r\n\r\nI 2.13 `with(String)` was only about property names, it didn't support using an expression. I don't know the reasoning for deprecating the `with` and for changing its behaviour to be `propertyOrExpression`. However, I do think that there should be something like you proposed @cowtowncoder in https://github.com/FasterXML/jackson-databind/issues/3780#issuecomment-1656555588.\r\n\r\nTo be honest, it makes it a bit cumbersome because `withArray` always supported property name and I guess that's why in 2.14 and 2.15 it supports property or expression. However, `withObject` is new from 2.14 and it doesn't support property names. In my opinion this type of API is a bit inconsistent. \r\n\r\ne.g.\r\n```java\r\ncustomer.withArray(\"addresses\");\r\n```\r\n\r\n```java\r\ncustomer.with(\"address\");\r\n```\r\n\r\nbut if I do \r\n\r\n```java\r\ncustomer.withObject(\"address\");\r\n```\r\n\r\nthen it doesn't work.\r\n\r\nIf 2 new methods are added then `withArray` is still going to support property I guess. This makes the API a bit inconsistent.\r\n\r\n@cowtowncoder is it an option to make `ObjectNode#withObject` consistent with `ObjectNode#withArray`? This way `withObjectProperty` and `withArrayProperty` won't be needed. Adding those 2 methods on the `JsonNode` will pollute the API a bit more. Otherwise, the deprecation on `JsonNode#with(String)` should be removed until there is an equivalent replacement method for it.\n\nComment by cowtowncoder:\nDeprecation was to address inconsistencies and my (seemingly mistaken) thinking that most access would be with multiple-level expressions, not \"simple\" property name. I also dislike heuristics of \"property-or-json-pointer-expr\".\r\nFinally, since there is strict need to specify whether Array or Object value is expected, plain `with()` seems problematic (in contrast to `withArray()`).\r\n\r\n\r\n\n\nComment by cowtowncoder:\nAfter reading this through again, I suspect that changing `withObject()` to work similar to `withArray()` may make sense after all: as much as I dislike \"expression-or-property-name\", I seem to be in minority.\r\nI filed a separate issue for this small change for 2.16 (#4096)\n\nComment by filiphr:\nThanks for taking our feedback into consideration @cowtowncoder ",
                "source_code": null,
                "distance": 0.25,
                "title": "Deprecated JsonNode.with(String) suggests using JsonNode.withObject(String) but it is not the same thing",
                "name": "issue#3780",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#3780"
                    }
                ],
                "similarity": 0.6653054230946077,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "3568",
                "type": "issue",
                "content": "With #1980 there are new methods/overloads for `withArray()` and `with()`, which take `JsonPointer`.\r\nThe old methods that take `String` should be retrofitted in 2.x so that:\r\n\r\n1. If argument is valid `JsonPointer` (that is, starts with leading '/` or is empty String \"\"), it should be used as such\r\n2. Only if argument is not a valid `JsonPointer`, should it check existing `property`.\r\n\r\nFor Jackson 3.0 we can just drop the check and expect valid `JsonPointer` String representation.\r\n\r\nThe reason for change is to make expected main use case work, while retaining reasonable backwards-compatibility.\r\n\n\n\nComment by dan2097:\n> The reason for change is to make expected main use case work, while retaining reasonable backwards-compatibility.\r\n\r\nFor the corner case where a user is creating/fetching keys that start with a forward slash this change is unequivocally not backwards compatible. Given that `with` was deprecated as part of https://github.com/FasterXML/jackson-databind/issues/3535 did its behaviour really need to change...\r\n\r\n(I'm not personally effected by this change, was just wondering what the closest replacement for the deprecated `with()` method was as the Javadoc didn't provide a suggestion, and was surprised to see the JsonPointer parsing logic. As far as I can see there isn't an exact replacement if you want your input interpreted as a literal key. For my use case `putObject` was actually appropriate)",
                "source_code": null,
                "distance": 0.5,
                "title": "Change `JsonNode.with(String)` and `withArray(String)` to consider argument as `JsonPointer` if valid expression",
                "name": "issue#3568",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    },
                    {
                        "start_node": "issue#4095",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#3568"
                    }
                ],
                "similarity": 0.6515370994670029,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "4096",
                "type": "issue",
                "content": "### Describe your Issue\n\n(see #3780 for lengthy background discussion)\r\n\r\nNew `JsonNode.withObject(String)` method added in 2.14 only allows for using String that is valid `JsonPointer` expression. This is different from existing `withArray(String)` method. While I earlier felt that the new behavior is more sensible, avoiding confusion, it seems many users feel otherwise.\r\n\r\nAs a consequence I think behavior should be changed for 2.16 to allow for \"property-or-expression\" -- this should be safe (enough) change and along with #4095 solve the issue.\r\n\r\n\r\n\n\n",
                "source_code": null,
                "distance": 0.5,
                "title": "Change `JsonNode.withObject(String)` to work similar to `withArray()` wrt argument",
                "name": "issue#4096",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    },
                    {
                        "start_node": "issue#4095",
                        "description": "referenced by issue",
                        "type": "RELATED",
                        "end_node": "issue#4096"
                    }
                ],
                "similarity": 0.6436597630732148,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "4095",
                "type": "issue",
                "content": "### Describe your Issue\n\n(note: offshoot of #3780, see that for context)\r\n\r\nI propose adding 2 new methods that only allow property would make sense:\r\n\r\n    withObjectProperty(String)\r\n    withArrayProperty(String)\r\n\r\nto help cover existing usage of `JsonNode.with(String)`.\r\n\n\n",
                "source_code": null,
                "distance": 0.25,
                "title": "Add `withObjectProperty(String)`, `withArrayProperty(String)` in `JsonNode`",
                "name": "issue#4095",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    }
                ],
                "similarity": 0.5873531310474122,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "4132",
                "type": "issue",
                "content": "\n\n",
                "source_code": null,
                "distance": 0.25,
                "title": "Fix #4096: change `JsonNode.withObject(String)` to accept non-expression argument (property name)",
                "name": "pr#4132",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#4132"
                    }
                ],
                "similarity": 0.5342255853311917,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "1980",
                "type": "issue",
                "content": "Currently one can either:\r\n\r\n1. Locate a descendant node using `at()` OR\r\n2. Traverse immediate children, if one exists, or add one if not using `with()` and `withArray()`\r\n\r\nbut not something that would combine utility. But perhaps it would be enough to overload `with()` to take `JsonPointer`, and work similar to `with` except possible create longer path.\r\nWe might as well overload `withArray()` as well.\r\n\r\nThis will supercede #393.\r\n\r\n**EDIT**: let's call methods `withObject()` and `withArray()` to indicate the expected node type to create. It will also be necessary to indicate allowed \"replacement mode\" in possible case of existing path being incompatible (f.ex expected path node being a scalar value), to determine whether to Replace the existing node (with Object/Array) or throw exception.\r\n\n\n",
                "source_code": null,
                "distance": 1.0,
                "title": "Add method(s) in `JsonNode` that works like combination of `at()` and `with()`: `withObject(...)` and `withArray(...)`",
                "name": "issue#1980",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    },
                    {
                        "start_node": "issue#4095",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#3568"
                    },
                    {
                        "start_node": "issue#3568",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#1980"
                    }
                ],
                "similarity": 0.40802199385929444,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "1115",
                "type": "issue",
                "content": "(note: continuation of #1079)\n\nLooks like earlier fix was incomplete, and there is one more edge case to handle: if passed-in context is `null`, attempt to resolve that will fail. This should not occur since previously passing of `null` would simply have used \"empty\" bindings. Code needs to take care to handle this as version 2.6 did.\n\n\n\nComment by todd-richmond:\nnever mind - swagger + jackson 2.7 issue goes deeper than this. I pulled the latest Jackson snapshot and it is still failing with Swagger 1.5.7. Turns out Swagger 1.5.7 is incompatible, but 1.5.6 seems to be ok with Jackson 2.7.1 so I'll file a bug on that side\n\n**\\* any ETA for 2.7.2? Looks like Swagger docs are still broken in 2.7.1 with a large # of values in swagger.json ending up null\n\n\nComment by cowtowncoder:\n@todd-richmond This is the only fix so far, so not imminent. Looks like nobody pretty much tried out any of Release Candidates, so I have not been aware of any significant breakages. Yet with 2.7.1 push, there's now a torrent of reports. Go figure.\n\nAt this point what would help a lot would be isolated test cases outlining specific issues: I should be able to resolve the issues. But I do not yet have good reproductions of what is failing. It could even be there would be a single issue that explains multiple reports.\n\n\nComment by todd-richmond:\nthx - it turns out that Swagger rewrote their JSON handling in 1.5.7 and so I was fighting conflicting bugs. The Jackson fix in 2.7.1 is good enough for Swagger 1.5.6 so I'm now working the other side to determine a workaround or fix for those changes\n\n\nComment by cowtowncoder:\n@todd-richmond Ok good. 2.7.1 fixes were definitely needed, over 2.7.0. That makes sense.\n\nBut I am definitely interested in possible/likely follow-up issues; DropWizard devs indicate they have some open problems. But of course it would be nice nice if those were less prevalent than ones fixed in 2.7.1.\n",
                "source_code": null,
                "distance": 0.5,
                "title": "Problems with deprecated `TypeFactory.constructType(type, ctxt)` methods if `ctxt` is `null`",
                "name": "issue#1115",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    },
                    {
                        "start_node": "issue#4095",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#1115"
                    }
                ],
                "similarity": 0.29886693332612285,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "1079",
                "type": "issue",
                "content": "(for background, see http://stackoverflow.com/questions/34721851/spring-4-2-3-and-fasterxml-jackson-2-7-0-are-incompatible)\n\nDue to complete rewrite of type inspection, resolution, changes were necessary to handling.\nHowever, since some of methods removed were public and not deprecated, it would be good to go back and see if it would not be possible to add them back as deprecated in 2.7.1. While this is not as good as noticing the issue for 2.7.0, perhaps it would help reduce friction for upgrades -- it is unfortunate there was a breakage.\n\nRelated methods include:\n\n``` java\n    public JavaType constructType(Type type);\n    public JavaType constructType(Type type, TypeBindings bindings);\n    public JavaType constructType(TypeReference<?> typeRef);\n    public JavaType constructType(Type type, Class<?> context);\n    public JavaType constructType(Type type, JavaType context);\n```\n\nof which it is likely that 2nd one can not be supported, but others are probably fine to keep, just discarding or ignoring contextual argument.\n\n\n\nComment by todd-richmond:\nThis issue also broke Swagger documentation\n\n\nComment by cowtowncoder:\n@todd-richmond Ok good to know, in case that gets reported separately.\n",
                "source_code": null,
                "distance": 1.0,
                "title": "Add back `TypeFactory.constructType(Type, Class)` as \"deprecated\" in 2.7.1",
                "name": "issue#1079",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    },
                    {
                        "start_node": "issue#4095",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#1115"
                    },
                    {
                        "start_node": "issue#1115",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#1079"
                    }
                ],
                "similarity": 0.20168362153620492,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "2966",
                "type": "issue",
                "content": "This feature is added to fix #2951 \n\n\nComment by cowtowncoder:\nInteresting. Quite simple, I like that. Due to being a new feature, would need to go in 2.13; and I may want to start thinking of better way to configure introspection aspects out of `MapperFeature` (partly since we are now maxed out on possible entries with `int` range).\r\n\r\nThank you for submitting this! It may take a while to get integrated as I am about take bit of a break from Jackson development for December, but I should be able to pick it up early in 2021.\r\n\r\n\n\nComment by ggrebert:\n@cowtowncoder Thx for your comment.\r\n\r\nBut I don't understand why the build fails on PPC architecture,\r\nand I haven't this kind of equipment to test.\r\n\n\nComment by cowtowncoder:\n@ggrebert ignore ppc failure for now; it was a recent contribution just merged -- I may have made a mistake with it.",
                "source_code": null,
                "distance": 0.75,
                "title": "Add feature to inverse read/write access logic",
                "name": "pr#2966",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    },
                    {
                        "start_node": "issue#4095",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#3568"
                    },
                    {
                        "start_node": "issue#3568",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "pr#2966"
                    }
                ],
                "similarity": 0.16629686519355016,
                "end_line": null,
                "signature": null
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "195",
                "type": "issue",
                "content": "Currently Jackson property introspection focuses on always finding all possible accessors (getters/setters, fields, constructors) for binding incoming data.\nBecause of this, some accessors are inferred. For example, with class:\n\n```\npublic class POJO {\n   private int value; // not visible by default\n\n   public int getValue() { return value; }\n}\n```\n\nfield \"value\" is actually detected as a mutator (accessor that can be used to set logical property 'value'), even thought it is not visible as per accessibility rules.\nThis simplifies things and reduces need for annotations.\n\nHowever: some users would prefer keeping everything explicit, and would prefer NOT to allow inference to be used. To support this, we should add:\n\n```\nMapperFeature.INFER_PROPERTY_ACCESSORS\n```\n\n(default value true)\n\nthat can be changed to prevent inference.\n\nFor extra points we may consider adding a class annotation (or property to an existing annotation) to further change this on per-class basis.\n\n\n\nComment by cowtowncoder:\nImplemented global on/off setting: deferring per-class overrides because handling of tri-state (true/false/default) is tricky and I don't feel like adding enums, doing all the work, without knowing if this would actually be needed.\nWould be easy enough to implement if necessary, for 2.3\n",
                "source_code": null,
                "distance": 0.75,
                "title": "Allow disabling inference of non-visible mutators (fields or setters)",
                "name": "issue#195",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4095"
                    },
                    {
                        "start_node": "issue#4095",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#3568"
                    },
                    {
                        "start_node": "issue#3568",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#195"
                    }
                ],
                "similarity": 0.15943901140743288,
                "end_line": null,
                "signature": null
            }
        ]
    },
    "artifact_stats": {
        "skipped_due_to_time": 10,
        "valid_related_items": 38
    }
}