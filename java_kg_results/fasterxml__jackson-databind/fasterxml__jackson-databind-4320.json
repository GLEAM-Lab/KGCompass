{
    "related_entities": {
        "methods": [
            {
                "start_line": 2014,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper activateDefaultTyping(PolymorphicTypeValidator ptv,",
                "distance": 1.25,
                "title": null,
                "name": "activateDefaultTyping",
                "documentation": "/**\n     * Method for enabling automatic inclusion of type information (\"Default Typing\"),\n     * needed for proper deserialization of polymorphic types (unless types\n     * have been annotated with {@link com.fasterxml.jackson.annotation.JsonTypeInfo}).\n     *<P>\n     * NOTE: use of {@code JsonTypeInfo.As#EXTERNAL_PROPERTY} <b>NOT SUPPORTED</b>;\n     * and attempts of do so will throw an {@link IllegalArgumentException} to make\n     * this limitation explicit.\n     *<p>\n     * NOTE: choice of {@link PolymorphicTypeValidator} to pass is critical for security\n     * as allowing all subtypes can be risky for untrusted content.\n     *\n     * @param ptv Validator used to verify that actual subtypes to deserialize are valid against\n     *    whatever criteria validator uses: important in case where untrusted content is deserialized.\n     * @param applicability Defines kinds of types for which additional type information\n     *    is added; see {@link DefaultTyping} for more information.\n     * @param includeAs\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "activateDefaultTyping"
                    }
                ],
                "similarity": 0.0722553199817805,
                "end_line": 2014,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv, DefaultTyping applicability, JsonTypeInfo includeAs): ObjectMapper"
            },
            {
                "start_line": 2070,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper deactivateDefaultTyping() {\n        return setDefaultTyping(null);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "deactivateDefaultTyping",
                "documentation": "/**\n     * Method for disabling automatic inclusion of type information; if so, only\n     * explicitly annotated types (ones with\n     * {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) will have\n     * additional embedded type information.\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "deactivateDefaultTyping"
                    }
                ],
                "similarity": 0.0685161524454253,
                "end_line": 2072,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.deactivateDefaultTyping(): ObjectMapper"
            },
            {
                "start_line": 2050,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv,",
                "distance": 1.25,
                "title": null,
                "name": "activateDefaultTypingAsProperty",
                "documentation": "/**\n     * Method for enabling automatic inclusion of type information (\"Default Typing\")\n     * -- needed for proper deserialization of polymorphic types (unless types\n     * have been annotated with {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) --\n     * using \"As.PROPERTY\" inclusion mechanism and specified property name\n     * to use for inclusion (default being \"@class\" since default type information\n     * always uses class name as type identifier)\n     *<p>\n     * NOTE: choice of {@link PolymorphicTypeValidator} to pass is critical for security\n     * as allowing all subtypes can be risky for untrusted content.\n     *\n     * @param ptv Validator used to verify that actual subtypes to deserialize are valid against\n     *    whatever criteria validator uses: important in case where untrusted content is deserialized.\n     * @param applicability Defines kinds of types for which additional type information\n     *    is added; see {@link DefaultTyping} for more information.\n     * @param propertyName Name of property used for including type id for polymorphic values.\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "activateDefaultTypingAsProperty"
                    }
                ],
                "similarity": 0.06618709480334871,
                "end_line": 2050,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv, DefaultTyping applicability, String propertyName): ObjectMapper"
            },
            {
                "start_line": 2105,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper enableDefaultTyping() {\n        return activateDefaultTyping(getPolymorphicTypeValidator());\n    }",
                "distance": 1.25,
                "title": null,
                "name": "enableDefaultTyping",
                "documentation": "/**\n     * @deprecated Since 2.10 use {@link #activateDefaultTyping(PolymorphicTypeValidator)} instead\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "enableDefaultTyping"
                    }
                ],
                "similarity": 0.06222360959989075,
                "end_line": 2107,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(): ObjectMapper"
            },
            {
                "start_line": 2137,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper disableDefaultTyping() {\n        return setDefaultTyping(null);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "disableDefaultTyping",
                "documentation": "/**\n     * @deprecated Since 2.10 use {@link #deactivateDefaultTyping} instead\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "disableDefaultTyping"
                    }
                ],
                "similarity": 0.061533125084261106,
                "end_line": 2139,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping(): ObjectMapper"
            },
            {
                "start_line": 2343,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper clearProblemHandlers() {\n        _deserializationConfig = _deserializationConfig.withNoProblemHandlers();\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "clearProblemHandlers",
                "documentation": "/**\n     * Method for removing all registered {@link DeserializationProblemHandler}s\n     * instances from this mapper.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "clearProblemHandlers"
                    }
                ],
                "similarity": 0.06129185935331637,
                "end_line": 2346,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers(): ObjectMapper"
            },
            {
                "start_line": 1692,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setSubtypeResolver(SubtypeResolver str) {\n        _subtypeResolver = str;\n        _deserializationConfig = _deserializationConfig.with(str);\n        _serializationConfig = _serializationConfig.with(str);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setSubtypeResolver",
                "documentation": "/**\n     * Method for setting custom subtype resolver to use.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setSubtypeResolver"
                    }
                ],
                "similarity": 0.06047700602169254,
                "end_line": 1697,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver(SubtypeResolver str): ObjectMapper"
            },
            {
                "start_line": 2113,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper enableDefaultTyping(DefaultTyping dti) {\n        return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "enableDefaultTyping",
                "documentation": "/**\n     * @deprecated Since 2.10 use {@link #activateDefaultTyping(PolymorphicTypeValidator,DefaultTyping)} instead\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "enableDefaultTyping"
                    }
                ],
                "similarity": 0.059196439516669266,
                "end_line": 2115,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(DefaultTyping dti): ObjectMapper"
            },
            {
                "start_line": 2089,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setDefaultTyping(TypeResolverBuilder<?> typer) {\n        _deserializationConfig = _deserializationConfig.with(typer);\n        _serializationConfig = _serializationConfig.with(typer);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setDefaultTyping",
                "documentation": "/**\n     * Method for enabling automatic inclusion of type information (\"Default Typing\"),\n     * using specified handler object for determining which types this affects,\n     * as well as details of how information is embedded.\n     *<p>\n     * NOTE: use of Default Typing can be a potential security risk if incoming\n     * content comes from untrusted sources, so care should be taken to use\n     * a {@link TypeResolverBuilder} that can limit allowed classes to\n     * deserialize. Note in particular that\n     * {@link com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder}\n     * DOES NOT limit applicability but creates type (de)serializers for all\n     * types.\n     *\n     * @param typer Type information inclusion handler\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setDefaultTyping"
                    }
                ],
                "similarity": 0.05905525332076113,
                "end_line": 2093,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping(TypeResolverBuilder typer): ObjectMapper"
            },
            {
                "start_line": 1989,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper activateDefaultTyping(PolymorphicTypeValidator ptv,",
                "distance": 1.25,
                "title": null,
                "name": "activateDefaultTyping",
                "documentation": "/**\n     * Convenience method that is equivalent to calling\n     *<pre>\n     *  activateDefaultTyping(ptv, dti, JsonTypeInfo.As.WRAPPER_ARRAY);\n     *</pre>\n     *<p>\n     * NOTE: choice of {@link PolymorphicTypeValidator} to pass is critical for security\n     * as allowing all subtypes can be risky for untrusted content.\n     *\n     * @param ptv Validator used to verify that actual subtypes to deserialize are valid against\n     *    whatever criteria validator uses: important in case where untrusted content is deserialized.\n     * @param applicability Defines kinds of types for which additional type information\n     *    is added; see {@link DefaultTyping} for more information.\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "activateDefaultTyping"
                    }
                ],
                "similarity": 0.05896535948119491,
                "end_line": 1989,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv, DefaultTyping applicability): ObjectMapper"
            },
            {
                "start_line": 2121,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs) {\n        return activateDefaultTyping(getPolymorphicTypeValidator(), applicability, includeAs);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "enableDefaultTyping",
                "documentation": "/**\n     * @deprecated Since 2.10 use {@link #activateDefaultTyping(PolymorphicTypeValidator,DefaultTyping,JsonTypeInfo.As)} instead\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "enableDefaultTyping"
                    }
                ],
                "similarity": 0.05603119853813067,
                "end_line": 2123,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo includeAs): ObjectMapper"
            },
            {
                "start_line": 5002,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final void _verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt,",
                "distance": 1.25,
                "title": null,
                "name": "_verifyNoTrailingTokens",
                "documentation": "/**\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_verifyNoTrailingTokens"
                    }
                ],
                "similarity": 0.05591871072051207,
                "end_line": 5002,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt, JavaType bindType): void"
            },
            {
                "start_line": 246,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonMappingException(Closeable processor, String msg, Throwable problem) {\n        super(msg, problem);\n        _processor = processor;\n        // 31-Jan-2020: [databind#2482] Retain original location\n        if (problem instanceof JacksonException) {\n            _location = ((JacksonException) problem).getLocation();\n        } else if (processor instanceof JsonParser) {\n            _location = ((JsonParser) processor).currentTokenLocation();\n        }\n    }",
                "distance": 1.0,
                "title": null,
                "name": "JsonMappingException",
                "documentation": "/**\n     * @since 2.7\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonMappingException"
                    }
                ],
                "similarity": 0.05547029597105025,
                "end_line": 255,
                "signature": "com.fasterxml.jackson.databind.JsonMappingException(Closeable processor, String msg, Throwable problem)"
            },
            {
                "start_line": 1888,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setDefaultVisibility(JsonAutoDetect.Value vis) {\n        _configOverrides.setDefaultVisibility(VisibilityChecker.Std.construct(vis));\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setDefaultVisibility",
                "documentation": "/**\n     * Method for setting auto-detection visibility definition\n     * defaults, which are in effect unless overridden by\n     * annotations (like <code>JsonAutoDetect</code>) or per-type\n     * visibility overrides.\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setDefaultVisibility"
                    }
                ],
                "similarity": 0.055205470061333424,
                "end_line": 1891,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility(JsonAutoDetect vis): ObjectMapper"
            },
            {
                "start_line": 232,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonMappingException(Closeable processor, String msg) {\n        super(msg);\n        _processor = processor;\n        if (processor instanceof JsonParser) {\n            // 17-Aug-2015, tatu: Use of token location makes some sense from databinding,\n            //   since actual parsing (current) location is typically only needed for low-level\n            //   parsing exceptions.\n            _location = ((JsonParser) processor).currentTokenLocation();\n        }\n    }",
                "distance": 1.0,
                "title": null,
                "name": "JsonMappingException",
                "documentation": "/**\n     * @since 2.7\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonMappingException"
                    }
                ],
                "similarity": 0.054589059660107804,
                "end_line": 241,
                "signature": "com.fasterxml.jackson.databind.JsonMappingException(Closeable processor, String msg)"
            },
            {
                "start_line": 1796,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setPolymorphicTypeValidator(PolymorphicTypeValidator ptv) {\n        BaseSettings s = _deserializationConfig.getBaseSettings().with(ptv);\n        _deserializationConfig = _deserializationConfig._withBase(s);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setPolymorphicTypeValidator",
                "documentation": "/**\n     * Method for specifying {@link PolymorphicTypeValidator} to use for validating\n     * polymorphic subtypes used with explicit polymorphic types (annotation-based),\n     * but NOT one with \"default typing\" (see {@link #activateDefaultTyping(PolymorphicTypeValidator)}\n     * for details).\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setPolymorphicTypeValidator"
                    }
                ],
                "similarity": 0.0537697144643491,
                "end_line": 1800,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setPolymorphicTypeValidator(PolymorphicTypeValidator ptv): ObjectMapper"
            },
            {
                "start_line": 1875,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setDefaultSetterInfo(JsonSetter.Value v) {\n        _configOverrides.setDefaultSetterInfo(v);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setDefaultSetterInfo",
                "documentation": "/**\n     * Method for setting default Setter configuration, regarding things like\n     * merging, null-handling; used for properties for which there are\n     * no per-type or per-property overrides (via annotations or config overrides).\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setDefaultSetterInfo"
                    }
                ],
                "similarity": 0.0528112860753547,
                "end_line": 1878,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(JsonSetter v): ObjectMapper"
            },
            {
                "start_line": 3056,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> T readValue(JsonParser p, TypeReference<T> valueTypeRef)",
                "distance": 1.25,
                "title": null,
                "name": "readValue",
                "documentation": "/**\n     * Method to deserialize JSON content into a Java type, reference\n     * to which is passed as argument. Type is passed using so-called\n     * \"super type token\" (see )\n     * and specifically needs to be used if the root type is a\n     * parameterized (generic) container type.\n     *\n     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n     *   network error) occurs (passed through as-is without additional wrapping -- note\n     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n     *   does NOT result in wrapping of exception even if enabled)\n     * @throws StreamReadException if underlying input contains invalid content\n     *    of type {@link JsonParser} supports (JSON for default case)\n     * @throws DatabindException if the input JSON structure does not match structure\n     *   expected for result type (or has other mismatch issues)\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readValue"
                    }
                ],
                "similarity": 0.051657242847508965,
                "end_line": 3056,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser p, TypeReference valueTypeRef): T"
            },
            {
                "start_line": 4887,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected Object _readMapAndClose(JsonParser p0, JavaType valueType)",
                "distance": 1.25,
                "title": null,
                "name": "_readMapAndClose",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_readMapAndClose"
                    }
                ],
                "similarity": 0.05156228939912397,
                "end_line": 4887,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(JsonParser p0, JavaType valueType): Object"
            },
            {
                "start_line": 1850,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Value incl) {\n        _configOverrides.setDefaultInclusion(incl);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setDefaultPropertyInclusion",
                "documentation": "/**\n     * Method for setting default POJO property inclusion strategy for serialization,\n     * applied for all properties for which there are no per-type or per-property\n     * overrides (via annotations or config overrides).\n     *\n     * @since 2.9 (basically rename of <code>setPropertyInclusion</code>)\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setDefaultPropertyInclusion"
                    }
                ],
                "similarity": 0.050606145196837246,
                "end_line": 1853,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude incl): ObjectMapper"
            },
            {
                "start_line": 5022,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt,",
                "distance": 1.25,
                "title": null,
                "name": "_findRootDeserializer",
                "documentation": "/**\n     * Method called to locate deserializer for the passed root-level value.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_findRootDeserializer"
                    }
                ],
                "similarity": 0.0498974855270719,
                "end_line": 5022,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(DeserializationContext ctxt, JavaType valueType): JsonDeserializer"
            },
            {
                "start_line": 604,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper() {\n        this(null, null, null);\n    }",
                "distance": 1.0,
                "title": null,
                "name": "ObjectMapper",
                "documentation": "/**\n     * Default constructor, which will construct the default\n     * {@link JsonFactory} as necessary, use\n     * {@link SerializerProvider} as its\n     * {@link SerializerProvider}, and\n     * {@link BeanSerializerFactory} as its\n     * {@link SerializerFactory}.\n     * This means that it\n     * can serialize all standard JDK types, as well as regular\n     * Java Beans (based on method names and Jackson-specific annotations),\n     * but does not support JAXB annotations.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    }
                ],
                "similarity": 0.049892980843268195,
                "end_line": 606,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper()"
            },
            {
                "start_line": 3670,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public boolean canDeserialize(JavaType type)",
                "distance": 1.25,
                "title": null,
                "name": "canDeserialize",
                "documentation": "/**\n     * Method that can be called to check whether mapper thinks\n     * it could deserialize an Object of given type.\n     * Check is done by checking whether a registered deserializer can\n     * be found or built for the type; if not (either by no mapping being\n     * found, or through an <code>Exception</code> being thrown, false\n     * is returned.\n     *<p>\n     * <b>NOTE</b>: in case an exception is thrown during course of trying\n     * co construct matching deserializer, it will be effectively swallowed.\n     * If you want access to that exception, call\n     * {@link #canDeserialize(JavaType, AtomicReference)} instead.\n     *\n     * @return True if mapper can find a serializer for instances of\n     *  given class (potentially serializable), false otherwise (not\n     *  serializable)\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "canDeserialize"
                    }
                ],
                "similarity": 0.049792830212639534,
                "end_line": 3670,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(JavaType type): boolean"
            },
            {
                "start_line": 3683,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)",
                "distance": 1.25,
                "title": null,
                "name": "canDeserialize",
                "documentation": "/**\n     * Method similar to {@link #canDeserialize(JavaType)} but that can return\n     * actual {@link Throwable} that was thrown when trying to construct\n     * serializer: this may be useful in figuring out what the actual problem is.\n     *\n     * @since 2.3\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "canDeserialize"
                    }
                ],
                "similarity": 0.04924760523610945,
                "end_line": 3683,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(JavaType type, AtomicReference cause): boolean"
            },
            {
                "start_line": 3434,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public JsonNode nullNode() {\n        return _deserializationConfig.getNodeFactory().nullNode();\n    }",
                "distance": 1.25,
                "title": null,
                "name": "nullNode",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "nullNode"
                    }
                ],
                "similarity": 0.04877257274571679,
                "end_line": 3436,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.nullNode(): JsonNode"
            },
            {
                "start_line": 3031,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> T readValue(JsonParser p, Class<T> valueType)",
                "distance": 1.25,
                "title": null,
                "name": "readValue",
                "documentation": "/**\n     * Method to deserialize JSON content into a non-container\n     * type (it can be an array type, however): typically a bean, array\n     * or a wrapper type (like {@link java.lang.Boolean}).\n     *<p>\n     * Note: this method should NOT be used if the result type is a\n     * container ({@link java.util.Collection} or {@link java.util.Map}.\n     * The reason is that due to type erasure, key and value types\n     * cannot be introspected when using this method.\n     *\n     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n     *   network error) occurs (passed through as-is without additional wrapping -- note\n     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n     *   does NOT result in wrapping of exception even if enabled)\n     * @throws StreamReadException if underlying input contains invalid content\n     *    of type {@link JsonParser} supports (JSON for default case)\n     * @throws DatabindException if the input JSON structure does not match structure\n     *   expected for result type (or has other mismatch issues)\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readValue"
                    }
                ],
                "similarity": 0.04874269797292602,
                "end_line": 3031,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser p, Class valueType): T"
            },
            {
                "start_line": 2362,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setConfig(DeserializationConfig config) {\n        _assertNotNull(\"config\", config);\n        _deserializationConfig = config;\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setConfig",
                "documentation": "/**\n     * Method that allows overriding of the underlying {@link DeserializationConfig}\n     * object.\n     * It is added as a fallback method that may be used if no other configuration\n     * modifier method works: it should not be used if there are alternatives,\n     * and its use is generally discouraged.\n     *<p>\n     * <b>NOTE</b>: only use this method if you know what you are doing -- it allows\n     * by-passing some of checks applied to other configuration methods.\n     * Also keep in mind that as with all configuration of {@link ObjectMapper},\n     * this is only thread-safe if done before calling any deserialization methods.\n     *\n     * @since 2.4\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setConfig"
                    }
                ],
                "similarity": 0.0482847750264896,
                "end_line": 2366,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setConfig(DeserializationConfig config): ObjectMapper"
            },
            {
                "start_line": 1969,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper activateDefaultTyping(PolymorphicTypeValidator ptv) {\n        return activateDefaultTyping(ptv, DefaultTyping.OBJECT_AND_NON_CONCRETE);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "activateDefaultTyping",
                "documentation": "/**\n     * Convenience method that is equivalent to calling\n     *<pre>\n     *  activateDefaultTyping(ptv, DefaultTyping.OBJECT_AND_NON_CONCRETE);\n     *</pre>\n     *<p>\n     * NOTE: choice of {@link PolymorphicTypeValidator} to pass is critical for security\n     * as allowing all subtypes can be risky for untrusted content.\n     *\n     * @param ptv Validator used to verify that actual subtypes to deserialize are valid against\n     *    whatever criteria validator uses: important in case where untrusted content is deserialized.\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "activateDefaultTyping"
                    }
                ],
                "similarity": 0.04823433872242263,
                "end_line": 1971,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv): ObjectMapper"
            },
            {
                "start_line": 2239,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setTypeFactory(TypeFactory f)",
                "distance": 1.25,
                "title": null,
                "name": "setTypeFactory",
                "documentation": "/**\n     * Method that can be used to override {@link TypeFactory} instance\n     * used by this mapper.\n     *<p>\n     * Note: will also set {@link TypeFactory} that deserialization and\n     * serialization config objects use.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setTypeFactory"
                    }
                ],
                "similarity": 0.048154147273001754,
                "end_line": 2239,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory(TypeFactory f): ObjectMapper"
            },
            {
                "start_line": 2129,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper enableDefaultTypingAsProperty(DefaultTyping applicability, String propertyName) {\n        return activateDefaultTypingAsProperty(getPolymorphicTypeValidator(), applicability, propertyName);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "enableDefaultTypingAsProperty",
                "documentation": "/**\n     * @deprecated Since 2.10 use {@link #activateDefaultTypingAsProperty(PolymorphicTypeValidator,DefaultTyping,String)} instead\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "enableDefaultTypingAsProperty"
                    }
                ],
                "similarity": 0.048013434563416106,
                "end_line": 2131,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty(DefaultTyping applicability, String propertyName): ObjectMapper"
            },
            {
                "start_line": 1810,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public PolymorphicTypeValidator getPolymorphicTypeValidator() {\n        return _deserializationConfig.getBaseSettings().getPolymorphicTypeValidator();\n    }",
                "distance": 1.25,
                "title": null,
                "name": "getPolymorphicTypeValidator",
                "documentation": "/**\n     * Accessor for configured {@link PolymorphicTypeValidator} used for validating\n     * polymorphic subtypes used with explicit polymorphic types (annotation-based),\n     * but NOT one with \"default typing\" (see {@link #activateDefaultTyping(PolymorphicTypeValidator)}\n     * for details).\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "getPolymorphicTypeValidator"
                    }
                ],
                "similarity": 0.04745354923570553,
                "end_line": 1812,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.getPolymorphicTypeValidator(): PolymorphicTypeValidator"
            },
            {
                "start_line": 4548,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> T convertValue(Object fromValue, Class<T> toValueType)",
                "distance": 1.25,
                "title": null,
                "name": "convertValue",
                "documentation": "/**\n     * Convenience method for doing two-step conversion from given value, into\n     * instance of given value type, by writing value into temporary buffer\n     * and reading from the buffer into specified target type.\n     *<p>\n     * This method is functionally similar to first\n     * serializing given value into JSON, and then binding JSON data into value\n     * of given type, but should be more efficient since full serialization does\n     * not (need to) occur.\n     * However, same converters (serializers, deserializers) will be used as for\n     * data binding, meaning same object mapper configuration works.\n     *<p>\n     * Note that behavior changed slightly between Jackson 2.9 and 2.10 so that\n     * whereas earlier some optimizations were used to avoid write/read cycle\n     * in case input was of target type, from 2.10 onwards full processing is\n     * always performed. See\n     * <a href=\"https://github.com/FasterXML/jackson-databind/issues/2220\">databind#2220</a>\n     * for full details of the change.\n     *<p>\n     * Further note that it is possible that in some cases behavior does differ\n     * from full serialize-then-deserialize cycle: in most case differences are\n     * unintentional (that is, flaws to fix) and should be reported, but\n     * the behavior is not guaranteed to be 100% the same:\n     * the goal is to allow efficient value conversions for structurally\n     * compatible Objects, according to standard Jackson configuration.\n     *<p>\n     * Finally, this functionality is not designed to support \"advanced\" use\n     * cases, such as conversion of polymorphic values, or cases where Object Identity\n     * is used.\n     *\n     * @throws IllegalArgumentException If conversion fails due to incompatible type;\n     *    if so, root cause will contain underlying checked exception data binding\n     *    functionality threw\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "convertValue"
                    }
                ],
                "similarity": 0.04694467242215115,
                "end_line": 4548,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(Object fromValue, Class toValueType): T"
            },
            {
                "start_line": 308,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    private static JsonParser _parser(DeserializationContext ctxt) {\n        return (ctxt == null) ? null : ctxt.getParser();\n    }",
                "distance": 1.25,
                "title": null,
                "name": "_parser",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "JsonMappingException"
                    },
                    {
                        "start_node": "JsonMappingException",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_parser"
                    }
                ],
                "similarity": 0.04681047783009043,
                "end_line": 310,
                "signature": "com.fasterxml.jackson.databind.JsonMappingException._parser(DeserializationContext ctxt): JsonParser"
            },
            {
                "start_line": 1730,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI,",
                "distance": 1.25,
                "title": null,
                "name": "setAnnotationIntrospectors",
                "documentation": "/**\n     * Method for changing {@link AnnotationIntrospector} instances used\n     * by this mapper instance for serialization and deserialization,\n     * specifying them separately so that different introspection can be\n     * used for different aspects\n     *\n     * @since 2.1\n     *\n     * @param serializerAI {@link AnnotationIntrospector} to use for configuring\n     *    serialization\n     * @param deserializerAI {@link AnnotationIntrospector} to use for configuring\n     *    deserialization\n     *\n     * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setAnnotationIntrospectors"
                    }
                ],
                "similarity": 0.04634606657088026,
                "end_line": 1730,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI): ObjectMapper"
            },
            {
                "start_line": 1900,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setDefaultMergeable(Boolean b) {\n        _configOverrides.setDefaultMergeable(b);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setDefaultMergeable",
                "documentation": "/**\n     * Method for setting default Setter configuration, regarding things like\n     * merging, null-handling; used for properties for which there are\n     * no per-type or per-property overrides (via annotations or config overrides).\n     *\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setDefaultMergeable"
                    }
                ],
                "similarity": 0.04631213483560702,
                "end_line": 1903,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(Boolean b): ObjectMapper"
            },
            {
                "start_line": 688,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    private DeserializationConfig _withoutJsonReadFeatures(FormatFeature... features) {\n        int parserSet = _parserFeatures;\n        int parserMask = _parserFeaturesToChange;\n        int newSet = _formatReadFeatures;\n        int newMask = _formatReadFeaturesToChange;\n        for (FormatFeature f : features) {\n            final int mask = f.getMask();\n            newSet &= ~mask;\n            newMask |= mask;\n\n            if (f instanceof JsonReadFeature) {\n                JsonParser.Feature oldF = ((JsonReadFeature) f).mappedFeature();\n                if (oldF != null) {\n                    final int pmask = oldF.getMask();\n                    parserSet &= ~pmask;\n                    parserMask |= pmask;\n                }\n            }\n        }\n        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)\n                && (_parserFeatures == parserSet) && (_parserFeaturesToChange == parserMask)\n                ) ? this :\n            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,\n                    parserSet, parserMask, newSet, newMask);\n    }",
                "distance": 2.5,
                "title": null,
                "name": "_withoutJsonReadFeatures",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "calls method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contained in method",
                        "type": "RELATED",
                        "end_node": "DeserializationConfig"
                    },
                    {
                        "start_node": "DeserializationConfig",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_withoutJsonReadFeatures"
                    }
                ],
                "similarity": 0.04615496672266815,
                "end_line": 712,
                "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withoutJsonReadFeatures(FormatFeature features): DeserializationConfig"
            },
            {
                "start_line": 2810,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper configure(DatatypeFeature f, boolean state) {\n        if (state) {\n            _deserializationConfig = _deserializationConfig.with(f);\n            _serializationConfig = _serializationConfig.with(f);\n        } else {\n            _deserializationConfig = _deserializationConfig.without(f);\n            _serializationConfig = _serializationConfig.without(f);\n        }\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "configure",
                "documentation": "/**\n     * Method for changing state of an on/off datatype-specific feature for\n     * this object mapper.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#configure(DatatypeFeature, boolean)} instead.</strong>\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "configure"
                    }
                ],
                "similarity": 0.04608957885876498,
                "end_line": 2819,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(DatatypeFeature f, boolean state): ObjectMapper"
            },
            {
                "start_line": 3218,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> MappingIterator<T> readValues(JsonParser p, TypeReference<T> valueTypeRef)",
                "distance": 1.25,
                "title": null,
                "name": "readValues",
                "documentation": "/**\n     * Method for reading sequence of Objects from parser stream.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readValues"
                    }
                ],
                "similarity": 0.04555112149533545,
                "end_line": 3218,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser p, TypeReference valueTypeRef): MappingIterator"
            },
            {
                "start_line": 1945,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public void registerSubtypes(Collection<Class<?>> subtypes) {\n        getSubtypeResolver().registerSubtypes(subtypes);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "registerSubtypes",
                "documentation": "/**\n     * @since 2.9\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "registerSubtypes"
                    }
                ],
                "similarity": 0.04553678879887619,
                "end_line": 1947,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(Collection subtypes): void"
            },
            {
                "start_line": 1500,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper setSerializerProvider(DefaultSerializerProvider p) {\n        _serializerProvider = p;\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "setSerializerProvider",
                "documentation": "/**\n     * Method for setting \"blueprint\" {@link SerializerProvider} instance\n     * to use as the base for actual provider instances to use for handling\n     * caching of {@link JsonSerializer} instances.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "setSerializerProvider"
                    }
                ],
                "similarity": 0.04544342386763055,
                "end_line": 1503,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider(DefaultSerializerProvider p): ObjectMapper"
            },
            {
                "start_line": 4861,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected Object _readValue(DeserializationConfig cfg, JsonParser p,",
                "distance": 1.25,
                "title": null,
                "name": "_readValue",
                "documentation": "/**\n     * Actual implementation of value reading+binding operation.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_readValue"
                    }
                ],
                "similarity": 0.0450702086218931,
                "end_line": 4861,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper._readValue(DeserializationConfig cfg, JsonParser p, JavaType valueType): Object"
            },
            {
                "start_line": 2787,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper disable(DeserializationFeature first,",
                "distance": 1.25,
                "title": null,
                "name": "disable",
                "documentation": "/**\n     * Method for disabling specified {@link DeserializationConfig} features.\n     * Modifies and returns this instance; no new object is created.\n     * <p>\n     * Note: Changing the configuration of this {@link ObjectMapper} instance after its first use (read &amp; write) is\n     * not safe and should not be attempted. Instead, use {@code with()} and {@code without()} methods of\n     * {@link ObjectReader}/{@link ObjectWriter} which fully support reconfiguration as new instances are constructed.\n     * <p>\n     * <strong>This method will be removed in Jackson 3.0 due to unsafe usage.\n     * Configure using {@link MapperBuilder#disable(DeserializationFeature...)} instead.</strong>\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "disable"
                    }
                ],
                "similarity": 0.044974817835039545,
                "end_line": 2787,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(DeserializationFeature first, DeserializationFeature f): ObjectMapper"
            },
            {
                "start_line": 3468,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> T treeToValue(TreeNode n, Class<T> valueType)",
                "distance": 1.25,
                "title": null,
                "name": "treeToValue",
                "documentation": "/**\n     * Convenience conversion method that will bind data given JSON tree\n     * contains into specific value (usually bean) type.\n     *<p>\n     * Functionally equivalent to:\n     *<pre>\n     *   objectMapper.convertValue(n, valueClass);\n     *</pre>\n     *<p>\n     * Note: inclusion of {@code throws JsonProcessingException} is not accidental\n     * since while there can be no input decoding problems, it is possible that content\n     * does not match target type: in such case various {@link DatabindException}s\n     * are possible. In addition {@link IllegalArgumentException} is possible in some\n     * cases, depending on whether {@link DeserializationFeature#WRAP_EXCEPTIONS}\n     * is enabled or not.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "treeToValue"
                    }
                ],
                "similarity": 0.04491151843014106,
                "end_line": 3468,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.treeToValue(TreeNode n, Class valueType): T"
            },
            {
                "start_line": 4394,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectReader readerForListOf(Class<?> type) {\n        _assertNotNull(\"type\", type);\n        return _newReader(getDeserializationConfig(),\n                _typeFactory.constructCollectionType(List.class, type), null,\n                null, _injectableValues);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "readerForListOf",
                "documentation": "/**\n     * Factory method for constructing {@link ObjectReader} that will\n     * read or update instances of a type {@code List<type>}.\n     * Functionally same as:\n     *<pre>\n     *    readerFor(new TypeReference&lt;List&lt;type&gt;&gt;() { });\n     *</pre>\n     *\n     * @since 2.11\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readerForListOf"
                    }
                ],
                "similarity": 0.04482646243599248,
                "end_line": 4399,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerForListOf(Class type): ObjectReader"
            },
            {
                "start_line": 3080,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public final <T> T readValue(JsonParser p, ResolvedType valueType)",
                "distance": 1.25,
                "title": null,
                "name": "readValue",
                "documentation": "/**\n     * Method to deserialize JSON content into a Java type, reference\n     * to which is passed as argument. Type is passed using\n     * Jackson specific type; instance of which can be constructed using\n     * {@link TypeFactory}.\n     *\n     * @throws IOException if a low-level I/O problem (unexpected end-of-input,\n     *   network error) occurs (passed through as-is without additional wrapping -- note\n     *   that this is one case where {@link DeserializationFeature#WRAP_EXCEPTIONS}\n     *   does NOT result in wrapping of exception even if enabled)\n     * @throws StreamReadException if underlying input contains invalid content\n     *    of type {@link JsonParser} supports (JSON for default case)\n     * @throws DatabindException if the input JSON structure does not match structure\n     *   expected for result type (or has other mismatch issues)\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readValue"
                    }
                ],
                "similarity": 0.04478894199913088,
                "end_line": 3080,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser p, ResolvedType valueType): T"
            },
            {
                "start_line": 2334,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper addHandler(DeserializationProblemHandler h) {\n        _deserializationConfig = _deserializationConfig.withHandler(h);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "addHandler",
                "documentation": "/**\n     * Method for adding specified {@link DeserializationProblemHandler}\n     * to be used for handling specific problems during deserialization.\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "addHandler"
                    }
                ],
                "similarity": 0.04426360524730549,
                "end_line": 2337,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.addHandler(DeserializationProblemHandler h): ObjectMapper"
            },
            {
                "start_line": 4761,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected TypeResolverBuilder<?> _constructDefaultTypeResolverBuilder(DefaultTyping applicability,",
                "distance": 1.25,
                "title": null,
                "name": "_constructDefaultTypeResolverBuilder",
                "documentation": "/**\n     * Overridable factory method, separate to allow format-specific mappers (and specifically\n     * XML-backed one, currently) to offer custom {@link TypeResolverBuilder} subtypes.\n     *\n     * @since 2.10\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_constructDefaultTypeResolverBuilder"
                    }
                ],
                "similarity": 0.043869648667576755,
                "end_line": 4761,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper._constructDefaultTypeResolverBuilder(DefaultTyping applicability, PolymorphicTypeValidator ptv): TypeResolverBuilder"
            },
            {
                "start_line": 2593,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public ObjectMapper disable(MapperFeature... f) {\n        _deserializationConfig = _deserializationConfig.without(f);\n        _serializationConfig = _serializationConfig.without(f);\n        return this;\n    }",
                "distance": 1.25,
                "title": null,
                "name": "disable",
                "documentation": "/**\n     * @deprecated Since 2.13 use {@code JsonMapper.builder().disable(...)}\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "disable"
                    }
                ],
                "similarity": 0.043841670969746116,
                "end_line": 2597,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(MapperFeature f): ObjectMapper"
            },
            {
                "start_line": 4847,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    protected final void _configAndWriteValue(JsonGenerator g, Object value) throws IOException {\n        getSerializationConfig().initialize(g);\n        _writeValueAndClose(g, value);\n    }",
                "distance": 1.25,
                "title": null,
                "name": "_configAndWriteValue",
                "documentation": "/**\n     * @deprecated Since 2.11.2 Use {@link #_writeValueAndClose} instead\n     */",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "_configAndWriteValue"
                    }
                ],
                "similarity": 0.04364907160007998,
                "end_line": 4850,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(JsonGenerator g, Object value): void"
            },
            {
                "start_line": 3962,
                "file_path": "playground/fasterxml__jackson-databind/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "issue_id": null,
                "type": "method",
                "content": null,
                "source_code": "    public <T> T readValue(DataInput src, JavaType valueType) throws IOException",
                "distance": 1.25,
                "title": null,
                "name": "readValue",
                "documentation": "",
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "ObjectMapper"
                    },
                    {
                        "start_node": "ObjectMapper",
                        "description": "contains class",
                        "type": "RELATED",
                        "end_node": "readValue"
                    }
                ],
                "similarity": 0.04312553895532073,
                "end_line": 3962,
                "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(DataInput src, JavaType valueType): T"
            }
        ],
        "classes": [],
        "issues": [
            {
                "content": "### Search before asking\r\n\r\n- [X] I searched in the [issues](https://github.com/FasterXML/jackson-databind/issues) and found nothing similar.\r\n\r\n### Describe the bug\r\n\r\nIssue comes from 2018, https://github.com/FasterXML/jackson-databind/issues/1402 (two last comments).\r\n\r\nUnknown enum values and subtypes are added as null into result collection instead of being skipped. \r\n\r\n`@JsonSetter(nulls = Nulls.SKIP)` and `.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))` have no effect on nulls with:\r\n- READ_UNKNOWN_ENUM_VALUES_AS_NULL (is used for enums to consider unknown as null)\r\n- FAIL_ON_INVALID_SUBTYPE (is used for subtypes to consider unknown as null)\r\n\r\n\r\n### Version Information\r\n\r\n2.15.3\r\n\r\n### Reproduction\r\n\r\n\r\nREAD_UNKNOWN_ENUM_VALUES_AS_NULL:\r\n```java\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\nimport java.util.List;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonSetter;\r\nimport com.fasterxml.jackson.annotation.Nulls;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.DeserializationFeature;\r\nimport com.fasterxml.jackson.databind.JsonMappingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\n\r\nclass TestCase {\r\n\r\n    ObjectMapper objectMapper = JsonMapper.builder()\r\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\r\n            .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\r\n            .build();\r\n\r\n    static class Data {\r\n\r\n        private List<Type> types;\r\n\r\n        public List<Type> getTypes() {\r\n            return types;\r\n        }\r\n\r\n        public void setTypes(List<Type> types) {\r\n            this.types = types;\r\n        }\r\n\r\n    }\r\n\r\n    static enum Type {\r\n        ONE, TWO\r\n    }\r\n\r\n    @Test\r\n    void shouldSkipUnknownEnumDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\r\n        String json = \"{ \\\"types\\\" : [\\\"TWO\\\", \\\"THREE\\\"] }\";\r\n\r\n        Data data = objectMapper.readValue(json, Data.class); // will be [TWO, null]\r\n\r\n        assertThat(data.getTypes()).isEqualTo(List.of(Type.TWO));\r\n    }\r\n\r\n}\r\n```\r\n\r\nFAIL_ON_INVALID_SUBTYPE:\r\n```java\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonSetter;\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\nimport com.fasterxml.jackson.annotation.Nulls;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.DeserializationFeature;\r\nimport com.fasterxml.jackson.databind.JsonMappingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\n\r\nclass TestCase {\r\n\r\n    ObjectMapper objectMapper = JsonMapper.builder()\r\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\r\n            .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)\r\n            .build();\r\n\r\n    @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXISTING_PROPERTY, visible = true)\r\n    @JsonSubTypes(value = { @JsonSubTypes.Type(value = DataType1.class, names = { \"TYPE1\" }) })\r\n    static abstract class Data {\r\n\r\n        private String type;\r\n\r\n        public String getType() {\r\n            return type;\r\n        }\r\n\r\n        public void setType(String type) {\r\n            this.type = type;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Objects.hash(type);\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object obj) {\r\n            if (this == obj) {\r\n                return true;\r\n            }\r\n            if (obj == null || getClass() != obj.getClass()) {\r\n                return false;\r\n            }\r\n            Data other = (Data) obj;\r\n            return Objects.equals(type, other.type);\r\n        }\r\n\r\n    }\r\n\r\n    static class DataType1 extends Data {\r\n\r\n    }\r\n\r\n    @Test\r\n    void shouldSkipUnknownSubTypeDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\r\n        String json = \"[ { \\\"type\\\" : \\\"TYPE1\\\"  }, { \\\"type\\\" : \\\"TYPE2\\\"  } ]\";\r\n\r\n        List<Data> actual = objectMapper.readValue(json, new TypeReference<List<Data>>() {});\r\n\r\n        DataType1 data = new DataType1();\r\n        data.setType(\"TYPE1\");\r\n        List<Data> expected = List.of(data); // will be [{type: TYPE1}, null]\r\n\r\n        assertEquals(expected, actual);\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nWhen `@JsonSetter(nulls = Nulls.SKIP)` or `.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))` is used, null should be skipped.\r\n\r\n### Additional context\r\n\r\n_No response_\n`@JsonSetter(nulls=...)` handling of `Collection` `null` values during deserialization with `READ_UNKNOWN_ENUM_VALUES_AS_NULL` and `FAIL_ON_INVALID_SUBTYPE` wrong\n### Search before asking\r\n\r\n- [X] I searched in the [issues](https://github.com/FasterXML/jackson-databind/issues) and found nothing similar.\r\n\r\n### Describe the bug\r\n\r\nIssue comes from 2018, https://github.com/FasterXML/jackson-databind/issues/1402 (two last comments).\r\n\r\nUnknown enum values and subtypes are added as null into result collection instead of being skipped. \r\n\r\n`@JsonSetter(nulls = Nulls.SKIP)` and `.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))` have no effect on nulls with:\r\n- READ_UNKNOWN_ENUM_VALUES_AS_NULL (is used for enums to consider unknown as null)\r\n- FAIL_ON_INVALID_SUBTYPE (is used for subtypes to consider unknown as null)\r\n\r\n\r\n### Version Information\r\n\r\n2.15.3\r\n\r\n### Reproduction\r\n\r\n\r\nREAD_UNKNOWN_ENUM_VALUES_AS_NULL:\r\n```java\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\nimport java.util.List;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonSetter;\r\nimport com.fasterxml.jackson.annotation.Nulls;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.DeserializationFeature;\r\nimport com.fasterxml.jackson.databind.JsonMappingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\n\r\nclass TestCase {\r\n\r\n    ObjectMapper objectMapper = JsonMapper.builder()\r\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\r\n            .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\r\n            .build();\r\n\r\n    static class Data {\r\n\r\n        private List<Type> types;\r\n\r\n        public List<Type> getTypes() {\r\n            return types;\r\n        }\r\n\r\n        public void setTypes(List<Type> types) {\r\n            this.types = types;\r\n        }\r\n\r\n    }\r\n\r\n    static enum Type {\r\n        ONE, TWO\r\n    }\r\n\r\n    @Test\r\n    void shouldSkipUnknownEnumDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\r\n        String json = \"{ \\\"types\\\" : [\\\"TWO\\\", \\\"THREE\\\"] }\";\r\n\r\n        Data data = objectMapper.readValue(json, Data.class); // will be [TWO, null]\r\n\r\n        assertThat(data.getTypes()).isEqualTo(List.of(Type.TWO));\r\n    }\r\n\r\n}\r\n```\r\n\r\nFAIL_ON_INVALID_SUBTYPE:\r\n```java\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonSetter;\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\nimport com.fasterxml.jackson.annotation.Nulls;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.DeserializationFeature;\r\nimport com.fasterxml.jackson.databind.JsonMappingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\n\r\nclass TestCase {\r\n\r\n    ObjectMapper objectMapper = JsonMapper.builder()\r\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\r\n            .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)\r\n            .build();\r\n\r\n    @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXISTING_PROPERTY, visible = true)\r\n    @JsonSubTypes(value = { @JsonSubTypes.Type(value = DataType1.class, names = { \"TYPE1\" }) })\r\n    static abstract class Data {\r\n\r\n        private String type;\r\n\r\n        public String getType() {\r\n            return type;\r\n        }\r\n\r\n        public void setType(String type) {\r\n            this.type = type;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Objects.hash(type);\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object obj) {\r\n            if (this == obj) {\r\n                return true;\r\n            }\r\n            if (obj == null || getClass() != obj.getClass()) {\r\n                return false;\r\n            }\r\n            Data other = (Data) obj;\r\n            return Objects.equals(type, other.type);\r\n        }\r\n\r\n    }\r\n\r\n    static class DataType1 extends Data {\r\n\r\n    }\r\n\r\n    @Test\r\n    void shouldSkipUnknownSubTypeDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\r\n        String json = \"[ { \\\"type\\\" : \\\"TYPE1\\\"  }, { \\\"type\\\" : \\\"TYPE2\\\"  } ]\";\r\n\r\n        List<Data> actual = objectMapper.readValue(json, new TypeReference<List<Data>>() {});\r\n\r\n        DataType1 data = new DataType1();\r\n        data.setType(\"TYPE1\");\r\n        List<Data> expected = List.of(data); // will be [{type: TYPE1}, null]\r\n\r\n        assertEquals(expected, actual);\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nWhen `@JsonSetter(nulls = Nulls.SKIP)` or `.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))` is used, null should be skipped.\r\n\r\n### Additional context\r\n\r\n_No response_\n",
                "distance": 0,
                "title": "`@JsonSetter(nulls=...)` handling of `Collection` `null` values during deserialization with `READ_UNKNOWN_ENUM_VALUES_AS_NULL` and `FAIL_ON_INVALID_SUBTYPE` wrong",
                "name": "root",
                "path": [],
                "issue_id": "root",
                "similarity": 2.0,
                "type": "issue"
            },
            {
                "start_line": null,
                "file_path": null,
                "issue_id": "4312",
                "type": "issue",
                "content": " When two properties return the same object, deserialization results in double the number of elements in the collection being populated.\r\nThis is an example of minimal reproduction\r\n\r\n```\r\npublic class Main2 {\r\n    @lombok.Data\r\n    public static class Data{\r\n        List<Long> idList;\r\n\r\n        public List<Long> getMyIdList() {\r\n            return idList;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Data data = new Data();\r\n        data.idList = Arrays.asList(1L,2L,3L,4L,5L);\r\n        String jsonStr = objectMapper.writeValueAsString(data);\r\n        System.out.println(jsonStr);//{\"idList\":[1,2,3,4,5],\"myIdList\":[1,2,3,4,5]}\r\n        \r\n        Data data1 = objectMapper.readValue(jsonStr, Data.class);\r\n        assert data1.getIdList().size() != data.getIdList().size();\r\n        System.out.println(data1);//Main2.Data(idList=[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) \r\n    }\r\n}\r\n```\r\n\r\nMore seriously, if such an object is subjected to the serialization and deserialization process over and over again, after a few times, it will cause a memory overflow.\r\n\n\n\nComment by SWQXDBA:\nthe version is 2.13.2\n\nComment by cowtowncoder:\nIn future, please do not report against old versions: should be reproducible with 2.16(.1).\r\n\r\nSecond: Lombok does bytecode manipulation so we would need to see actual class being used, not Lombok definition (since it is different from declaration, adding possible setters/getters/fields).\r\n\r\nBeyond this it'd be necessary to see the actual class: this may be due to non-obvious feature where \"getter\" can be used to get collection for deserialization purpose (if no setter or field found).\r\nThis can be disabled via `MapperFeature.USE_GETTERS_AS_SETTERS` (defaults to enabled) -- that would probably stop deserialization via getter-returned `List`.\r\nBut it seems like may be something sub-optimal in POJO definition as Jackson sees 2 logical properties whereas I assume you only want one?\r\n\r\n\n\nComment by cowtowncoder:\n(wrong repo, moving to jackson-databind)\n\nComment by SWQXDBA:\nI try the version of 2.16.1, it exists too.\r\nthe codes without lombok:\r\n```\r\n    public static class Data{\r\n\r\n        List<Long> idList = new ArrayList<>();\r\n\r\n        public Data setIdList(List<Long> idList) {\r\n            this.idList = idList;\r\n            return this;\r\n        }\r\n\r\n        public List<Long> getIdList() {\r\n            return idList;\r\n        }\r\n\r\n        public  List<Long> getMyIdList(){\r\n            return idList;\r\n        }\r\n\r\n    }\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Data data = new Data();\r\n        data.setIdList( Arrays.asList(1L,2L,3L,4L,5L));\r\n        String jsonStr = objectMapper.writeValueAsString(data);\r\n        System.out.println(jsonStr);//{\"idList\":[1,2,3,4,5],\"myIdList\":[1,2,3,4,5]}\r\n\r\n        Data data1 = objectMapper.readValue(jsonStr, Data.class);\r\n        assert data1.getIdList().size() != data.getIdList().size();\r\n        String jsonStr2 = objectMapper.writeValueAsString(data1);\r\n       //{\"idList\":[1,2,3,4,5,1,2,3,4,5],\"myIdList\":[1,2,3,4,5,1,2,3,4,5]}\r\n        System.out.println(jsonStr2);\r\n    }\r\n\r\n```\r\n\r\n\r\nAnd then,when I return a List with a new Object like `new ArrayList(idList)` that is ok;\r\n\r\n```\r\n   public static class Data{\r\n\r\n        List<Long> idList = new ArrayList<>();\r\n\r\n        public Data setIdList(List<Long> idList) {\r\n            this.idList = idList;\r\n            return this;\r\n        }\r\n\r\n        public List<Long> getIdList() {\r\n            return idList;\r\n        }\r\n\r\n        public  List<Long> getMyIdList(){\r\n            return new ArrayList<>(idList);\r\n        }\r\n\r\n    }\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Data data = new Data();\r\n        data.setIdList( Arrays.asList(1L,2L,3L,4L,5L));\r\n        String jsonStr = objectMapper.writeValueAsString(data);\r\n        System.out.println(jsonStr);//{\"idList\":[1,2,3,4,5],\"myIdList\":[1,2,3,4,5]}\r\n\r\n        Data data1 = objectMapper.readValue(jsonStr, Data.class);\r\n        assert data1.getIdList().size() != data.getIdList().size();\r\n        String jsonStr2 = objectMapper.writeValueAsString(data1);\r\n        //{\"idList\":[1,2,3,4,5],\"myIdList\":[1,2,3,4,5]}\r\n        System.out.println(jsonStr2);\r\n    }\r\n```\r\n\r\nAll in all, I think it's probably a good idea to do a clear on a collection that's been serialized using a getter.\n\nComment by SWQXDBA:\nOr, if you need to deserialize a collection obtained using a getter, you need to check for the existence of a setter method (even if you don't use a setter method, you need to make sure the setter exists). It makes no sense to deserialize a logical property. Logical properties only need to be serialized, not deserialized.\n\nComment by cowtowncoder:\nMy problem here is that while I understand what Jackson does and why (despite possibly surprising behavior of `MapperFeature.USE_GETTERS_AS_SETTERS` which was added years ago for JAXB compatibility), I do not quite \r\nunderstand what your object tries to achieve -- why are you exposing same `List` as 2 separate logical properties? (getters with different implied property name).\r\nIn most cases one would serialize just one; and if that is what you want, it is easy enough to achieve by f.ex `@JsonIgnore`ing one (`getMyIdList()` I'd guess).\r\n\r\nI do not think there is anything that needs changing on Jackson side (USE_GETTERS_AS_SETTERS will be disabled by default for Jackson 3.0 as I don't think it is a good feature in general). But I would like to help you make things work the way they should, if possible.\r\n\r\n\n\nComment by SWQXDBA:\n> My problem here is that while I understand what Jackson does and why (despite possibly surprising behavior of `MapperFeature.USE_GETTERS_AS_SETTERS` which was added years ago for JAXB compatibility), I do not quite understand what your object tries to achieve -- why are you exposing same `List` as 2 separate logical properties? (getters with different implied property name). In most cases one would serialize just one; and if that is what you want, it is easy enough to achieve by f.ex `@JsonIgnore`ing one (`getMyIdList()` I'd guess).\r\n> \r\n> I do not think there is anything that needs changing on Jackson side (USE_GETTERS_AS_SETTERS will be disabled by default for Jackson 3.0 as I don't think it is a good feature in general). But I would like to help you make things work the way they should, if possible.\r\n\r\nThis is just a simple example. Real business scenarios can be much more complex.\r\n\r\nFor example, to determine the value returned based on some conditions\r\n\r\n```\r\n    public class Data {\r\n\r\n        List<Long> listA;\r\n\r\n        List<Long> listB;\r\n\r\n        Boolean predicate;\r\n\r\n        public List<Long> getViewList(){\r\n            if(predicate==null){\r\n                return new ArrayList<>();\r\n            }\r\n            if(predicate){\r\n                return listA;\r\n            }else{\r\n                return listB;\r\n            }\r\n        }\r\n        //...other getter setters\r\n    }\r\n```\r\nIt's similar to a view property, except that under certain conditions it actually returns the object of another property.\n\nComment by cowtowncoder:\nYes, that's fine -- user needs to be aware of linking between actual values and not create problematic data structures.\r\n\r\nJackson does not, and should not try to track physical references across values: it operates on logical property values, based on possible annotations.\r\nIf code mixes and matches values, possible with cycles, that is problem with data model. Jackson does not do (and cannot really do) arbitrary graph traversal.\r\nIt just follows what it introspects to be the model via properties detected.\r\n\n\nComment by cowtowncoder:\nAt this point I am ready to close the issue, leaving open for a day or two for additional information on concrete problem to solve.\r\n\r\nOne last thing I'll mention is that if actual Object identity needs to be retained (to avoid duplicate serialization as JSON, as well as re-link values on deserialization, there is a way to do that, using `@JsonIdentityInfo`.\r\nThat is the mechanism that allows handling of cyclic data structures (to some degree).\r\n",
                "source_code": null,
                "distance": 0.25,
                "title": "Deserialization result error when two properties return the same collection object",
                "name": "issue#4312",
                "documentation": null,
                "path": [
                    {
                        "start_node": "root",
                        "description": "points to issue",
                        "type": "RELATED",
                        "end_node": "issue#4312"
                    }
                ],
                "similarity": 0.4436034630813172,
                "end_line": null,
                "signature": null
            }
        ]
    },
    "artifact_stats": {
        "skipped_due_to_time": 5,
        "valid_related_items": 19
    }
}